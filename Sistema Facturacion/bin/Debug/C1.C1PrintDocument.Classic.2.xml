<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.C1PrintDocument.Classic.2</name>
    </assembly>
    <members>
        <member name="T:C1.C1PrintDocument.C1DocEngine">
            <summary>
            The C1 document engine.
            </summary>
        </member>
        <member name="T:C1.Util.IOnLongOpInProgressProvider">
            <summary>
            Interface used to provide feedback and the ability to cancel potentially long operations
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocEngine.CheckNotBusy(System.Boolean)">
            <summary>
            Makes sure the object is not busy; throws exception if it is.
            If the argument is true, sets the busy state to true.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocEngine.SetSourceTreeIsFresh">
            <summary>
            Tells the engine not to reset old generation info in the source tree.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.FormsKeyActionTab">
            <summary>
            Gets or sets the action to be performed when a tab key is pressed 
            in C1PrintPreview control which is connected to this doc engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.FormsKeyActionEnter">
            <summary>
            Gets or sets the action to be performed when an Enter key is pressed
            in C1PrintPreview control which is connected to this doc engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.DocumentInfo">
            <summary>
            Specifies the common document information, author, title and so on.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.Name">
            <summary>
            Sets or returns the name of the doc engine. This name is stored with the document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.DisplayName">
            <summary>
            Sets or returns the display name of the doc engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.SourceTree">
            <summary>
            Sets or returns the source tree of the doc engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.RenderTree">
            <summary>
            Returns the render tree of the doc engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.Busy">
            <summary>
            Sets or returns the current busy state of the object;
            fires the BusyChanged event if the state actually changes.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.DefaultFileDescription">
            <summary>
            Returns the default friendly C1PrintDocument file description (C1PrintDocument documents)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.DefaultFileExtension">
            <summary>
            Returns the default C1PrintDocument file extension, without the dot (c1d)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.InputControls">
            <summary>
            Use this property to enumerate all input controls within document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.HasOutlineEntries">
            <summary>
            Gets or sets the value indicating whether a document has at least one outline entry.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocEngine.C1#C1PrintDocument#IC1DocEngine#SourceTree">
            <summary>
            Sets or returns the source tree of the doc engine.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentDrawMode">
            <summary>
            Describes the mode of drawning of pages of doc engine.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1PrintDocument">
            <summary>
            	Summary description for Class1.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IDocumentElement">
            <summary>
            Defines necessary methods/props for communnication between document
            elements in a common way.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetParent">
            <summary>
            Returns a parent element or null. 
            
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetFont">
            <summary>
            Returns a font of an element. Necessary for the Em/Ex calculations.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetContentWidthMm">
            <summary>
            Returns a width of a content area of an element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetContentHeightMm">
            <summary>
            Returns a height of a content area of an element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetDefaultUnit">
            <summary>
            Returns default unit of measurement of an element.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetDefaultUnitOfFrames">
            <summary>
            Returns default unit of frames (i.e. padding/spacing)
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.GetStyles">
            <summary>
            Returns a collection of elements styles. In the current design
            there are only two styles in a collection, "own" and "StyleTableCell"
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.AddChildElement(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            Subscribes child element to events of this element. Returns an
            object that must be stored by child element and is used later
            in the RemoveChildElement method to quickly unsubscribe child element
            from events notification.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElement.RemoveChildElement(System.Object)">
            <summary>
            Unsubscribes child element from events of this element. Child element
            is identified by the cookie parameter where a value returned by the
            AddChildElement method must be passed.
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="E:C1.C1PrintDocument.IDocumentElement.DefaultUnitChanged">
            <summary>
            Raised when a value of GetDefaultUnit() was changed.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.IDocumentElement.DefaultUnitOfFramesChanged">
            <summary>
            Raised when a value of GetDefaultUnitOfFrames() was changed.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IDocumentElement.IsRootElement">
            <summary>
            TODODOC: 
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.IDocumentElement.PhysicalSizeChanged">
            <summary>
            Raised when physical size of element has changed.
            E.g., this event will be raised when width of element expressed in 
            percents and width of a parent control has changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetClientRectOfControl(System.Windows.Forms.Control)">
            <summary>
            Returns a rectangle occupied by control's client area relative to
            top left corner of the control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetClientRectOfWindow(System.IntPtr)">
            <summary>
            Returns a rectangle occupied by window's client area relative to
            top left corner of the window.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlImage(System.Windows.Forms.Control,System.Boolean,System.UInt32)">
            <summary>
            Returns a screen image of a specified control.
            </summary>
            <param name="control">
            Control in question.
            </param>
            <param name="clientAreaOnly">
            Indicates whether all control surface or client area only must be drawn.
            </param>
            <param name="wm_print_flags">
            Specify explicit flags passed to WM_PRINT message.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetWindowImage(System.Windows.Forms.Control,System.IntPtr,System.Boolean)">
            <summary>
            Returns a screen image of a specified control or window.
            </summary>
            <param name="control">
            Control whose image to return. If this parameter is not null then
            hWnd parameter is ignored.
            </param>
            <param name="hWnd">
            Handle of a window whose image to return. It's used only if control 
            parameter is null, otherwise is ignored. If this parameter is used
            then clientAreaOnly must be false, otherwise an exception will be raised.
            </param>
            <param name="clientAreaOnly">
            Specifies whether all control surface or client area only must be drawn.
            If hWnd is used then must be false.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetWindowImage(System.Windows.Forms.Control,System.IntPtr,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a screen image of a specified control or window.
            </summary>
            <param name="control">
            Control whose image to return. If this parameter is not null then
            hWnd parameter is ignored.
            </param>
            <param name="hWnd">
            Handle of a window whose image to return. It's used only if control 
            parameter is null, otherwise is ignored. If this parameter is used
            then clientAreaOnly must be false, otherwise an exception will be raised.
            </param>
            <param name="clientAreaOnly">
            Specifies whether all control surface or client area only must be drawn.
            If hWnd is used then must be false.
            </param>
            <param name="includeControls">
            Specifies whether to include .NET Control children.
            </param>
            <param name="includeWindows">
            Specifies whether to include non-.NET child windows.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlImage(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Returns a screen image of a control.
            </summary>
            <param name="control">
            Control in question.
            </param>
            <param name="clientAreaOnly">
            Specifies whether all control surface or client area only must be drawn.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.PrepareControlWmPrint(System.Windows.Forms.Control,System.Boolean@,System.Boolean@)">
            <summary>
            Auxiliary method that prepares .Net Control before sending him
            WM_PRINT message. It's turn off DoubleBuffer and AllPaintingInWmPaint
            flags of ControlStyle, which are causes an exception when process this
            method.
            Method returns to parameters that must be passed later to the 
            UnPrepareControlWmPrint methos which gets back control to its
            original state.
            </summary>
            <param name="ctrl"></param>
            <param name="isDoubleBuffer"></param>
            <param name="isAllPaintingInWmPaint"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.UnPrepareControlWmPrint(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Returns control processed by the PrepareControlWmPrint method to
            its original state.
            </summary>
            <param name="ctrl"></param>
            <param name="isDoubleBuffer"></param>
            <param name="isAllPaintingInWmPaint"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlTypeToPrepareWmPrint(System.Windows.Forms.Control)">
            <summary>
            Auxiliary
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlGetStyleMI(System.Windows.Forms.Control)">
            <summary>
            Returns MethodInfo object for Control.GetStyle.
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlSetStyleMI(System.Windows.Forms.Control)">
            <summary>
            Returns MethodInfo object for Control.SetStyle
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetChildHwnds(System.IntPtr)">
            <summary>
            Returns a list of child window handles of a window with a specified handle.
            Indexes are increased from most foreground window to most background.
            </summary>
            <param name="parentHwnd"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.DrawControlImage(System.Drawing.Graphics,System.Int32,System.Int32,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Draws a screen image of a specified control to a specified Graphics.
            </summary>
            <param name="g">
            Graphics to draw on.
            </param>
            <param name="x">
            X coordinate of an image on the graphics.
            </param>
            <param name="y">
            Y coordinate of an image on the graphics.
            </param>
            <param name="control">
            Control whose image to draw.
            </param>
            <param name="clientAreaOnly">
            Specifies whether all control surface or client area only must be drawn. 
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CanPrintControl(System.Object)">
            <summary>
            Indicates whether a control is C1-printable, i.e. could be printed
            by RenderC1Printable object and C1PrintDocument's RenderXXXC1Printable
            methods.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetControlPrinter(System.Object)">
            <summary>
            Returns IC1ControlPrinter object for a specified control or
            nul if the one is not C1-printable.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.IsAbsoluteUnit(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Indicates whether a specified unit is absolute or 
            relative (%, Em, Ex)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.ConvertUnit(System.Double,C1.C1PrintDocument.UnitTypeEnum,C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Converts a value from one absolute unit to another.
            </summary>
            <param name="value"></param>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CanChangePageMetrics">
            <summary>
            Indicates whether the changing of page layout (page size, 
            header/footer/body size, etc.) is permitted now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckCanChangePageMetrics">
            <summary>
            Raises an exception if CanChangePageMetrics() is false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CanRender">
            <summary>
            Indicates whether drawing operations are available now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckCanRender">
            <summary>
            Raises an exception if CanRender() is false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CanRenderBlock">
            <summary>
            Indicates whether rendering in the block flow is permitted now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckCanRenderBlock">
            <summary>
            Raises an exception if CanRenderBlock() is false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CanRenderDirect">
            <summary>
            Indicates whether direct rendering is permitted now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckCanRenderDirect">
            <summary>
            Raises an exception if CanRenderDirect() is false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.PageAsMetafile(System.Int32,System.Boolean)">
            <summary>
            Returns a page image as a metafile.
            </summary>
            <param name="pageNumber">
            1-based number of a page in question.
            </param>
            <param name="whiten">
            If true then a white background will be provided under a page image.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.PageAsBitmap(System.Int32,System.Single)">
            <summary>
            Returns a page image as a Bitmap.
            </summary>
            <param name="pageNumber">
            1-based number of a page in question.
            </param>
            <param name="resolution">
            Specifies a resolution of returning bitmap, in dpi.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
            <summary>
            Print document according to the specified printerSettings (null means 
            default printer settings)
            </summary>
            <param name="printerSettings"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Print(System.Boolean)">
            <summary>
            Print document according to the default system printer settings
            </summary>
            <param name="printerSettings"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.ExportToPDF(System.String,System.Boolean,System.Boolean)">
            <summary>
            Exports generated document to the PDF format.
            </summary>
            <param name="fileName">
            Target file name.
            </param>
            <param name="embedFonts">
            Specify whether embed fonts to pdf file.
            </param>
            <param name="showProgressDialog">
            Specify whether to show a progress dialog during generation.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.ExportToPDF(System.String,System.Boolean)">
            <summary>
            Shortcut to ExportToPDF(fileName, true, showProgressDialog)
            </summary>
            <param name="fileName"></param>
            <param name="showProgressDialog"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.ExportToHTML(System.String,System.String,System.Boolean,C1.C1PrintDocument.HtmlTOCTypeEnum,C1.C1PrintDocument.HtmlTOCLinksLocationEnum,System.String,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Exports generated document to HTML format.
            </summary>
            <param name="fileName">
            Target file name.
            </param>
            <param name="imagesFolderName">
            The name of subfolder where images are stored.
            </param>
            <param name="onePagePerFile">
            Indicates whether the exported file will be generated as a single file 
            or multiple files.
            </param>
            <param name="generateTOC">
            Specifies the type of Table Of Contents.
            </param>
            <param name="tocLinksLocation">
            Specifies the location of the Table Of Contents.
            </param>
            <param name="customNavigationBar">
            Allows the user to specify a custom formatted navigation bar as a string.
            </param>
            <param name="generatePageSeparators">
            Indicates whether a horizontal line will be generated as a separator 
            between pages.
            </param>
            <param name="scaling">
            Scaling factor for the generated content (in percent; 100% means natural size).
            </param>
            <param name="showProgressDialog">
            If True, a progress dialog box will be shown during the export process.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Save(System.String)">
            <summary>
            Saves a generated document to a file in C1D format.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Save(System.IO.Stream)">
            <summary>
            Saves a generated document to a stream in C1D format.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Load(System.IO.Stream)">
            <summary>
            Loads a document represented in C1D format to document engine from
            a specified stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.UpdateAfterLoading">
            <summary>
            Procedure updates fields of C1PrintDocument object from the loaded C1DocEngine object.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.SetLastRenderedInfo(C1.C1PrintDocument.MeasureInfo)">
            <summary>
            Set a value of the LastRenderedInfo property.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Generate(System.Drawing.Printing.PageSettings)">
            <summary>
            Triggers GenerateDocument event.
            </summary>
            <param name="ps"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.Generate">
            <summary>
            Triggers GenerateDocument event.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.EndDoc">
            <summary>
            Finishes generation of a document.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RemoveRenderObjects(C1.C1PrintDocument.ObjectListBase)">
            <summary>
            Removes all RenderObjects from the list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.KillDoc">
            <summary>
            Cancels generation of a current document.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewColumn">
            <summary>
            Forces creation of a new column.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewColumnInternal">
            <summary>
            Creates a new column
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewPage">
            <summary>
            Creates a new page.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewPageInternal">
            <summary>
            Creates a new page.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewPageConfigure">
            <summary>
            Finishes a generation of a current page and opens a page layout 
            configuration phase in which the changing of properties affected 
            page layout is permitted. This stage is closed by call of the NewPage
            method.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.NewPageConfigureInternal">
            <summary>
            Internal implementation of NewPageConfigure
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.StartPageConfigurePhase">
            <summary>
            Starts a phase in which page setting changes can be performed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.StartPageGeneration">
            <summary>
            Starts generation of a new page.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.FinishPageGeneration(System.Boolean)">
            <summary>
            Finishes generation of a page.
            </summary>
            <param name="lastPage"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.StartColumnGeneration">
            <summary>
            Starts generation of a column.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.FinishColumnGeneration">
            <summary>
            Finishes generation of a column
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetCurGenPageSettings">
            <summary>
            Returns page settings that are used for currently generating page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetRunningTitleDrawel(C1.C1PrintDocument.RunningTitle)">
            <summary>
            Generates drawel representing a specified running title.
            Returning drawel has unspecified X,Y. 
            </summary>
            <param name="rt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetBlockFlowParent">
            <summary>
            Returns an element which is used as a parent for ROs rendering to the
            block flow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.AcceptNewBlockDrawel(C1.C1PrintDocument.DocEngine.Src.Drawel,System.Double,C1.C1PrintDocument.AlignHorzEnum)">
            <summary>
            Performs necessary actions to include new Block drawel in source tree.
            </summary>
            <param name="drawel"></param>
            <param name="printedHeightMm"></param>
            <param name="drawelAlign"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderBlockText(System.String,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            
            </summary>
            <param name="text">
            Text to render.
            </param>
            <param name="width">
            Width of text box. If null then equal to the width of current column.
            </param>
            <param name="height">
            Height of text box. If null then autoheight.
            </param>
            <param name="style">
            Style of the text. If null then the style for text of document is used.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CreateRenderTextForBlock(System.String,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Creates RenderText that is used by RenderText and MeasureText methods.
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderBlockRichText(System.String,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            
            </summary>
            <param name="rtf">
            Must be a formatted text, not a plain.
            </param>
            <param name="width">
            If null then 100% of page column width.
            </param>
            <param name="height">
            If null then autoheight.
            </param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            
            </summary>
            <param name="image">
            Image to render.
            </param>
            <param name="width">
            Width of an image box. If null then autowidth.
            </param>
            <param name="height">
            Height of an image box. If null then autoheight.
            </param>
            <param name="style">
            Style of the image. If null then the style for an image of document is used.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderBlockControlImage(System.Windows.Forms.Control,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Renders an image of Control's surface.
            </summary>
            <param name="control">
            Control to render.
            </param>
            <param name="width">
            Width of an image box. If null then autowidth.
            </param>
            <param name="height">
            Height of an image box. If null then autoheight.
            </param>
            <param name="style">
            Style of the image. If null then the style for an image of document is used.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CreateRenderTextForDirect(System.String,System.Object,System.Object,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Creates RenderText object that is used by RenderDirectText and
            MeasureDirectText method.
            </summary>
            <param name="text"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderDirectPolyInternal(System.Boolean,System.Collections.IEnumerable,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            To render both polilines (isPolygon == false) and polygons 
            (isPolygon == true)
            </summary>
            <param name="isPolygon"></param>
            <param name="points"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.InitInlineTextCurrent(C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Initializes new RO in PrintingContext.InlineTextCurrent property.
            </summary>
            <param name="generalStyle">
            Specify a common style of text inline rendering (frames, etc.)
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.ProcessTextInlineBlock">
            <summary>
            Check overflow of available height by current text inline block
            and renders it if overflowed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GenerateTextInlineBlock">
            <summary>
            Generates drawel with a next portion of inline text.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CutTextInlineBlock">
            <summary>
            Cuts a text in PrintingContext.InlineTextCurrent RO that was already
            rendered.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CloseTextInline">
            <summary>
            Closes a process of rendering inline text and renders pending
            output.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RenderInlineEnd">
            <summary>
            Closes current inline block if exists. Next RenderInline will starts
            as a new paragraph.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.SetIsGenerating(System.Boolean)">
            <summary>
            Sets IsGenerating property.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckGenerating">
            <summary>
            Raises an exception if IsGenerating is false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CheckNotGenerating">
            <summary>
            Raises an exception if IsGenerating is true.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.RunningTitlePropertyChangeEH(System.Object,C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Event handler that listen changes of running title heights and forces
            body's size recalculation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.AggregatedUnitPropertyChangeEH(System.Object,C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Adjust Type of owner UnitBase-derived objects.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnPhysicalSizeChanged">
            <summary>
            Triggers PhysicalSizeChanged event.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.C1PrintDocument._inNewPageStarted">
            <summary>
            Indicates whether we already in the NewPageStarted event, used to block
            recursion.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnNewPageStarted(C1.C1PrintDocument.NewPageStartedEventArgs)">
            <summary>
            Triggers NewPageStarted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnNewPageSetup(C1.C1PrintDocument.NewPageSetupEventArgs)">
            <summary>
            Triggers NewPageSetup event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnPageFinishing(C1.C1PrintDocument.PageFinishingEventArgs)">
            <summary>
            Triggers PageFinishing event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnColumnStarting(C1.C1PrintDocument.ColumnStartingEventArgs)">
            <summary>
            Triggers ColumnStarting event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnColumnStarted(C1.C1PrintDocument.ColumnStartedEventArgs)">
            <summary>
            Triggers ColumnStarted event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnColumnFinishing(C1.C1PrintDocument.ColumnFinishingEventArgs)">
            <summary>
            Triggers ColumnFinishing event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.OnGenerateDocument(C1.C1PrintDocument.GenerateEventArgs)">
            <summary>
            Triggers GenerateDocument event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetBodySizeMm">
            <summary>
            Returns size of a body in mm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetPrintableAreaSizeMm">
            <summary>
            Returns printable size of a page in mm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.GetPageMarginsMm">
            <summary>
            Returns page margins in mm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.UpdateWorkingPageSettings">
            <summary>
            Updates WorkingPageSettings from PageSettings if possible.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.AdjustUnitType(C1.C1PrintDocument.UnitBase,C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Set Type of a specified UnitBase-derived object.
            </summary>
            <param name="unit"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1PrintDocument.CreateUnitFromObject(System.Object,System.Boolean)">
            <summary>
            Creates new Unit object from length, correctly typed and subscribed.
            isHorizontal = false means vertical.
            </summary>
            <param name="length"></param>
            <param name="isHorizontal"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.DefaultUnitOfFrames">
            <summary>
            Defines a default unit of measurement for RO's frames, namely
            for spacing and padding. Can be an absolute unit only.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.DefaultUnitOfFramesSynchronized">
            <summary>
            Indicates whether a change of DefaultUnit causes automatic change
            of DefaultUnitOfFrames to the same value.
            If DefaultUnit is set to non-absolute unit then this property becomes
            false automatically.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageColumns">
            <summary>
            Defines a collection of columns width and spacing definitions.
            While this collection is empty these column attributes are determined
            based on ColumnCount and ColumnSpacing properties.
            Addition members to this collection allows to redefine these attributes
            for a corresponding number of columns starting from the leftmost one.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.Styles">
            <summary>
            Collection of document's styles.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.Style">
            <summary>
            Defines a style of the document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.HyperlinkStyle">
            <summary>
            Defines a default style of hyperlinks in the document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.StyleTableCell">
            <summary>
            Defines a style from which StyleTableCell styles of tables are inherited.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.ColumnSpacing">
            <summary>
            Value of ColumnSpacingUnit 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.ColumnSpacingStr">
            <summary>
            String representation of ColumnSpacingUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.ColumnSpacingUnit">
            <summary>
            Defines a default spacing between columns. Can be redefined in the 
            PageColumns property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageLayer">
            <summary>
            Defines a pege layer where next direct drawing will appear.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageSettings">
            <summary>
            Page settings
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.C1DPageSettings">
            <summary>
            Used to serialize/deserialize PageSettings property in a code.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.DocumentName">
            <summary>
            Defines a name of the document in OS printing queue.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.IsGenerating">
            <summary>
            Indicates whether document is in generating of its content 
            (true between StartDoc/EndDoc calls.)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.C1#C1PrintDocument#IC1PrintDocument#DocEngine">
            <summary>
            Currently used document engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.DocEngine">
            <summary>
            Currently used document engine.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PrintableAreaSize">
            <summary>
            Returns a size of printable area of a current generating page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.BodyAreaSize">
            <summary>
            BodyAreaSizeUnit represented in DefaultUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.BodyAreaSizeUnit">
            <summary>
            Size of body area (printable area excluding header and footer)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.CurrentColumnWidth">
            <summary>
            Value of CurrentColumnWidthUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.CurrentColumnWidthUnit">
            <summary>
            Returns a width of currently generating column
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.AvailableBlockFlowHeight">
            <summary>
            Value of AvailableBlockFlowHeightUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.AvailableBlockFlowHeightUnit">
            <summary>
            An amount of available vertical space in the block flow in the currently 
            generating column
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.RenderBlockProhibited">
            <summary>
            Allows to turn on or off a state when rendering to the block flow
            is prohibited.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.RenderDirectProhibited">
            <summary>
            Allows to turn on or off a state when direct rendering 
            is prohibited.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageCount">
            <summary>
            Returns a number of pages that has been generated so far.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.CurrentPage">
            <summary>
            Current generating page number (1-based) or -1 if not in generation.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.CurrentColumn">
            <summary>
            Current generating column number (0-based) or -1 if not in generation.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.LastRenderedInfo">
            <summary>
            Contains a measurement info about the last rendering operation, the same
            one that was returned by RenderXXX method.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.NewPageSetup">
            <summary>
            Raised just before generation of a next page of a document.
            Page layout (PageSettings/PageHeader/PageFooter) can be changed in 
            this event.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.NewPageStarted">
            <summary>
            Occurs after NewPageSetupEventHandler and allows to perform
            rendering.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.PageFinishing">
            <summary>
            Occurs when generating of a page is finished. This event
            is a last chance to change a CONTENT (not sizes) of PageHeader
            and PageFooter. 
            RenderDirectXXX() operations are permitted in this event
            (but NOT RenderBlockXXX()).
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.ColumnStarting">
            <summary>
            Occurs before new column is established. Column width could be
            tuned in this event. Any rendering is prohibited.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.ColumnFinishing">
            <summary>
            Occurs when next column has been finished. 
            Only RenderDirectXXX drawing is permitted in this event.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.ColumnStarted">
            <summary>
            Occurs after ColumnStarting event when new column has been 
            established. Column width can't be tuned in this event. 
            Any rendering is permitted.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.GenerateDocument">
            <summary>
            Allows user to build document content in event handler
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.GenerateDocumentHandled">
            <summary>
            Returns true if the GenerateDocument event has a handler.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.PhysicalSizeChanged">
            <summary>
            IdocumentElement item implementation
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.PrintQueryPageSettings">
            <summary>
            Occurs before a page is sent to the printer.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.DocumentStarted">
            <summary>
            Occurs when the document building is started (in StartDoc method).
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1PrintDocument.DocumentEnded">
            <summary>
            Occurs when the document building is ended (in EndDoc method).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PrintingContext">
            <summary>
            References an object that keeps auxiliary info about currently
            generating document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageMetricsChangeAvailable">
            <summary>
            Between StartDoc()/EndDoc() calls indicates whether changes 
            influencing to page layout (page size, header/footer/body size, etc.)
            are permitted. 
            NOTE: this property is for very internal usage only. Use 
            CanChangePageMetrics() to determine the possibility of page layout
            change.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.PageBody">
            <summary>
            References an object representing page body.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.WorkingPageSettings">
            <summary>
            Represents an actual PageSettings. Updating from PageSettings property
            when possible.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.StyleContext">
            <summary>
            References a style context of the document's style tree.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.EmfType">
            <summary>
            Gets or sets the value indicating the type of created metafiles.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.DefaultPaperSize">
            <summary>
            Gets or sets the default paper size which is selected when new C1PrintDocument object is created.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.UsePrinterDC">
            <summary>
            Gets or sets value indicating whether the printer DC should be used to create a metafiles
            for export.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1PrintDocument.InputControls">
            <summary>
            Use this property to enumerate all input controls within document.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.NewPageSetupEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ControlPrinters.IC1ControlPrintable.GetPrinter">
            <summary>
            Returns an object supporting the IC1ControlPrinter interface.
            
            NOTES to implementator.
            At every call MUST return NEW instance of IC1ControlPrinter!!!
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.RenderGenerator">
            <summary>
            Generates the render tree from the source tree
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.RtreeGenerator.RtreeGenerateBegin(C1.C1PrintDocument.DocEngine.Src.DrawelRoot)">
            <summary>
            Begins the render tree generation session.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.RtreeGenerator.RtreeGenerateEnd">
            <summary>
            Ends the render tree generation. Releases the associated resources.
            </summary>
            <returns>Root of the generated render tree</returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.RtreeGenerator.RtreeGenerate(System.Collections.IEnumerable)">
            <summary>
            Generates the render tree. Call RtreeGenerateEnd to retrieve the generated render tree.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.RtreeGenerator.RtreeGeneratePage(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            Generates one page of the render tree.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.StreeResolver">
            <summary>
            Used to resolve C1PrintDocument source tree.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.StreeResolver.Resolve">
            <summary>
            Resolves a C1PrintDocument source tree
            </summary>
            <param name="sourceTreeRoot">The root drawel of the source tree</param>
            <returns>PageInfos class which should be passed to RtreeGenerator to generate the render tree</returns>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.GenerationInfo">
            <summary>
            Holds references to data which the generator wants to show to drawels.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Drawel">
            <summary>
            	Describes a single render drawel
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._source">
            <remarks> Source drawel that produced this render drawel. </remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._srcPath">
            <remarks>Path (using indices) from the root to the source drawel that produced this render drawel. </remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._srcRootPath">
            <remarks>Path (using indices) to the root of the source tree (exists for page header and footer drawels, which a separate trees in source). </remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._srcPagePart">
            <remarks>Source page part.</remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._rectAll">
            <summary>
            Position of the drawel before rotation (nested rectangles, outer includes spacing)
            Units are Src.Drawel.s_units.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Drawel._rotation">
            <remarks> Rotation of the drawel (RectAll) around its top left corner </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.#ctor">
            <remarks> Constructor </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.AfterDeserialize(C1.C1PrintDocument.DocEngine.Src.DrawelBase)">
            <summary>
            Resolves source path and sets Source.
            </summary>
            <param name="sourceRoot">Source tree root</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.CalcAndSetRects">
            <summary>
            sets border, padding and content rects, plus border widths, based on rectAll.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.Draw(System.Drawing.Graphics,System.Int64,C1.C1PrintDocument.DocumentDrawMode)">
            <summary>
            Draws the drawel
            </summary>
            <param name="g">Graphics used to paint the drawel</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.GetRectangle(C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum)">
            <summary>
            Returns the specified bounding rectangle
            </summary>
            <param name="bounds">What boundary to return</param>
            <returns>The rectangle</returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Drawel.CalcDrawelRects(C1.C1PrintDocument.DocEngine.Src.DrawelBase,System.Drawing.RectangleF,System.Drawing.RectangleF@,System.Drawing.RectangleF@,System.Drawing.RectangleF@,C1.C1PrintDocument.Util.C1DSides@)">
            <summary>
            Based on the outermost drawel rectangle and widths of spacing, borders and padding,
            calculate the nested rectangles and borders widths.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.Layer">
            <summary>
            Returns the render layer which contains this drawel
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.Page">
            <summary>
            Returns the render page which contains this drawel
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.Source">
            <summary>
            Sets or returns the source tree drawel which produced this render drawel
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.SrcPath">
            <summary>
            For serialization only - gets or sets path to the source drawel, comma-delimited
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.InflatedPadding">
            <summary>
            Inflates the padding a bit, making sure that there is no gap
            between padding and border. Returns the inflated rectangle.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.Pos">
            <summary>
            Used to serialize the RectAll only.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Drawel.Rotation">
            <value> Sets or returns the rotation associated with the drawel </value>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Root">
            <summary>
            	Corresponds to a specific rendition of the document and contains the whole render tree
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Root._pages">
            <remarks> Collection of pages within this render </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Root.AfterDeserialize(C1.C1PrintDocument.DocEngine.Src.DrawelRoot)">
            <summary>
            Resolves sources of all drawels
            </summary>
            <param name="sourceRoot">Source tree root</param>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Root.Pages">
            <remarks> Properties </remarks>
            <value> Pages gets the collection of pages within this render </value>
        </member>
        <member name="T:C1.Util.Xml.Serialization.IMemberTypeEncoder">
            <summary>
            This interface is used to allow objects and collection to serialize
            types of their members in a custom way.
            If a collection implements this interface, TypeToString is invoked during
            serialization of collection items, and for all items for which it returns a
            non-null string, that string is used as the element name of the item.
            If a class implements this interface, AND a member of that class has
            attribute TypeNameSerialization.Custom, AND does not have attribute
            XmlAttribute (i.e. is serialized as an element), TypeToString is invoked
            on the owner when that member is serialized, and if that returns a non-null
            string, that string is used as the value of TypeName attribute.
            When deserializing a collection which implements this interface,
            StringToType is invoked for each new item in the collection, and if that
            returns a non-null type, that type is used to create the item. Otherwise,
            TypeNameSerialization attribute is used.
            When deserializing a class which implements this interface, StringToType
            is invoked on that class for members with TypeNameSerialization.Custom
            attribute set.
            </summary>
        </member>
        <member name="M:C1.Util.Xml.Serialization.IMemberTypeEncoder.TypeToString(System.Object)">
            <summary>
            Returns a string representing the type of the object
            </summary>
        </member>
        <member name="M:C1.Util.Xml.Serialization.IMemberTypeEncoder.StringToType(System.String)">
            <summary>
            Returns the type restored from the serialized string
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Pages">
            <summary>
            The render pages collection. Makes sure each page knows its index.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Page">
            <summary>
            Describes a single physical page of the render document
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.#ctor">
            <summary>
            this constructor should be used for deserialization only;
            we leave page settings empty as they'll be set by deserializer.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.Draw(System.Drawing.Graphics)">
            <summary>
            Resorts and draws all layers within this page
            </summary>
            <param name="g">Graphics used to paint the page</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormDestroy">
            <summary>
            Is called when the page is removed from preview (from Pages property).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormResizeMove(System.Drawing.Rectangle)">
            <summary>
            Is called when the page is resized or moved.
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormMove(System.Drawing.Rectangle)">
            <summary>
            Is called when the page is moved (its client rectangle is moved).
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormHide">
            <summary>
            Is called when the page disappears from preview.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormShow(System.Drawing.Rectangle)">
            <summary>
            Is called when the page is showed on preview.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FormSave">
            <summary>
            Is called when preview form must be saved.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.AfterDeserialize(C1.C1PrintDocument.DocEngine.Src.DrawelRoot)">
            <summary>
            Resolves sources of all drawels within this page
            </summary>
            <param name="sourceRoot">Source tree root</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Page.FetchOutlineEntries(System.Int32,System.Boolean)">
            <summary>
            Returns outline metadata for this page's source drawels
            </summary>
            <param name="pageNo">The page number added to outline entries.</param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageId">
            <summary>
            Contains page id; this number generally is just a cookie, *not* the page number or index.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageIdx">
            <summary>
            Returns 0-based page index in the pages collection
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageNo">
            <summary>
            Returns 1-based page number in the pages collection
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.Layers">
            <summary>
            Layers gets the collection of layers within this page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageSettings">
            <summary>
            PageSettings gets or sets the page settings associated with the page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageSizeInPoints">
            <summary>
            Returns the size of page in points (1/72 inch).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.PageSizeLpix">
            <summary>
            Returns the size of page in LengthUnit.DefaltUnits
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.CustomPageNo">
            <summary>
            Specifies the "real" page number, that was specified by user 
            and is used by DrawelMarkup, DrawelText and so on.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Page.CustomPageCount">
            <summary>
            Specifies the "custom" page count, that was specified by user 
            and is used by DrawelMarkup, DrawelText and so on.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Drawels">
            <summary>
            Class for the render drawels collection
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.Layer">
            <summary>
            	Used to group drawels according to their layer attribute
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Layer._drawels">
            <remarks> Collection of drawels within this layer </remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Layer._borders">
            <remarks> Collection of borders within this layer </remarks>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.Layer._order">
            <remarks> Value used for layers sorting </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Layer.#ctor">
            <remarks> Constructors </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Layer.Draw(System.Drawing.Graphics,System.Int64,System.Boolean,C1.C1PrintDocument.DocumentDrawMode)">
            <summary>
            Draws all drawels within this layer
            </summary>
            <param name="g">Graphics used to paint the layer</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Layer.AfterDeserialize(C1.C1PrintDocument.DocEngine.Src.DrawelRoot)">
            <summary>
            Resolves sources of all drawels within this layer
            </summary>
            <param name="sourceRoot">Source tree root</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.Layer.CompareTo(C1.C1PrintDocument.DocEngine.Render.Layer)">
            <remarks> Implementation of IComparable </remarks>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Layer.Page">
            <summary>
            Returns the render page which contains this layer
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Layer.Drawels">
            <remarks> Properties </remarks>
            <value> Drawels gets the collection of drawels within this layer </value>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.Layer.Order">
            <value> Order gets or sets the order associated with the layer </value>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.TextDrawel">
            <summary>
            	Describes a single render drawel with 'Text' type
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.TextDrawel._text">
            <remarks> Text string </remarks>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.TextDrawel.#ctor">
            <remarks> Constructor </remarks>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Render.TextDrawel.Text">
            <remarks> Properties </remarks>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.MarkupDrawel">
            <summary>
            	Describes a single render drawel containing marked up text
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Render.MarkupDrawel.#ctor">
            <remarks> Constructor </remarks>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.ImageDrawel">
            <summary>
            	Describes a single render drawel with 'Image' type
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.OwnerDrawDrawel">
            <summary>
            	Describes a single render drawel with 'Image' type
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.ShapeDrawel">
            <summary>
            	Describes a single render drawel with 'shape' type
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1Stack">
            <summary>
            Simple stack with indexed access, based on System.Collections.ArrayList
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.Dictionary">
            <summary>
            A dictionary. Corresponds to the c1d:dictionary element.
            c1d:dictionary
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.Dictionary.FindItem(System.String,System.Type)">
            <summary>
            Finds the dictionary item specified by the item name and type.
            </summary>
            <param name="itemName">Item name</param>
            <param name="itemType">Item type</param>
            <returns>The dictionary item found or null</returns>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DictDiv">
            <summary>
            A dictionary division - contains dictionary items of the same type.
            Item type is determined by the 1st stored item.
            Should not be used directly, only via Dictionary.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DictItem">
            <summary>
            A dictionary item - base class for items of different types.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DictItemImage">
            <summary>
            Image dictionary item
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.Drawel">
            <summary>
            The base class for all visible source tree drawels
            
            Notes:
                All attributes stored in XML (see C1PrintDocument spec) should be implicitly
                convertible to and from strings which are their xml representation,
                and should have constructors accepting string argument.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelBase">
            <summary>
            The base class for all source tree drawels.
            Encapsulates the tree structure and the layout functionality
            of all drawels, and also provides some contants used throughout
            the source tree. All else (fonts, colors etc.) are in the (also 
            abstract, but less so) Drawel class, which inherits from this.
            
            Notes:
                All attributes stored in XML (see C1PrintDocument spec) should be implicitly
                convertible to and from strings which are their xml representation,
                and should have constructors accepting string argument.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1TreeNode">
            <summary>
            Class implementing a tree node. To use, base your tree node class on this.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1TreeNode.MakeIndexPath">
            <summary>
            Makes a string which is a comma-separated list of indexes in Children,
            leading from the root to this node.
            </summary>
            <returns>The string of indexes</returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1TreeNode.FindByIndexPath(C1.C1PrintDocument.C1TreeNode,System.String)">
            <summary>
            Returns the node in the tree with the specified index path (see MakeIndexPath())
            </summary>
            <param name="root">The tree root</param>
            <param name="indexPath">The index path</param>
            <returns>The target node</returns>
        </member>
        <member name="P:C1.C1PrintDocument.C1TreeNode.All">
            <summary>
            Creates and returns the collection of all nodes of the subtree.
            Use discretion when calling on large trees.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1TreeNode.TraverseIterator">
            <summary>
            Tree traverse iterator - goes over a sub-tree, for each node does:
            1 enter node procedure
            2 main node procedure
            3 --repeat for each child--
            4 exit node procedure
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1TreeNode.NodeProcParams">
            <summary>
            Prototype for node processing methods.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.C1TreeNode.NodeProcParams.EnterProc">
            <summary>
            Method invoked before node processing begins
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.C1TreeNode.NodeProcParams.MainProc">
            <summary>
            Method for processing the node itself
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.C1TreeNode.NodeProcParams.ExitProc">
            <summary>
            Method invoked after the node and its subtree have been processed
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.IDrawelBase">
            <summary>
            Summary description for IDrawel.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelBase._sides">
            <summary>
            used to cache the aggregated widths of spacing+border+padding.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelBase._isSelfResolved">
            <summary>
            This flag holds the info whether the drawel itself (w/out regards to
            children) has been fully resolved. The place to set this flag is in
            the SetSelfResolved() method only. The default implementation handles
            only drawels which are always printed just once (e.g. non-resizable
            graphics), or depend on their children, such as areas.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.Copy">
            <summary>
            Creates a deep copy of the drawel, including a copy of its subtree.
            </summary>
            <returns>The new drawel</returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.ResetGenerationInfo">
            <summary>
            Resets non-persistent data created during generation.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.#ctor">
            <summary>
            The drawel
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.GetAutoX(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            The 2 GetAutoX/Y methods encapsulate the stacking mechanism.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.ResolveLength(C1.C1PrintDocument.DocEngine.Src.PageInfo,C1.C1PrintDocument.DocEngine.Src.DrawelBase.LengthTypeEnum)">
            <summary>
            This method calculates the actual position and size of the drawel.
            After calculating the requested measurement it assigns it to the
            "resolved" cache. Lengths are set in Lpix.
            </summary>
            <param name="lt">The specific measurement (x, y, width or height) to resolve.</param>
            <returns>Resolved Lpix value</returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.ResetResolvedOnPage(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            Resets resolved info of the drawel and its subtree for the specified and all subsequent pages.
            </summary>
            <param name="pi">PageInfo</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.CalcAbsX(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            Calculates the absolute X coordinate of the drawel on page.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.CalcAbsY(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            Calculates the absolute Y coordinate of the drawel on page.
            (a duplicate of CalcAbsX, separate for speed only).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.SplitOrResize(C1.C1PrintDocument.DocEngine.Src.PageInfo,System.Single,System.Single)">
            <summary>
            This virtual method gives the drawel a chance to split or resize
            to fit in the space available on the current page.
            </summary>
            <param name="pageId">The current page id</param>
            <param name="maxW">Width available, in Lpix</param>
            <param name="maxH">Height available, in Lpix</param>
            <returns>True if the drawel was able to resize itself, false otherwise</returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.SetSelfResolved(System.Int32)">
            <summary>
            This method should be implemented by terminal drawels (text, images, etc.)
            It should check whether the drawel has any unprinted data yet, and if not
            raise the _isFullyResolved flag.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.PrepareForRepeat(C1.C1PrintDocument.DocEngine.Src.PageInfo)">
            <summary>
            Invoked by the generator when a drawel needs to be repeated
            (generator provides tree traversal; this should care only about self).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.OffsetResolvedSubtree(C1.C1PrintDocument.DocEngine.Src.PageInfo,System.Single,System.Single)">
            <summary>
            Offsets the absolute positions of the resolved drawel's subtree on the specified page.
            </summary>
            <param name="pi">Page info</param>
            <param name="offX">X offset</param>
            <param name="offY">Y offset</param>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelBase.EnumerateChildren(C1.C1PrintDocument.DocEngine.Src.EnumerateChildrenProc,System.Object)">
            <summary>
            This procedure works like TraverseSubTree procedure but it can be breaked.
            Also it enumerate drawels within PageHeader and PageFooter.
            </summary>
            <param name="childProc">Procedure which will be executed for each child drawel.</param>
            <param name="param">Parameter of procedure.</param>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelBase.ResolveComplete">
            <summary>
            This is runtime-only property used by the generator
            to mark drawels that were resolved. Patchy.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelBase.IsFullyResolved">
            <summary>
            Checks whether this drawel has been fully resolved (i.e. does not
            need to be printed on subsequent pages).
            </summary>
            <returns>True if the drawel has been fully resolved</returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelBase.IsSelfResolved">
            <summary>
            If this property returns true, this means that the drawel itself does
            not need to be printed anymore (but its children may require that).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.IDrawel">
            <summary>
            Summary description for IDrawel.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.Drawel.OutlineInfo">
            <summary>
            Outline info for creating an outline entry pointing to this drawel
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.Drawel.UserData">
            <summary>
            Arbitrary user data (must be serializable if storage is required)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.Drawel.DocMetaInfo">
            <summary>
            C1Doc meta info
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelArea.Dictionary">
            <summary>
            Sets or returns the dictionary associated with the drawel.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelArea.PageHeader">
            <summary>
            Gets or sets drawel (possibly a tree) specifying the new page header.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelArea.PageFooter">
            <summary>
            Gets or sets drawel (possibly a tree) specifying the new page footer.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.ResolvedInfo">
            <summary>
            Helper class describing drawel placement on a specific page
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelImage.ImageAlign">
            <summary>
            Gets or sets alignment of the image
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IInputInfoOwner">
            <summary>
            This interface must be implemented by any class using (hosting) the 
            InputInfoBase. In the current version of C1Preview this interface is 
            implemented by the DrawelInput and RenderInputBase classes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IInputInfoOwner.OnGetValue(C1.C1PrintDocument.InputInfoBase,System.Object@)">
            <summary>
            Is called when the value of Value property is requested.
            </summary>
            <param name="sender">The InputInfoBase object which is calling the method.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IInputInfoOwner.OnSetValue(C1.C1PrintDocument.InputInfoBase,System.Object@)">
            <summary>
            Is called when the value of Value property is assigned.
            </summary>
            <param name="sender">The InputInfoBase object which is calling the method.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IInputInfoOwner.BeforeChangeProperty(C1.C1PrintDocument.InputInfoBase,System.String,System.Object,System.Object)">
            <summary>
            Called before changing a property of the InputInfoBase object.
            </summary>
            <param name="sender">The InputInfoBase object.</param>
            <param name="propertyName">Name of changed property.</param>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IInputInfoOwner.AfterChangeProperty(C1.C1PrintDocument.InputInfoBase,System.String,System.Object,System.Object)">
            <summary>
            Called after changing of a property of the InputInfoBase class.
            </summary>
            <param name="sender">The InputInfoBase object.</param>
            <param name="propertyName">Name of changed property.</param>
            <param name="oldValue">Old property value.</param>
            <param name="newValue">New property value.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IInputInfoOwner.AfterChangeCollectionProperty(C1.C1PrintDocument.InputInfoBase,System.String,System.Object,System.Object,C1.C1PrintDocument.CollectionChangedEventArgs)">
            <summary>
            Called after changing an item in a collection.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IInputInfoOwner.Font">
            <summary>
            Gets the font to be used by the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IInputInfoOwner.BackColor">
            <summary>
            Gets the background color to be used by the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IInputInfoOwner.ForeColor">
            <summary>
            Gets the foreground (text) color to be used by the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelInput.Focused">
            <summary>
            Returns the true if this drawel has the input focus on C1PrintPreview.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.ITextRangeFormat">
            <summary>
            Describes the format of text range in C1Text.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.ITextRangeFormat.Length">
            <summary>
            Length of text range in chars.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.ITextRangeFormat.ForeColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.ITextRangeFormat.BackColor">
            <summary>
            Background color (fill color).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.ITextRangeFormat.Font">
            <summary>
            Font of text.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.ITextRangeFormat.TextPosition">
            <summary>
            Position of text: SuperScript, SubScript, Normal
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.TextRange.AssignFrom(C1.C1PrintDocument.DocEngine.Src.TextRange)">
            <summary>
            Copies a content of another TextRange object.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.ITextRangeFormats">
            <summary>
            Describes the list of text formats.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.IC1TextOwner">
            <summary>
            This interface must be implemented by any class using (hosting) the C1Text
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.IC1TextOwner.Text">
            <summary>
            Specifies the text to render or drawing.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.IC1TextOwner.WordWrap">
            <summary>
            Indicates whether a object automatically wraps words to the beginning of the 
            next line when necessary.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup._lastPageNo">
            <summary>
            Specifies the value of PageNo tag for which the text of ranges is currently parsed.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup._lastTotalPages">
            <summary>
            Specifies the value of TotalPages tag for which the text of ranges is currently parsed.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup._lastSize">
            <summary>
            Specifies the last TextSize with that the text was parsed last time.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup._textBox">
            <summary>
            With using of this object all text measuring operations will be performed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup._pureText" -->
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.UpdateTextBox(System.Int64,System.Int32,System.Int32,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Updates a _textBox object.
            </summary>
            <param name="pageId"></param>
            <param name="pageNo"></param>
            <param name="totalPages"></param>
            <param name="size"></param>
            <param name="split"></param>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.s_space">
            <summary>
            Used in ParseText function.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.ParseText(System.String)">
            <summary>
            Only for backward compatiblity.
            Parses the source text (text parameter) and creates pure text (without tags) and list of attributes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.MakeStyleDesc(C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.StyleDesc.Attrs,C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.TagEnum,System.String)">
            <summary>
            Only for backward compatibility, used from ParseText.
            Creates an open style descriptor; the only thing missing in it is the end position.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.ModifyFont(C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.StyleDesc.Attrs,C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.TagEnum,System.String)">
            <summary>
            Only for backward compatibility, used from ParseText.
            Returns new attributes; if nothing has changed, returns null.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.QuoteValues(System.String)">
            <summary>
            Only for backward compatibility.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.ColorFromString(System.String)">
            <summary>
            Only for backward compatibility.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.TagFromTagStr(System.String)">
            <summary>
            Only for backward compatibility.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.s_xdoc">
            <summary>
            Used from FilterText function
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.FilterText(System.String)">
            <summary>
            Only for backward compatibility.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.t">
            <summary>
            This property is used only for backward compatibility - to read old Text property of DrawelMarkup.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelMarkup.TagEnum">
            <summary>
            Describes the set of supported tags.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting">
            <summary>
            Abstract base drawel for drawels which can change
            the current page settings and/or page headers and footers.
            (Currently DrawelRoot and DrawelNewPage).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.GetPageSizeDrawel(System.Drawing.Printing.PageSettings@)">
            <summary>
            Returns a drawel with position and size equal to page bounds,
            and page settings corresponding to that drawel.
            </summary>
            <param name="pageSettings">Output - page settings</param>
            <returns>Drawel with position and size equal to page bounds</returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.PageSettings">
            <summary>
            Sets or returns page settings specified by this drawel.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.PageNoBase">
            <summary>
            Gets or sets page number base. Value of UnchangedPageNoBase means do not change page numbers.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.HasPageSettings">
            <summary>
            True if this drawel specifies page settings
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.PageSettingsDrawel">
            <summary>
            Drawel encapsulating page settings. Cannot be part of the source tree,
            only the value of another (real) drawel's DrawelPage property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelPageSetting.PageSettingsDrawel.PageSettings">
            <summary>
            Sets or returns page settings
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelNewPage">
            <summary>
            Drawel providing a page break (and possibly new page settings)
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelRoot.ResetResolved">
            <summary>
            Resets any non-persistent data created while resolving the source tree.
            Should be called if the tree or page settings have changed.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelRoot.Reflowable">
            <summary>
            Sets or returns whether the current document can be
            reflowed to adapt to different page size and/or orientation.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelRoot.PageHeader">
            <summary>
            Gets or sets drawel (possibly a tree) specifying the new page header.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.DrawelRoot.PageFooter">
            <summary>
            Gets or sets drawel (possibly a tree) specifying the new page footer.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelShape">
            <summary>
            Abstract base for all shape drawels.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelPolygon">
            <summary>
            A simple (probably filled) polygon
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.FigureTypeEnum">
            <summary>
            Enumerates separate figures which may be added to a DrawelPath.
            Open and closed figures do not have separate items; rather, each figure
            may be explicitly closed.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.Figures">
            <summary>
            Figure collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.GraphPaths">
            <summary>
            GraphPath collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.DrawelGraphPathSet">
            <summary>
            A graphical path (set of figures)
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocEngine.Src.DrawelText.FetchText(System.Int64)">
            <summary>
            This method returns the portion of text for the specified page to the caller.
            </summary>
            <param name="pageId">Page id</param>
            <returns>Text for the requested page</returns>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.PageInfo">
            <summary>
            Holds generation data for one page
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.PageInfo.PageId">
            <summary>
            Gets the unique (inside the document rendering) page id.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocEngine.Src.PageInfo.CurrPagePart">
            <summary>
            Sets/returns the page part currently being generated (body, header or footer).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.TypeConverterBase">
            <summary>
            Base for a simple type converter to/from strings
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.Border">
            <summary>
            Border is a basic border object, used by StyleContext for rendering
            and measuring elements.
            It provides a solid border with a single color and arbitrary widths 
            on each side.
            Border is designed to be extended so you can easily implement
            3-D effects, compound borders, etc.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderEmpty">
            <summary>
            BorderEmpty is just empty space.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderCompound">
            <summary>
            BorderCompound combines two borders. These may in turn be compound,
            so we get a lot of flexibility (got this idea from Java).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderRaised">
            <summary>
            BorderRaised draws a 1-pixel wide raised border.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderInset">
            <summary>
            BorderInset draws a 1-pixel wide inset border.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderGroove">
            <summary>
            BorderGroove draws a 2-pixel wide groove border.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.BorderFillet">
            <summary>
            BorderFillet draws a 2-pixel wide fillet border.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElementInternal.SetParent(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            Set a new parent for this element.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElementInternal.NotifyParentDefaultUnitChanged(System.Object,System.EventArgs)">
            <summary>
            Being called when parent's DefaultUnit property changed
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElementInternal.NotifyParentDefaultUnitOfFramesChanged(System.Object,System.EventArgs)">
            <summary>
            Being called when parent's DefaultUnitOfFrames property changed
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IDocumentElementInternal.NotifyParentPhysicalSizeChanged(System.Object,System.EventArgs)">
            <summary>
            Being called when PhysicalSizeChanged event was raised in a parent
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.UpdateEventArgs.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isBeginning">
            See IsBeginning property
            </param>
        </member>
        <member name="P:C1.C1PrintDocument.UpdateEventArgs.IsBeginning">
            <summary>
            True - BeginUpdate, False - EndUpdate
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IPropertyChangeNotifier">
            <summary>
            Adds to the IPropertyChange interface the ability to notify about 
            PropertyChange event via direct method call of listener object.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IPropertyChange">
            <summary>
            Defines an object that is capable to notify about its properties changes.
            All classes of C1PrintDocument that performs such notifications support it
            via this interface.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IPropertyChangeNotifier.PropertyChangeListener">
            <summary>
            An object that needs to receive notification about PropertyChange
            event.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ICopyAssignable">
            <summary>
            Defines an object that is capable to perform copy-assignment from
            another object.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IPropertyChangeListener">
            <summary>
            Describes an object that needs to listen PropertyChange event of
            another object via direct method call (instead of subscription to event).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.#ctor(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            parentElement must be of type C1PrintDocument or DocumentElement
            </summary>
            <param name="parentDocument"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.AssignFrom(System.Object,System.Boolean)">
            <summary>
            Copy object properties from other object.
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance">
            If true then styles in ChildrenStyles collection will be copied
            with keeeping of their properties' inheritance state.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.BeginUpdateInternal">
            <summary>
            Starts an "update mode", in which auto-lengths are not calculated
            even if property that influence auto-length are changing.
            Must be "closed" by EndUpdateInternal() call.
            BeginUpdateInternal/EndUpdateInternal are reference-counting,
            so nested calls are allowable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.EndUpdateInternal">
            <summary>
            Finishes "update mode" and causes auto-lengths' recalculation,
            but only in a case if some property that influence auto-length
            was changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.OnPhysicalSizeChanged">
            <summary>
            Raises PhysicalSizeChanged event
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.ParentPhysicalSizeChangedEH(System.Object,System.EventArgs)">
            <summary>
            Subscribes to the PhysicalSizeChanged event of parent element.
            Generates PhysicalSizeChanged event of this element when its width or height
            is expressed in percents and their physical length was really changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.ContentSizeChanged">
            <summary>
            This method is being called (by OnPropertyChangeInternal method) 
            to notify that size of the content area was changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GetFrameWidthMm">
            <summary>
            Returns a length of a horizontal part of a frame (spacing+borders+padding)
            in millimeters. Returns an *actual* width, which can differ for some 
            elements from spacing+borders+padding calculated by style values.
            Actually calculated by the CalcFrameWidthMm method.
            All internal methods use this method to get a frame width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GetFrameHeightMm">
            <summary>
            An analogue of GetFrameWidthMm, but for vertical lenght of the frame.
            Actually calculated by the CalcFrameHeightMm method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.CalcFrameWidthMm">
            <summary>
            Calculates an actual length of a horizontal part of a frame,
            which is retrieved by means of GetFrameWidthMm method.
            Being called automatically when frame length is changing.
            Must be overridden for elements whose frame width is determined
            in other way then the standard one spacing+borders+padding from
            style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.CalcFrameHeightMm">
            <summary>
            Analogue of CalcFrameWidthMm for vertical part of frame.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.CreateStyles(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            Creates style collection of an element. Being called from the constructor.
            parentElement identify a parent element for this one.
            </summary>
            <param name="parentElement"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GetNearestRootParent">
            <summary>
            TODODOC
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.DetachFromMasters">
            <summary>
            Stops a listening of parent's events
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.Generate(System.Double,System.Double@,C1.C1PrintDocument.DocEngine.Src.Drawel@,C1.C1PrintDocument.DocEngine.Src.Drawel)">
            <summary>
            Performs generation of a drawel. Being called by rendering subsystem
            do get drawel representation of a next portion of element's image.
            In its turn calls GenerateCommonItems and GenerateContent methods.
            </summary>
            <param name="availableHeightMm">
            Maximum available height of generated drawel in mm, including frames.
            </param>
            <param name="generatedHeightMm">
            Returns actual height of generated drawel in mm, including frames.
            </param>
            <param name="content">
            Returns the generated drawel.
            </param>
            <param name="parentDrawel">
            Drawel that will be a parent of generated drawel, returned in the content parameter.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GenerateCommonItems(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocEngine.Src.Drawel)">
            <summary>
            Initializes general items (frames, background, etc.) of a drawel. 
            </summary>
            <param name="content">
            A drawel that must be initialized.
            </param>
            <param name="parentDrawel">
            Drawel that will be a parent of content drawel 
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GenerateContent(System.Double,System.Double@,C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocEngine.Src.Drawel,System.Boolean@)">
            <summary>
            Performs generation of RO's content, filling out the content-related
            properties of passed drawel.
            This method must be overridden in derived ROs to perform actual generation.
            NOTES TO INHERITOR:
            - haven't got to init Width and Height of content drawel
            - mustn't change GenerationState, but can use it for its purposes
            - must return only actual necessary space to fit initialized content 
            in the generatedHeightMm parameter
            </summary>
            <param name="availableHeightMm">
            Maximum available height of drawel content (frames are not included here)
            in mm.
            </param>
            <param name="generatedHeightMm">
            Returns actual height of generated content needed to fit this content.
            </param>
            <param name="content">
            The drawel whose conten-related properties must be initialized.
            </param>
            <param name="parentDrawel">
            Drawel that will be a parent of content drawel.
            </param>
            <param name="Finished">
            Returns an indication of whether the generation of whole content was finished
            or there is a data that must be generated in the next step.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.ResetGenerationState">
            <summary>
            Makes GenerationState to be NotStarted.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.SetGenerationState(C1.C1PrintDocument.ContentGenerationStateEnum)">
            <summary>
            Changes GenerationState.
            </summary>
            <param name="newState"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.GenerationStateChanged">
            <summary>
            Being called just after GenerationState of element was changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElement.DoesFitMm(System.Double,System.Double)">
            <summary>
            Returns true if testLengthMm doesn't exceed availableLengthMm or
            exceeds it not more than a small error.
            </summary>
            <param name="availableLengthMm"></param>
            <param name="testLengthMm"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.Document">
            <summary>
            The document for which element was created.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.Width">
            <summary>
            Returns width of an element in default units. See WidthUnit
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.WidthStr">
            <summary>
            Returns width of an element as a string, e.g. "5mm". See WidthUnit
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.WidthUnit">
            <summary>
            Returns a width of an element as a Unit object. Width includes content
            and frame (spacing/borders/padding).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.Height">
            <summary>
            Returns height of an element in default units. See HeightUnit
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.HeightStr">
            <summary>
            Returns height of an element as a string, e.g. "5mm". See HeightUnit
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.HeightUnit">
            <summary>
            Returns a height of an element as a Unit object. Width includes content
            and frame (spacing/borders/padding).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.SizeInfo">
            <summary>
            Wrap a bunch of properties which are marked as non-browsable for a user.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.ActualFrameWidth">
            EXPLANATION: Actual_XXX_length property bunch.
            A common model of a width/height of an element is represented by
            the formula (e.g. for width):
            width = frame width + content width;
            frame width = spacing + padding + borders
            But there are some exceptions concerning frame width, e.g. TableCell
            whose spacing and border widths are treated as zeros, so an attempt
            to calculate frame width using values from Style can give wrong result.
            So the safe way to get valid frame and content width is to use 
            Actual_XXX_length properties.
            
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.StyleNestedProtected">
            <summary>
            This is a protected implementation of "nested style" property,
            e.g. StyleNested for RunningTitle, StyleTableCell for table elements.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.InUpdate">
            <summary>
            Indicates whether element is in "update mode" (between 
            BeginUpdateInternal/EndUpdateInternal calls pair).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.UpdateCounter">
            <summary>
            BeginUpdateInternal/EndUpdateInternal reference counter,
            incremented by BeginUpdateInternal, decremented by EndUpdateInternal.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.DocumentElement.PhysicalSizeChanged">
            <summary>
            IDocumentElement item inplementator
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.PendingInvalidateAutoSize">
            <summary>
            This flag is set to true by InvalidateAutoSize method when element is
            in update mode (i.e. between BeginUpdateInternal and EndUpdateInternal
            calls), insted of to perform auto-size recalculation.
            Farther, when EndUpdateInternal is being called when update counter
            becomes 0, and if PendingInvalidateAutoSize is true, it in turn
            calls InvalidateAutoSize method to force recalculation of an auto-size.
            Such a mechanism allows to prevent time-consuming recalculations
            while element is in update mode and to force recalculation on exit from
            this mode, but only in a case when it's really needed.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.GenerationState">
            <summary>
            Keeps current generation state of an element.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.ScreenDpiX">
            <summary>
            Horz. resolution of a screen device
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElement.ScreenDpiY">
            <summary>
            Vert. resolution of a screen device
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentElement.ElementListenerBase">
            <summary>
            The base class for ElementListenerWidth and ElementListenerHeight
            classes.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IUnitEventListener">
            <summary>
            Extends IPropertyChangeListener to gives an ability to listen specific 
            events of the Unit type.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentElement.ElementListenerWidth">
            <summary>
            Auxiliary class used by DocumentElement objects to listen property 
            changes in the Width property.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentElement.ElementListenerHeight">
            Auxiliary class used by DocumentElement objects to listen property 
            changes in the Height property.
        </member>
        <member name="T:C1.C1PrintDocument.GeneralCollection">
            ///////////////////////////////////////////////////////
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Add(System.Object)">
            <summary>
            Adds a new item in the end of the collection containing a specified object.
            Returns an index of the inserted item.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Add">
            <summary>
            Adds a new item in the end of the collection. If AggregateItems is true 
            the new item will contain a new object created by the CreateNewItem method,
            in other case item will contain null.
            Returns an index of the inserted item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.AddSome(System.Int32)">
            <summary>
            Perform Add method the specified number of times.
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert a new item in the collection at a specified index containing a 
            specified object.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Insert(System.Int32)">
            <summary>
            The same as Add() but add an item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Remove(System.Object)">
            <summary>
            Removes an item containing a specified object (if exists) from the 
            collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item with specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Clear">
            <summary>
            Clear the collection. If DetailedClear configuration property is true
            then make it by calling RemoveAt for each item, in other case performs
            quick clearing.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.Contains(System.Object)">
            <summary>
            Returns true if collection contains a specified object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.IndexOf(System.Object)">
            <summary>
            Returns an index of an item containing the specified value, or
            -1 if it doesn't contain this value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.GeneralCollection.AssignFrom(System.Object)">
            <summary>
            ICopyAssignable imolementation
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:C1.C1PrintDocument.GeneralCollection.Count">
            <summary>
            Returns a number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.GeneralCollection.Item(System.Int32)">
            <summary>
            Returns an object at specified index.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocElementSizeInfo">
            <summary>
            This class is used as a result value of DocumentElement.SizeInfo class
            and is actually just a wrapper fro a bunch of DocumentElement's properties
            which are marked as non-editor-browsable.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.CollectionItem.Collection">
            <summary>
            Collection which belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.CollectionItem.Index">
            <summary>
            Index of an item in a collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.MeasureInfo">
            <summary>
            Keeps measurement results of a single rendering action. 
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.MeasureInfo.AddRenderedAreaMm(System.Drawing.RectangleF)">
            <summary>
            Creates new UnitRectangle in the RenderedAreasArray with specified
            coordinates values expressed in mm. The actual unit type of the created
            rectangle is the same like at Document.
            Returns reference to the created rectangle.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.Width">
            <summary>
            Width of a rendered area in default document's units
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.WidthUnit">
            <summary>
            Width of a rendered area
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.Height">
            <summary>
            Height of a rendered area in default document's units
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.HeightUnit">
            <summary>
            Height of a rendered area 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.RenderedArea">
            <summary>
            Returns the latest area on the latest page occupied by the drawing. 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.RenderedAreas">
            <summary>
            Returns all areas on the latest page occupied by the drawing.
            Areas are sorted in order of appearence on a page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.NewPage">
            <summary>
            Indicates whether new page started as a result of rendering
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.MeasureInfo.NewColumn">
            <summary>
            Indicates whether new column started as a result of rendering
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PrintingContextDocument">
            <summary>
            Keeps an info containing current state of a document generation process
            (all what happens between StartDoc and EndDoc calls).
            Being used by C1PrintDocument's generation process.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DrawelRoot">
            <summary>
            Root drawel of a source tree.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DrawelPage">
            <summary>
            A drawel that represents current generating page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DrawelBody">
            <summary>
            A drawel that represents a body of a current generating page.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DrawelColumn">
            <summary>
            A drawel that represents a currently generating column.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DrawelLastStacked">
            <summary>
            The last drawel of the block flow.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.StackedHeightMm">
            <summary>
            A height in mm of current block flow part (briefly speaking of a current 
            column).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.StackedAvailableHeightMm">
            <summary>
            An available height in mm of in a current block flow part 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.CurPageNumber">
            <summary>
            Number of current page
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.CurColumnNumber">
            <summary>
            Number of current column
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.BlockGraphicsCurrent">
            <summary>
            A RenderGraphics object representing a Graphics opened by 
            C1PrintDocument.RenderBlockGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DirectGraphicsCurrent">
            <summary>
            A RenderGraphics object representing a Graphics opened by 
            C1PrintDocument.RenderDirectGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DirectGraphicsCurrentX">
            <summary>
            X coordinate passed to  
            C1PrintDocument.RenderDirectGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.DirectGraphicsCurrentY">
            <summary>
            Y coordinate passed to  
            C1PrintDocument.RenderDirectGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PrintingContextDocument.CurColumnRenderingAreaMm">
            <summary>
            An area occupied by current column, relative to body
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UnitGetComparativeLengthEventArgs">
            <summary>
            Defines an event argument for the UnitGetComparativeLengthEventHandler
            delegate.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitGetComparativeLengthEventArgs.Length">
            <summary>
            Length is being passed back via this property.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UnitGetBaseFontEventArgs">
            <summary>
            Event argument for the UnitGetBaseFontEventHandler delegate.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitGetBaseFontEventArgs.Font">
            <summary>
            Font is being passed back via this property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:C1.C1PrintDocument.IPropertyInheritable" -->
        <member name="P:C1.C1PrintDocument.IPropertyInheritable.InheritedFrom">
            <summary>
            Specify an object from which this object is inherited.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IPropertyInheritable.IsInherited">
            <summary>
            Indicates whether this object is in inherited mode (i.e. all
            its properties has values of InheritedFrom object)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IPropertyInheritable.InheritableOwner">
            <summary>
            For nested IPropertyInheritable objects specify their container
            IPropertyInheritable object. E.g. Left/Top/etc Unit objects of
            the UnitRectangle class has UnitRectangle as InheritableOwner.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PropertyInheritableImpl">
            <summary>
            Base implementation of the IPropertyInheritable interface.
            
            Every class must do:
            - turn off PropertyChange (or like) events in IsUninheritance() == true state
            - tune properties' set/get
            Class with IPropertyInheritable children must do:
            - set InheritableOwner of children to this
            - override Assign to take into account IsUninheritance() == true state
            - override BecameInherited() to propagate IsInherited state
            - override InheritedFromChanged() to init children's parents
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PropertyInheritableImpl.InheritedFromChanged">
            <summary>
            Being called when InheritedFrom property has been changed.
            Override it to propagate InheritedFrom to children.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PropertyInheritableImpl.BecameInherited">
            <summary>
            Being called when IsInherited property has been changed from false to true.
            Override it to set childrens as inherited
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PropertyInheritableImpl.BeginUninheritance">
            <summary>
            Being called when IsInherited property is about to be changed from
            true to false.
            Block PropertyChange event and switch assignment to the special mode.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PropertyInheritableImpl.EndUninheritance">
            Being called just after IsInherited property was changed from true to false.
        </member>
        <member name="M:C1.C1PrintDocument.PropertyInheritableImpl.IsUninheritance">
            <summary>
            True if between BeginUninheritance/EndUninheritance calls.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.PropertyInheritableImpl.IsInherited">
            <summary>
            When being changed from true to false set InheritableOwner's (if defined)
            IsInherited to false too.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UnitBase">
            <summary>
            Defines "something" with unit of measurement.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.Clone">
            <summary>
            ICloneble support
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.UnitFromName(System.String)">
            <summary>
            Returns unit as an UnitTypeEnum member by its string name.
            </summary>
            <param name="unitName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.NameFromUnit(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Returns string name for a specified unit.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.OnPropertyChange(C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Triggers the PropertyChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.UnitDPIAbsolute(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Returns a resolution (dpi) of an absolute unit.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.NameToUnit(System.String)">
            <summary>
            Returns unit representation as a UnitTypeEnum member by its string name,
            or null if there is no such a unit.
            </summary>
            <param name="unitName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.UnitToName(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Returns string name of a specified unit, or empty string if there is no
            such a unit.
            </summary>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.GetTypeAsLengthUnit(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Converts from UnitTypeEnum to LengthUnit type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.GetTypeAsLengthUnit">
            <summary>
            Converts Type property to LengthUnit type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.SetTypeSilently(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Establish new type without triggering events and changing of the
            DefaultType property
            </summary>
            <param name="newType"></param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitBase.IsSilentTypeUpdate">
            <summary>
            True if in silent type update (see SetTypeSilently)
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.UnitBase.EventListener">
            <summary>
            Allows to attach IUnitEventListener object.
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.UnitBase.PropertyChange">
            <summary>
            Triggered when any public property was changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.SetValueInternal(System.Double,System.Double,System.Boolean)">
            <summary>
            Sets the Value property and _valueMm field (if necessary). The latter
            keeps Value in mm to gain speed of reading value in mm by internal code.
            </summary>
            <param name="newValue"></param>
            The value of Value property.
            <param name="newValueMm"></param>
            The same value but represented in mm. Has a sence only when 
            the both newValueMmValid parameter is true and _isValueMmValid
            field is true.
            _isValueMmValid is being set to false when Type is not an absolute.
            <param name="newValueMmValid"></param>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.TypeJustChanged(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Converts the Value property value to a new type.
            </summary>
            <param name="oldValue"></param>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.ParseUnitValue(System.String,System.Double@,C1.C1PrintDocument.UnitTypeEnum@)">
            <summary>
            Parse the unitValue string and returns unit and value containing 
            in the string. Raises an exception in case of invalid string content.
            </summary>
            <param name="unitValue"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.AssignFromObject(System.Object)">
            <summary>
            Assign from different kinds of sources: Unit, string (e.g. "1.5cm")
            or double (in default units).
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.GetAsLengthValue">
            <summary>
            Converts to the LengthInUnits type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.GetAsRelativeLength">
            <summary>
            Converts to the RelativeLength type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.GetAsRelativeLength(C1.C1PrintDocument.DocEngine.Src.DrawelBase,C1.C1PrintDocument.DocEngine.Src.Names.RefDim)">
            <summary>
            Converts to the RelativeLength type. If Type is Percentage
            then returning value defines a length relative to dimension 
            percentOfRefdim of a drawel percentOfDrawel.
            </summary>
            <param name="percentOfDrawel"></param>
            <param name="percentOfRefdim"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Unit.LengthsEqual(System.Double,System.Double)">
            <summary>
            Compare two values slight possible error.
            </summary>
            <param name="d1"></param>
            <param name="d2"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.Unit.Value">
            Gets/sets the value of length in supposition that the unit of measurement of this length is specified in the Unit property.
        </member>
        <member name="P:C1.C1PrintDocument.Unit.UnitValue">
            <summary>
            Represents a Value and Type properties as a single string, e.g. "5mm"
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSetBase.AssignFrom(System.Object)">
            <summary>
            Performs copy assignment from another UnitSetBase object.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSetBase.BecameInherited">
            <summary>
            Overridden to make nested units inherited.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSetBase.InheritedFromChanged">
            <summary>
            Changes ancestor units for nested units.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSetBase.TypeJustChanged(C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Changes Type of nested units to be the same as at this object.
            </summary>
            <param name="oldValue"></param>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSetBase.All">
            <summary>
            Set all contained units to a specified value.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSetFour.GetAsDrawelWidths">
            <summary>
            Converts to the Widths type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPoint.GetPropertyNameOfUnit(System.Int32)">
            <summary>
            Returns string name of a property with a specified index,
            that name which is used as property name in the PropertyChange
            event.
            </summary>
            <param name="unitIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPoint.AssignFromObject(System.Object)">
            <summary>
            Performs an assigment from different types of objects.
            The possible types of source value are UnitPoint, Point and
            PointF.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.X">
            <summary>
            X coordinate in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.XStr">
            <summary>
            X coordinate in Type unit as string
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.XUnit">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.Y">
            <summary>
            Y coordinate in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.YStr">
            <summary>
            Y coordinate in Type unit as string
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPoint.YUnit">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitSize.GetPropertyNameOfUnit(System.Int32)">
            <summary>
            Returns string name of a property with a specified index,
            that name which is used as property name in the PropertyChange
            event.
            </summary>
            <param name="unitIndex"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.Width">
            <summary>
            Width in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.WidthStr">
            <summary>
            String representation of width 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.WidthUnit">
            <summary>
            Width
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.Height">
            <summary>
            Height in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.HeightStr">
            <summary>
            String representation of height 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitSize.HeightUnit">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitRectangle.GetPropertyNameOfUnit(System.Int32)">
            <summary>
            Returns string name of a property with a specified index,
            that name which is used as property name in the PropertyChange
            event.
            </summary>
            <param name="unitIndex"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.Left">
            <summary>
            Left in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.LeftStr">
            <summary>
            String representation of left
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.LeftUnit">
            <summary>
            Left as Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.Top">
            <summary>
            Top in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.TopStr">
            <summary>
            String representation of top
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.TopUnit">
            <summary>
            Top as Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.Right">
            <summary>
            Right in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.RightStr">
            <summary>
            String representation of right
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.RightUnit">
            <summary>
            Right as Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.Bottom">
            <summary>
            Bottom in Type unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.BottomStr">
            <summary>
            String representation of bottom
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.UnitRectangle.BottomUnit">
            <summary>
            Bottom as Unit
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ImageAlignDef.GetAsC1DocSrc_ImageAlignment(C1.C1PrintDocument.ImageAlignHorzEnum)">
            <summary>
            Converts ImageAlignHor value to corresponding 
            C1.C1PrintDocument.Src.Names.ImageAlignment value.
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.ImageAlignDef.GetAsC1DocSrc_ImageAlignment(C1.C1PrintDocument.ImageAlignVertEnum)">
            <summary>
            Converts ImageAlignVert value to corresponding 
            C1.C1PrintDocument.Src.Names.ImageAlignment value.
            </summary>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.ImageAlignDef.AssignFrom(System.Object)">
            <summary>
            Performs copy assignment from another object.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.C1PrintDocument.ImageAlignDef.Clone">
            <summary>
            ICloneable implementation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.ImageAlignDef.OnPropertyChange(C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Raises PropertyChange event to subscribers and PropertyChangeListener
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.C1PrintDocument.ImageAlignDef.AlignHorz">
            <summary>
            Horizontal alignment of an image.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ImageAlignDef.AlignVert">
            <summary>
            Vertical alignment of an image.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ImageAlignDef.BestFit">
            <summary>
            This property is a composition (function) of the StretchHor, StretchVert and
            KeepAspectRatio properties.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PropertyChangeEventArgs">
            <summary>
            Defines argument for the PropertyChangeEventHandler delegate.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PropertyChangeEventArgs.StyleAttributeIndex">
            <summary>
            This propety is used internally by C1DocStyle class and contains
            one of the DocumentStyleContext.atXXX values, defining an index of
            style's attribute.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PropertyChangeEventHandler">
            <summary>
            Describes the type for PropertyChange event.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentEnumConverter">
            <summary>
            Just a namespace.
            Contains a set of helper methods used to generate drawel tree.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentEnumConverter.ChildToParentAlignHorz(C1.C1PrintDocument.AlignInParentHorzEnum)">
            <summary>
            Convert AlignInParentHorzEnum to C1.C1PrintDocument.Util.AlignHorzEnum .
            Note: raises an exception if childAlign is Default.
            </summary>
            <param name="childAlign"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.C1PrintDocument.DocumentEnumConverter.ChildToParentAlignVert(C1.C1PrintDocument.AlignInParentVertEnum)" -->
        <member name="T:C1.C1PrintDocument.DocToSrcConverter">
            <summary>
            Just a namespace.
            Contains a set of helper methods used to generate drawel tree.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.GetLayer(C1.C1PrintDocument.DocumentPageLayerEnum)">
            <summary>
            Returns an integer representation of DocumentPageLayerEnum member,
            which is used in drawel source tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.GetTextHorzAlign(C1.C1PrintDocument.AlignHorzEnum)">
            <summary>
            Converts AlignHorzEnum to Names.HorzTextAlignment.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.GetTextVertAlign(C1.C1PrintDocument.AlignVertEnum)">
            <summary>
            Converts AlignVertEnum to Names.VertTextAlignment.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.MakeDrawelSamePlaced(C1.C1PrintDocument.DocEngine.Src.DrawelBase,C1.C1PrintDocument.DocEngine.Src.DrawelBase)">
            <summary>
            Makes the lengths of dependentDrawel the same as at placeholderDrawel,
            establishing the relations of corresponding dimensions.
            </summary>
            <param name="placeholderDrawel"></param>
            <param name="dependentDrawel"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.AssignBorders(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocumentElement)">
            <summary>
            Creates borders in a drawel toDrawel corresponding to borders in
            a document element fromElement.
            </summary>
            <param name="toDrawel"></param>
            <param name="fromElement"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.AssignBorderLine(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.LineDef,C1.C1PrintDocument.SideEnum)">
            <summary>
            Creates a border side in a drawel "toDrawel" with properties corresponding to 
            line definition "line" at side specified in "side".
            </summary>
            <param name="toDrawel"></param>
            <param name="line"></param>
            <param name="side"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.AssignBackground(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocumentElement)">
            <summary>
            Creates a background in a drawel toDrawel corresponding to a background
            of document element fromElement.
            </summary>
            <param name="toDrawel"></param>
            <param name="fromElement"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.AssignInParentAlignHorz(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.AlignInParentHorzEnum,C1.C1PrintDocument.AlignHorzEnum)">
            <summary>
            Set childDrawel alignment in its parent parentDrawel.
            Justify is treated as left.
            </summary>
            <param name="childDrawel"></param>
            <param name="parentDrawel"></param>
            <param name="childInParentAlign"></param>
            <param name="parentChildrenAlign"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.AssignInParentAlignVert(C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.DocEngine.Src.Drawel,C1.C1PrintDocument.AlignInParentVertEnum,C1.C1PrintDocument.AlignVertEnum)">
            <summary>
            Set childDrawel alignment in its parent parentDrawel.
            Justify is treated as top.
            </summary>
            <param name="childDrawel"></param>
            <param name="parentDrawel"></param>
            <param name="childInParentAlign"></param>
            <param name="parentChildrenAlign"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.PropagatePageLayer(C1.C1PrintDocument.DocEngine.Src.Drawel,System.Int32)">
            <summary>
            Assign specified page layer to drawel drw and all its children.
            </summary>
            <param name="drw"></param>
            <param name="layer"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocToSrcConverter.PropagatePageLayerIncrement(C1.C1PrintDocument.DocEngine.Src.Drawel,System.Int32)">
            <summary>
            Increment page layer to the specified value to drawel drw and all its children.
            </summary>
            <param name="drw"></param>
            <param name="incValue"></param>
        </member>
        <member name="T:C1.C1PrintDocument.LineDef">
            <summary>
            Defines the line's rendering attributes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.LineDef.OnPropertyChange(C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Raises PropertyChange event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:C1.C1PrintDocument.LineDef.WidthPt">
            <summary>
            The width of the line expressed in points.
            NOTE: IPropertyChange's name is "Width"
            </summary>
            TODO: must be revised
        </member>
        <member name="P:C1.C1PrintDocument.LineDef.Color">
            <summary>
            The color of the line
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.LineDef.Empty">
            <summary>
            get - indicates whether line is empty.
            set - makes line empty.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.BordersDef">
            <summary>
            Defines the set of border's lines
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.GetEqualSideDef(System.Drawing.Color,System.Double)">
            <summary>
            Returns BordersDef object that has equal sides with specified width 
            and color.
            </summary>
            <param name="color"></param>
            <param name="widthPt"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.AssignFrom(System.Object)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.BecameInherited">
            <summary>
            Overridden to make all side lines inherited.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.InheritedFromChanged">
            <summary>
            Overridden to change side lines' inheritance ancestors.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.Clone">
            <summary>
            IClonable implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.OnPropertyChange(C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Triggers PropertyChange event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.GetSideIndex(C1.C1PrintDocument.SideEnum)">
            <summary>
            Returns integer representation of SideEnum member.
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.BordersDef.GetSidePropertyName(C1.C1PrintDocument.SideEnum)">
            <summary>
            Returns string name of a property corresponding to specified index,
            that one which is used in PropertyChange event as property name.
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.Item(C1.C1PrintDocument.SideEnum)">
            <summary>
            Provides access to border sides.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.Left">
            <summary>
            Left border line
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.Top">
            <summary>
            Top border line
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.Right">
            <summary>
            Right border line
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.Bottom">
            <summary>
            Bottom border line
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.All">
            <summary>
            Allows to set all border sides to a specified value.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.BordersDef.AllEmpty">
            <summary>
            get - indicates whether all sides are empty
            set - makes all sides empty
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ObjectListBase">
            <summary>
            Implements a list of objects with quick removement.
            It's used as a collection of child elements which needs to
            receive notifications about events in their parent element
            via direct method call instead of event handler.
            Examples of classes that hosts this collection are
            DocumentElement, C1PrintDocument and C1DocStyle.
            
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ObjectListBase.Add(System.Object)">
            <summary>
            Returns cookie than is used later in Remove. A client code that
            adds element into this list must store this cookie so as to pass it
            later as a parameter of the Remove method. This cookie identify this
            added object in the list and allows to remove it from the list quickly.
            Current implementation adds a new object to the end of the internal 
            ArrayList and returns its index as a cookie. The benefit of this approach
            is a speed, the drawback is that this ArrayList tends to grow.
            Another possible approach is to store list as a two-way linear list 
            and returns list element as a cookie, but it far less effective in a speed. 
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.ObjectListBase.Remove(System.Object)">
            <summary>
            Removes an object identified by a cookie from the list. See Add method
            for details.
            Just set corresponding element of internal ArrayList to null. If it
            detects that all elements of ArrayList became nulls after this removement
            then clears ArrayList to prevent infinite growth of the one.
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:C1.C1PrintDocument.ObjectListBase.GetEnumerator">
            <summary>
            Returns enumerator to iterate through the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.ObjectListBase.Count">
            <summary>
            Number of elements (including removed, nulls) in a list.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ObjectListBase.Item(System.Int32)">
            <summary>
            Index access to elements
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ObjectListBase.Enumerator">
            <summary>
            Defines an enumerator of the ObjectListBase class.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ObjectListBase.Enumerator.Current">
            <summary>
            NOTE: can be null (for removed elements), so client code must do
            appropriate checks.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElementWithRO.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElementWithRO.ContentSizeChanged">
            <summary>
            Adjust size of RenderObject when size of content area has changed.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentElementWithRO.ROPropertyChangeEH(System.Object,C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Event handler that subscribes to PropertyChange event of RenderObject
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElementWithRO.AutoWidth">
            <summary>
            AutoWidth is possible only when WidthManagement is AutoLength
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentElementWithRO.AutoHeight">
            <summary>
            AutoHeight is possible only when HeightManagement is AutoLength
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderObject.GetC1DocSrcImageAlign(System.Drawing.Image,C1.C1PrintDocument.ImageAlignDef,System.Double,System.Double)">
            <summary>
            Returns C1DImageAlign according to specified parameters
            </summary>
            <param name="image">
            Defines an aligning image
            </param>
            <param name="align">
            Defines an alignment options for an Image
            </param>
            <param name="boxWidthMm">
            Width of layout box of an Image
            </param>
            <param name="boxHeightMm">
            Height of layout box of an Image
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderObject.GetImageSizeMm(System.Drawing.Image)">
            <summary>
            Returns size of a specified image in mm, or {0, 0} if image is null.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.RenderObject.Style">
            <summary>
            The style of this objects
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderRichText">
            <summary>
            Represents RO that renders RTF text.
            The functionality is based on .Net Framework RichTextBox class,
            which in turn a wrapper of MS RichEdit 3.0 control.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderRichText.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderRichText.TwipsToMm(System.Int32)">
            <summary>
            Translates twips to mm.
            </summary>
            <param name="twipsValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderRichText.MmToTwips(System.Double)">
            <summary>
            Translates mm to twips.
            </summary>
            <param name="mmValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderRichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the rtf text from the file.
            </summary>
            <param name="fileName">The source file.</param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderRichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the RTF text from the stream.
            </summary>
            <param name="stream">The source stream.</param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderRichText.AutoWidth">
            <summary>
            MS RichEdit doesn't give an ability to support AutoWidth.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderRichText.Rtf">
            <summary>
            Rtf formatted text.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderRichText.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the RenderRichText 
            will automatically format a Uniform Resource Locator (URL) 
            when it is found into the assigned Rtf text.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderImage">
            <summary>
            Represents RO that render images.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderImage.CanSplit">
            <summary>
            Doesn't support image splitting.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderShape">
            <summary>
            Base class for ROs that renders shapes.
            NOTES to inheritor:
            - coordinate objects must be added to the ManagedUnits array to get 
            automatical default type adjustment.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderShape.AdjustForDefaultUnit">
            <summary>
            Set a type of ManagedUnits items to be the same as at this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderShape.CanSplit">
            <summary>
            Shapes can't be splitted.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderShape.ManagedUnits">
            <summary>
            Array of UnitBase-derived objects for which automatical type adjustment
            is performed.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UnitPointCollection">
            <summary>
            Collection of UnitPoint objects.
            Here's a public incarnation of the class, i.e. properties of this type
            are expressed to a user. Internally to implement such properties the 
            derived internal UnitPointCollectionInternal class is being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollection.AddFrom(System.Collections.IEnumerable)">
            <summary>
            Adds points from a specified collection.
            The possible types of points's items are UnitPoint, Point and
            PointF.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollection.GetMinMax(C1.C1PrintDocument.UnitTypeEnum,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns min and max coordinates among points in the collection.
            </summary>
            <param name="unit">
            Unit in which returned values must be expressed.
            </param>
            <param name="minX">
            Minimal X coordinate
            </param>
            <param name="maxX">
            Maximum X coordinate
            </param>
            <param name="minY">
            Minimal Y coordinate
            </param>
            <param name="maxY">
            Maximum Y coordinate
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollection.GetMin(C1.C1PrintDocument.UnitTypeEnum,System.Double@,System.Double@)">
            <summary>
            Returns minimal coordinates among points in the collection.
            </summary>
            <param name="unit">
            Unit in which returned values must be expressed.
            </param>
            <param name="minX">
            Minimal X coordinate.
            </param>
            <param name="minY">
            Minimal Y coordinate.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollection.GetMax(C1.C1PrintDocument.UnitTypeEnum,System.Double@,System.Double@)">
            <summary>
            Returns maximum coordinates among points in the collection.
            </summary>
            <param name="unit">
            Unit in which returned values must be expressed.
            </param>
            <param name="maxX">
            Maximum X coordinate
            </param>
            <param name="maxY">
            Maximum Y coordinate
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollection.InsertItemInternal(System.Int32,System.Object,System.Boolean)">
            <summary>
            Overridden to allow add items of types other than UnitPoint.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPointCollection.Item(System.Int32)">
            <summary>
            Index access to points.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UnitPointCollectionInternal">
            <summary>
            This class is actually used to expose properties of the type 
            UnitPointCollection.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.UnitPointCollectionInternal.CreateNewItem">
            <summary>
            Overridden to subscribes new added points to owner element's
            query providers (for percantage/Em/Ex calculations).
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.UnitPointCollectionInternal.Owner">
            <summary>
            Document element that hosts the collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderPositionsShape">
            <summary>
            The base class for shapes that defines their content as a collection
            of points, by default tuned to be polyline or polygon.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderPositionsShape.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderPositionsShape.SubscribePoint(C1.C1PrintDocument.UnitPoint)">
            <summary>
            Subscribes a point to all necessary events.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderPositionsShape.UnsubscribePoint(C1.C1PrintDocument.UnitPoint)">
            <summary>
            Unsubscribes a point from events.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderPositionsShape.PointsChangedEH(C1.C1PrintDocument.GeneralCollection,C1.C1PrintDocument.CollectionChangedEventArgs)">
            <summary>
            Event handler that is subscribed to the PointsProtected collection
            and process them.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderPositionsShape.AdjustForDefaultUnit">
            <summary>
            Makes Type of points the same as at this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderPositionsShape.PointsProtected">
            <summary>
            The collection of points. 
            NOTES to inheritor:
            Increase visibility of this property if you want exhibit it under name Points.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderPositionsShape.ClosedProtected">
            <summary>
            Indicates whether a polyline is closed or opened.
            NOTES to inheritor:
            Increase visibility of this property if you want exhibit it under name Closed.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderPolyline">
            <summary>
            Represents RO that renders polyline.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderPolyline.Points">
            <summary>
            Points defining a polyline.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderPolygon">
            <summary>
            Represents RO that renders polygon.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderPolygon.Points">
            <summary>
            Points defining a polygon.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderTwoPositionsShape">
            <summary>
            Base class for shapes defined by two positions.
            Implementation Notes:
            - ManagedUnits indexes: 0 - X1, 1 - Y1, 2 - X2, 3 - Y2
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTwoPositionsShape.AggregatedPropertyChangeEH(System.Object,C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Event handler that is subscribed to PropertyChange event of each Unit 
            representing coordinates and process changes in them.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTwoPositionsShape.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X1">
            <summary>
            Value of X1Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X1Str">
            <summary>
            String representation of X1Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X1Unit">
            <summary>
            X coordinate of point 1
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y1">
            <summary>
            Value of Y1Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y1Str">
            <summary>
            String representation of Y1Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y1Unit">
            <summary>
            Y coordinate of point 1
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X2">
            <summary>
            Value of X2Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X2Str">
            <summary>
            String representation of X2Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.X2Unit">
            <summary>
            X coordinate of point 2
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y2">
            <summary>
            Value of Y2Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y2Str">
            <summary>
            String representation of Y2Unit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTwoPositionsShape.Y2Unit">
            <summary>
            Y coordinate of point 2
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderLine">
            <summary>
            Represents RO that renders a line.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderRectangle">
            <summary>
            Represents RO that renders a rectangle.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderEllipseBase">
            <summary>
            Base class for ROs that renders elliptic figures.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderEllipseBase.GetNormalizedAngle(System.Single)">
            <summary>
            Returns an angle in the range [0, 360] corresponding to specified angle
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.RenderEllipseBase.StartAngleProtected">
            <summary>
            Angle in degrees measured clockwise from the x-axis to the starting point 
            of the arc.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderEllipseBase.SweepAngleProtected">
            <summary>
            Angle in degrees measured clockwise from the StartAngleProtected to the 
            ending point of the arc.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderEllipseBase.IsWedge">
            <summary>
            Indicates whether wedge or arc must be drawn.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderEllipse">
            <summary>
            Represents RO that renders ellipse.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderEllipsePartial">
            <summary>
            Base class for ROs that renders figures which are piece of ellipse.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderEllipsePartial.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderEllipsePartial.StartAngle">
            <summary>
            Public name for StartAngleProtected
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderEllipsePartial.SweepAngle">
            <summary>
            Public name for SweepAngleProtected
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderArc">
            <summary>
            Represent RO that renders ellipse-based arc
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderPie">
            <summary>
            Represents RO that renders ellipse-based wedge
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderGraphics">
            <summary>
            Defines RO that represents its drawing surface as a Graphics object.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.DrawBegin(System.Boolean)">
            <summary>
            Starts the drawing process and returns new Graphics object to perform 
            drawing in it.
            This Graphics is based on a metafile accessed via BackMetafile property.
            </summary>
            <param name="keepPreviousDrawing">
            If true that drawing made on a Graphics returned by previous call
            to this method is being kept, in other case the previous drawing
            is cleared up.
            </param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.DrawEnd">
            <summary>
            Finishes rendering process on the Graphics returned by the DrawBegin
            method.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.Clear">
            <summary>
            Clear the picture. Can't be called if there is current drawing process
            (started with DrawBegin and not closed by DrawEnd).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.CreateCanvas(System.Boolean)">
            <summary>
            Creates new Graphics in the CurrentGraphics property and an underlying
            metafile in the BackMetafile property.
            If keepPrevious is true then plays previous metafile in the new one.
            </summary>
            <param name="keepPrevious"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.CloseCanvas(System.Boolean)">
            <summary>
            Dispose CurrentGraphics and performs InvalidateAutoSize if
            doesInvalidateAutosize is true.
            </summary>
            <param name="doesInvalidateAutosize"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.ClearCanvas(System.Boolean)">
            <summary>
            Conjunction of CloseCanvas and Clear.
            </summary>
            <param name="doesInvalidateAutosize"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.CheckDrawing">
            <summary>
            Throw an exception if IsDrawing = false.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderGraphics.CheckNotDrawing">
            <summary>
            Throw an exception if IsDrawing = true.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderGraphics.BackMetafile">
            <summary>
            Metafile that records a drawing on a graphics.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderGraphics.CanSplit">
            <summary>
            Graphics can't be splitted.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderGraphics.CurrentGraphics">
            <summary>
            Current Graphics object to draw on, the one that was returned by the 
            DrawBegin method. If there is no current drawing process (IsDrawing = false) 
            then returns null.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderGraphics.IsDrawing">
            <summary>
            True when between DrawBegin and DrawEnd.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderGraphics.IsEmpty">
            <summary>
            Returns true if nothing was drawn (namely if there was no at least
            one DrawBegin call or Clear call was performed).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderC1Printable">
            <summary>
            Represents RO that capable to render some classes in a specific manner,
            with support of a spill over page break.
            Such classes explicitly or implicitly supports IC1ControlPrinter interface.
            To determine whether control could be printed using this object 
            C1PrintDocument.CanPrintControl method must be used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderC1Printable.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignment implementation.
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderC1Printable.ControlSizeChangedEH(System.Object,System.EventArgs)">
            <summary>
            Event handler that is subscribed to WidthChanged and HeightChanged events
            of Control's IC1ControlPrinter.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderC1Printable.AttachControlPrinterHandlers(C1.C1PrintDocument.ControlPrinters.IC1ControlPrinter)">
            <summary>
            Attach necessary event handlers to Control's IC1ControlPrinter.
            </summary>
            <param name="printer"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderC1Printable.DetachControlPrinterHandlers(C1.C1PrintDocument.ControlPrinters.IC1ControlPrinter)">
            <summary>
            Detach necessary event handlers from Control's IC1ControlPrinter.
            </summary>
            <param name="printer"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderC1Printable.Control">
            <summary>
            Control to render
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderC1Printable.PrintInfo">
            <summary>
            Defines an object of ControlPrintInfoBase-derived class that keeps
            printing options for the Control. The class of this object (if at all 
            exists) must correspont do the class of Control, in other case it just
            ignored (more exactly must be ignored by Control's printing mechanism).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderC1Printable.ControlPrinter">
            <summary>
            Store IC1ControlPrinter of the Control
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderControlImageBase">
            <summary>
            The base class for ROs that capable to render WinForms Contlol's screen
            image.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.AttachControlHandlers(System.Windows.Forms.Control)">
            <summary>
            Attach necessary event handlers to a specified control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.DetachControlHandlers(System.Windows.Forms.Control)">
            <summary>
            Detach event handlers from a specified control.
            </summary>
            <param name="ctrl"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.ControlSizeChangedEH(System.Object,System.EventArgs)">
            <summary>
            Event handler that subscribes to Control's SizeChanged event
            to perform auto-size recalculation as a reaction to this event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.GetPrintableWidthPxOfControl">
            <summary>
            Returns printable area width of control in pixels, taking in account
            ControlImageClientAreaOnly property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.GetPrintableHeightPxOfControl">
            <summary>
            Returns printable area height of control in pixels, taking in account
            ControlImageClientAreaOnly property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.GetPrintableWidthMmOfControl">
            <summary>
            Returns printable area width of control in mm, taking in account
            ControlImageClientAreaOnly property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.GetPrintableHeightMmOfControl">
            <summary>
            Returns printable area height of control in mm, taking in account
            ControlImageClientAreaOnly property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlImageBase.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderControlImageBase.Control">
            <summary>
            Control to render
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderControlImage">
            <summary>
            Represents RO that renders WinForm Control's screen image (snapshot).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderControlSmart">
            <summary>
            Represents RO that combines printing capabilitis of RenderControlImage and
            RenderC1Printable controls. That is, if some control in parent-child hierarchy
            supports printing via RenderC1Printable it being printed this way, in other
            case screen image of control is being printed. If C1Printable control is 
            stretched vertically during printing, then parent control's image (even if it's
            not a C1Printable) is stretched too.
            IMPORTANT NOTICE: current implementation doesn't support spill over page
            break.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlSmart.GetPrintableWidthPxOfControl">
            <summary>
            Overridden to return printable width in pixels additionally taking
            into account whether control is C1-printable or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderControlSmart.GetPrintableHeightPxOfControl">
            <summary>
            Overridden to return printable height in pixels additionally taking
            into account whether control is C1-printable or not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.RenderControlSmart.CanSplit">
            <summary>
            Can't be splitted.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ControlGenerator">
            <summary>
            Auxiliary class managed to generate printing output for the RenderControlSmart
            class.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ControlGenerator.#ctor(System.Windows.Forms.Control,System.Int32)">
            <summary>
            
            </summary>
            <param name="ctrl">
            Initializes the Control property.
            </param>
            <param name="ctrlIndex">
            Initializes the Index property.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.ControlGenerator.Generate(System.Double,C1.C1PrintDocument.DocEngine.Src.IDrawel@)">
            <summary>
            Generates source drawel subtree representing a Control
            </summary>
            <param name="availableHeightMm">
            Available vertical space.
            </param>
            Returns a root drawel of source subtree via this parameter.
            <param name="ctrlDrawel"></param>
        </member>
        <member name="M:C1.C1PrintDocument.ControlGenerator.PrepareForGeneration">
            <summary>
            TODODOC: hereinafter
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.C1PrintDocument.ControlGenerator.InsertStretchLine(System.Drawing.Bitmap@,System.Double,System.Double)" -->
        <member name="M:C1.C1PrintDocument.ControlGenerator.BuildChildrenList">
            <summary>
            Builds PhildControls list containing child controls which are subject
            to print.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ControlGenerator.Index">
            <summary>
            Index of Control in parent's Controls collection
            0 - top of z-order, last - bottom of z-order
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ControlGenerator.ClientAreaOnly">
            <summary>
            Indicates whether entire or client only area of a Control must be printed.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ControlGenerator.ControlBoundsMm">
            <summary>
            Control's bounding rectangle expressed in mm.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ControlGenerator.PrintTopMm">
            <summary>
            Filling out by parent generator.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ControlGenerator.PrintHeightMm">
            <summary>
            Filling out by itself.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.AccessibilityMatrix.GetMasterCount(System.Int32)">
            <summary>
            The number of non-reduced masters for control with index ctrlIndex.
            </summary>
            <param name="ctrlIndex"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.AccessibilityMatrix.Item(System.Int32,System.Int32)">
            <summary>
            [ri, ci] == true means that ri depend on ci
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderTable">
            <summary>
            Represents RO that render tables
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTable.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTable.GetBand(System.Int32)">
            <summary>
            References table's band by its index.
            </summary>
            <param name="bandIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTable.ParentPhysicalSizeChangedEH(System.Object,System.EventArgs)">
            <summary>
            Overridden to process parent element's PhysicalSizeChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTable.GetAutoWidthMm">
            <summary>
            Calculates a width of a table's content area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTable.GenerationStateChanged">
            <summary>
            Overridden to reset generation state of nested elements.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTable.AutoWidth">
            <summary>
            Autowidth is always true and is calculated as a sum of columns' widths.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTable.AutoHeight">
            <summary>
            Autowidth is always true and is calculated as a sum of bands' heights.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTable.StyleTableCell">
            <summary>
            Parent style for RO's of table cells.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTable.ContentWidthMmInUpdate">
            <summary>
            Stores table's content area width while in EndUpdateInternal processing.
            In turn, TableRow class uses this value to determine its width correctly.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TableElementStyles">
            <summary>
            Defines style list for TableColumn, TableBand and TableRow classes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.#ctor(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            parentElement must be of type C1PrintDocument or DocumentElement
            </summary>
            <param name="parentDocument"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.HasStyle(System.String)">
            <summary>
            True if there is a style in the collection with specified name.
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.HasStyle(System.Type)">
            <summary>
            True if there is a style in the collection corresponding to specified RO
            type.
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.AssignFrom(System.Object)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.AssignFrom(System.Object,System.Boolean)">
            <summary>
            Performs copy assignment of collection styles from another collection,
            applying C1DocStyle.AssignFrom(other, keepPropertiesInheritance) method.
            </summary>
            <param name="other"></param>
            <param name="keepPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStylesBase.CreateStyle">
            <summary>
            Creates an entity of a style in a collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentStylesBase.Item(System.String)">
            <summary>
            Returns a style by its string name. "" denotes own Style.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentStylesBase.Item(System.Type)">
            <summary>
            Returns a style that corresponds a specified type of RO.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyles.SetStylesForParent(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            Makes styles to be children for styles of parentElement.
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableElementStyles.SetStylesForParent(C1.C1PrintDocument.IDocumentElement)">
            <summary>
            TODODOC:
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableColumn.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.TableColumn.Collection">
            <summary>
            Owner TableColumnCollection
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TableColumnCollection">
            <summary>
            Represents a collection of table's columns, each item is of the type
            TableColumn.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableColumnCollection.GetLastVisibleIndex">
            <summary>
            Returns an index of a last visible column, or -1 if there are no 
            visible columns
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.TableColumnCollection.Item(System.Int32)">
            <summary>
            Index access to column definitions.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableColumnCollection.AllWidths">
            <summary>
            Assign a specified width to all columns in the collection.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableBand.Cell(System.Int32,System.Int32)">
            <summary>
            References a cell with a specified row and column indexes (zero-based).
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableBand.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableBand.GenerationStateChanged">
            <summary>
            Overridden to reset generation state of nested objects
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableBand.Rows">
            <summary>
            Collection of band's rows.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableBand.AutoHeight">
            <summary>
            Height is always a sum of band rows' height.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableBand.SpanController">
            <summary>
            Span controller that manages cell span processing.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableBand.SpanGenerationInfo">
            <summary>
            Used by the RenderTable.GenerateBand method and keeps temporary
            info about currently generating spans.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.CellGenerationInfo">
            <summary>
            Auxiliary class that describes attributes of a single column for the
            CellGenerationInfoMap class. 
            TODODOC: entire class
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.CellGenerationInfoMap">
            <summary>
            Auxiliary class that is used by RenderTable.GenerateBand to keep temporary
            info
            TODODOC: entire class
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableHeader.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.TableHeader.AllowOrphan">
            <summary>
            Indicates whether orphan header is allowable on printing.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TableRowCollection">
            <summary>
            Defines a collection of table band rows.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRowCollection.Owner">
            <summary>
            The band which collection belongs to
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRowCollection.Item(System.Int32)">
            <summary>
            Indexed access to band rows
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRowCollection.AllHeights">
            <summary>
            Set a specified height to all rows in the collection.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.GetSpanBaseHeightMm">
            <summary>
            Returns "base span height" (height that rely on non-spanned cells only).
            If AutoHeight is false then returns row height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.GetCellsHeightManagementRule(System.Boolean)">
            <summary>
            Returns default height management rule of cells for a specified 
            auto-height mode.
            </summary>
            <param name="isAutoHeight"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.CalcFrameWidthMm">
            <summary>
            Table row has no its own frames.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.GenerationStateChanged">
            <summary>
            Overridden to reset generation state of nested elements.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.InsertCell(System.Int32)">
            <summary>
            Performs addition of a new cell corresponding to a column with a specified
            index.
            </summary>
            <param name="colIndex"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.RemoveCell(System.Int32)">
            <summary>
            Performs removal of a cell corresponding to a column with a specified
            index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.CreateCells">
            <summary>
            Creates entire set of cells corresponding to a number of table's columns.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.ClearCells">
            <summary>
            Clears all cells of the row.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.MoveCell(System.Int32,System.Int32)">
            <summary>
            Moves a cell with current index to a new place corresponding to
            toIndex. Used as a reaction to table column movement.
            </summary>
            <param name="index"></param>
            <param name="toIndex"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.HasSpanColumns">
            <summary>
            Returns true if at least one cell in the row is a starting cell of
            a span.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.BeginCellHeightInsensibleMode">
            <summary>
            Starts cell-height-insensible-mode, in which change of cell's height
            doesn't cause recalculation of row's autoheight.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableRow.EndCellHeightInsensibleMode">
            <summary>
            Closes cell-height-insensible-mode. See BeginCellHeightInsensibleMode
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRow.Collection">
            <summary>
            Collection which belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRow.Table">
            <summary>
            Table which belongs to
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRow.Band">
            <summary>
            Band which belongs to
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRow.IsCellHeightInsensibleMode">
            <summary>
            Indicates whether in cell-height-insensible-mode. See BeginCellHeightInsensibleMode
            for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableRow.Cells">
            <summary>
            Collection of cells of this row.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.BeginHeightChangeInsensibleMode">
            <summary>
            Starts height-change-insensible-mode, in which change of this cell's height
            doesn't cause recalculation of its row's autoheight.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.EndHeightChangeInsensibleMode">
            <summary>
            Closes height-change-insensible-mode. See BeginHeightChangeInsensibleMode
            for details.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.GetColumnWidthToFitRO(C1.C1PrintDocument.RenderObject)">
            <summary>
            Returns minimal column width (in default units) required to fit 
            ro horizontally in this cell.
            </summary>
            <param name="ro"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.GetColumnWidthUnitToFitRO(C1.C1PrintDocument.RenderObject)">
            <summary>
            Returns minimal column width (as a Unit object) required to fit 
            ro horizontally in this cell.
            </summary>
            <param name="ro"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.GetColumnWidthToFitText(System.String)">
            <summary>
            Returns minimal column width (in default units) required to fit 
            text horizontally in this cell, in a supposition that text will be
            assigned via RenderText.Text property.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.GetColumnWidthUnitToFitText(System.String)">
            Returns minimal column width (as a Unit object) required to fit 
            text horizontally in this cell, in a supposition that text will be
            assigned via RenderText.Text property.
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.CalcFrameWidthMm">
            <summary>
            Turn off spacing/borders
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableCell.CalcFrameHeightMm">
            <summary>
            Turn off spacing/borders
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.SpanColumns">
            <summary>
            Defines a number of cells this cell spans horizontally (including itself) 
            to the right.
            1 means no span.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.SpanRows">
            <summary>
            Defines a number of cells this cell spans vertically dawnward 
            (including itself).
            1 means no span.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.IsSpanMaster">
            <summary>
            Indicates whether this cell is *defined* as a starting cell of any span.
            "Defined" means that SpanColumns or SpanRows property is greater that 1.
            Actually it doesn't mean that this cell starts some span because
            there are cases when there is another span with less row or col index
            which covers this cell. In this case the definition of this cell as a 
            span is ignored. 
            To determine whether this cell starts actual span use IsSpanMasterActual
            property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.IsSpanMasterActual">
            <summary>
            Indicates whether this cell is an *actual* starting cell of any span.
            See IsSpanMaster for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.IsSpanSlaveActual">
            <summary>
            Returns true if cell belongs to an *actual* spant but not is a span
            master.
            For the explanation of what is "actual span" see IsSpanMaster property
            description.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCell.IsHeightChangeInsensibleMode">
            <summary>
            Indicates whether is in height-change-insensible-mode. See BeginHeightChangeInsensibleMode
            for details.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableCellInternal.GetCellColumn">
            <summary>
            Returns a reference to a column which this cell corresponds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.TableCellCollection.Owner">
            <summary>
            Owner table row.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TableCellCollection.Item(System.Int32)">
            <summary>
            Indexer to access cells
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.CellStyles">
            <summary>
            Defines a collection of cell's styles.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1DocStyle">
             <summary>
             Represents the style for a user.
             NOTES for implementator:
             When new always-stored property is adding check the following methods:
                 InitStoredAttributes
                 ChildPropertyChangeEH or ImageAlignChangedEH
             Also add an event handler to listen properties changings.
                 
             </summary>
            
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.IsInherited(System.Int32)">
            <summary>
            Indicates whether an attribute with a specified index is inherited.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AssignFrom(System.Object)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AssignFrom(System.Object,System.Boolean)">
            <summary>
            Performs copy assignment of this style from other style. 
            </summary>
            <param name="other">
            Source of copying.
            </param>
            <param name="keepPropertiesInheritance">
            If true then attributes which are inherited in a source style
            becomes inherited in this style, in other case all attribute values
            are copied.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.GetAttribute(System.Int32)">
            <summary>
            Returns a value of a specified attribute, even in case when this
            attribute is inherited.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.GetAttributeInternalValue(System.Int32)">
            <summary>
            Returns a value of a specified attribute that is stored in this style.
            For simple (not always stored) inherited attribute it will be null.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.SetAttribute(System.Int32,System.Object)">
            <summary>
            Set a value of a simple (not always stored) attribute.
            </summary>
            <param name="attrIdx"></param>
            <param name="attVal"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.InitStoredAttributes">
            <summary>
            Performs first-time initialization of always stored attributes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.InitForParentAttribute(System.Int32,C1.C1PrintDocument.IPropertyInheritable)">
            <summary>
            Tune a specified attribute to operate as parent attribute's
            inherited object.
            </summary>
            <param name="attrIdx"></param>
            <param name="attr"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.NotifyParentPropertyChange(System.Object,C1.C1PrintDocument.PropertyChangeEventArgs)">
            <summary>
            Via this method this style receives a notifications about 
            PropertyChange event of parent style.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AddChildStyle(C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Adds a specified style to a list of receivers of the PropertyChange
            event notification in this style.
            Returns a cookie that must be stored and used later for removal
            from this list.
            </summary>
            <param name="childStyle"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.RemoveChildStyle(System.Object)">
            <summary>
            Removes a style identified by cookie object from a list of receivers 
            of the PropertyChange event notification in this style.
            The cookie object is that one which was returned by the AddChildStyle
            method on addition.
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.SetParentStyle(C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Sets a parent style for this one.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.UpdateInheritedAttributes">
            <summary>
            Updates all always stored inherited attributes to make their the same
            as in a parent style.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AttachUnitsSynchronizers">
            <summary>
            Attach DefaultUnitChangedEH and DefaultUnitOfFramesChangedEH event
            handlers to corresponding document's events.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.DetachUnitsSynchronizers">
            <summary>
            Detach DefaultUnitChangedEH and DefaultUnitOfFramesChangedEH event
            handlers from corresponding document's events.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.DefaultUnitChangedEH(System.Object,System.EventArgs)">
            <summary>
            Synchronizes DefaultUnit of the style with Document.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.DefaultUnitOfFramesChangedEH(System.Object,System.EventArgs)">
            <summary>
            Synchronizes DefaultUnitOfFrames of the style with Document.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AdjustForDefaultUnitOfFrames">
            <summary>
            Adjust Type of UnitBase-derived attributes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1DocStyle.AdjustTypeOfUnit(C1.C1PrintDocument.UnitBase,C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Set Type for a specified UnitBase-derived attribute.
            </summary>
            <param name="unit"></param>
            <param name="newType"></param>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.BackColor">
            TODO: change to brush
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.BorderTableVert">
            <summary>
            Vertical internal borders of a table.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.BorderTableHorz">
            <summary>
            Horizontal internal borders of a table.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.ControlImageClientAreaOnly">
            <summary>
            Indicates whether client area or whole area of control will be rendered
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.TextPosition">
            <summary>
            Text position (normal, subscript, superscript)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.VisitedHyperlinkAttrs">
            <summary>
            Visited hyperlinks attribytes
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.HighlightedHyperlinkAttrs">
            <summary>
            Highlighted hyperlinks attribytes
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.EolIsEndOfParagraph">
            <summary>
            To format the CRLF or the \r and \n symbols as end of paragraph
            </summary>
        </member>
        <member name="E:C1.C1PrintDocument.C1DocStyle.PropertyChange">
            <summary>
            IPropertyChange implementation
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.Document">
            <summary>
            Document to which style tree this style belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.Context">
            <summary>
            "Context" of style tree to which this style belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.ParentStyle">
            <summary>
            Parent style (the one which attributes are being inherited by this style).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.DefaultUnitOfFrames">
            <summary>
            Default unit of Spacing/Padding
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1DocStyle.EventListener">
            <summary>
            Specify an object that receives notification about PropertyChange event.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.CellStyle.GetParentAttribute(System.Int32)">
            <summary>
            Parent attribute is determined according the following rules:
            1) if this attribute in the parent row is not inherited then it's a parent
            2) otherwise this attribute in the parent band is not inherited then it's a parent
            3) otherwise column's attribute is a parent
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PrintDocument.TableSpanController">
            <summary>
            Auxiliary class that calculates heights of rows containing spans.
            TODODOC: entire class
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.IsRowInActualSpan(System.Int32)">
            <summary>
            Indicates whether a row with specified index is in actual span.
            </summary>
            <param name="rowIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.IsCellInActualSpan(System.Int32,System.Int32)">
            <summary>
            Indicates whether a cell with specified indexes is in actual span.
            </summary>
            <param name="rowIdx"></param>
            <param name="colIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.GetActualSpanOfCell(System.Int32,System.Int32)">
            <summary>
            Returns TableSpanDef for specified Band's cell. If Cell not in actual span
            then returns null.
            </summary>
            <param name="rowIdx"></param>
            <param name="colIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.NotifyAutoHeightChanged(System.Int32)">
            <summary>
            Must be called by row when:
            - AutoHeight property changed
            - Height changed when AutoHeight is false
            </summary>
            <param name="rowIdx"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.UpdateBandRowsHeightOfChain(C1.C1PrintDocument.SpanChainItem,System.Int32)">
            <summary>
            Update heights of rows belonging to specified chain.
            Row with index excludeRowIdx is excluded from update.
            </summary>
            <param name="chainItem"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.UpdateSpansOnRowAction(System.Int32,System.Int32,C1.C1PrintDocument.TableSpanController.RowAction)">
            <summary>
            Update Spans list to make it consistent with specified action performed
            on band's row.
            rowIdx is an index of a row in question. 
            newRowIdx is used in conjunction with Moved action only and specifies a new
            index of the row.
            Returns true if something has been changed in Spans list, false in other case.
            PREREQUISITES: SpanSet.Spans must be sorted by row-col.
            POSTCONDITION: SpanSet.Spans stay sorted by row-col.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.UpdateSpansOnColAction(System.Int32,System.Int32,C1.C1PrintDocument.TableSpanController.ColAction)">
            <summary>
            Update Spans list to make it consistent with specified action performed
            on table's column.
            colIdx is an index of a column in question. 
            newColIdx is used in conjunction with Moved action only and specifies a new
            index of the column.
            Returns true if something has been changed in Spans list, false in other case.
            PREREQUISITES: SpanSet.Spans must be sorted by row-col.
            POSTCONDITION: SpanSet.Spans stays sorted by row-col.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.UpdateSpansOnSpanAction(System.Int32,System.Int32,System.Collections.ArrayList@)">
            <summary>
            Update Spans list to make it consistent with a change of span performed at
            specified band's cell.
            Returns true if something has been changed in Spans list, false in other case.
            deletedSpans returns a list of spans that was deleted, or null if there are no.
            PREREQUISITES: SpanSet.Spans must be sorted by row-col.
            POSTCONDITION: SpanSet.Spans stays sorted by row-col.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.ProcessSpansListChanged(System.Collections.ArrayList,System.Int32,System.Int32)">
            <summary>
            Performs all necessary actions after Spans has been changed.
            deletedSpans is a list of spans (TableSpanDef) that was deleted during
            change of Spans list (can be null).
            
            removedRowIdx specifies index of removed row, or -1 if not the case.
            insertedRowIdx specifies index of inserted row, or -1 if not the case.
            If both removedRowIdx and insertedRowIdx are specified it means that row
            hass been moved from removedRowIdx to insertedRowIdx.
            </summary>
            <param name="deletedSpans"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.RecalcSpanMasters(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="spanDefList">
            Each item is of the type TableSpanDef
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.CreateSpanInfos">
            <summary>
            The main internal structures building method. Having 
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TableSpanController.CalcSpanChainHeights(C1.C1PrintDocument.SpanChainItem)">
            <summary>
            Calculates heights of the spans chain chainItem.
            PREREQUISITES: span map and other structures must be built before 
            (i.e. CreateSpanInfos() must be performed before).
            Span-master cells must have a valid height.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TableSpanDef">
            <summary>
            Describes a single span (in TableSpanController class)
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TableSpanDef.RowColComparer">
            <summary>
            Compare two TableSpanDef. The one with less Row is lesser, when Row are equal
            then the one with less Col is lesser.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.SpanDefSet">
            <summary>
            Represents a set of TableSpanDef
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.SpanDefSet.GetChains">
            <summary>
            Items are of type SpanChainItem.
            PREREQUISITES: Spans' IsActual property must be assigned before.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.SpanDefSet.Spans">
            <summary>
            Elements are of the type TableSpanDef
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.SpanRowDescriptor">
            <summary>
            Used by TableSpanController in conjunction with span map
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.SpanRowDescriptor.BaseHeightMm">
            <summary>
            The "base" height of row, i.e. height that relies on non-spanned cells only
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.SpanRowDescriptor.HeightMm">
            <summary>
            Calculated height in mm
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.SpanRowDescriptor.IsFixed">
            <summary>
            Whether row is "fixed" (originally (AutoHeight = false) or by algorithm)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.SpanChainItem.Spans">
            <summary>
            The list of spans (TableSpanDef) belonging to this chain item.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.SpanChainItem.FirstRow_Comparer">
            <summary>
            Ascending order by FirstRow
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentStyleContext">
            <summary>
            Defines a most root style attributes values. Each document has
            a single style tree and a single corresponding DocumentStyleContext
            object.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyleContext.SetBaseAttributes">
            <summary>
            Initialize default attribute values.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyleContext.GetAttribute(System.Int32)">
            <summary>
            Returns a specified attribute's value.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyleContext.GetAttributeName(System.Int32)">
            <summary>
            Returns string representation of an attribute name, the one that
            is used as property name in the PropertyChange event.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyleContext.IsAlwaysStoredAttribute(System.Int32)">
            <summary>
            Indicate whether an attribute is "always stored", i.e. is a complex
            object which is not null even in a case when attribute is inherited.
            </summary>
            <param name="attrIdx"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.DocumentStyleContext.GetAttributeIndex(System.String)">
            <summary>
            Returns attribute's index by its name.
            </summary>
            <param name="attName"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.DocumentStylesRoot.HiddenRootStyle">
            <summary>
            The most root style, all the styles in the collection are children
            of the one.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RunningTitle.AutoWidth">
            <summary>
            Always equal to the width of page printable area.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RunningTitle.AutoHeight">
            <summary>
            Always false to prevent accidental changings during page generation as
            a consequence of change of a height of a nested RO.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RunningTitle.Style">
            <summary>
            Own style
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RunningTitle.StyleNested">
            <summary>
            Default parent style for nested RO
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RunningTitle.IDocumentElement_IsRootElement">
            <summary>
            TODODOC:
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.Width">
            <summary>
            Value of WidthUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.WidthStr">
            <summary>
            String representation of WidthUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.WidthUnit">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.Spacing">
            <summary>
            Value of SpacingUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.SpacingStr">
            <summary>
            String representation of SpacingUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDef.SpacingUnit">
            <summary>
            Spacing between this column and next column.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.AddRange(C1.C1PrintDocument.PageColumnDef[])">
            <summary>
            Adds column definitions from a specified array.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.OnCollectionChangedInternal(C1.C1PrintDocument.CollectionChangedEventArgs)">
            <summary>
            Processes addition and removal of column definitions. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.DocumentUnitChangedEH(System.Object,System.EventArgs)">
            <summary>
            Event handler that subscribes to document's DefaultUnitChanged event
            to adjust Type of items' member Units.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.AdjustDefaultUnit">
            <summary>
            Adjust Type of items' member Units.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.AdjustColumnForDefaultUnit(C1.C1PrintDocument.PageColumnDef)">
            <summary>
            Adjust Type of a specified items' member Units.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumnDefinitions.AdjustForDefaultUnit(C1.C1PrintDocument.UnitBase,C1.C1PrintDocument.UnitTypeEnum)">
            <summary>
            Set a specified unit to a specified UnitBase-derived object.
            </summary>
            <param name="obj"></param>
            <param name="toUnit"></param>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDefinitions.Document">
            <summary>
            Document which belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumnDefinitions.DefaultUnit">
            <summary>
            Default unit of measurement
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PageBody">
            <summary>
            An auxiliary class that represents a body of a page, a part of a page 
            printable area excluding page header and footer.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageBody.CurrentColumn">
            <summary>
            An object that represents current printing column.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageBody.AutoWidth">
            <summary>
            Width is calculated automatically based on page size.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageBody.AutoHeight">
            <summary>
            Height is calculated automatically based on page size and header/footer
            heights.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PageColumn">
            <summary>
            Auxiliary class that represents page column.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumn.GetActualColumnCount">
            <summary>
            Returns an actual column count which could be less than explicitly 
            specified because a specified number of columns doesn't fit in a page body
            width.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumn.GetActualColumnWidth(System.Int32)">
            <summary>
            Returns an actual width of column with a specified index which could be 
            less than explicitly defined because a defined width of column doesn't 
            fit in a page body width.
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumn.GetActualColumnSpacing(System.Int32)">
            <summary>
            Returns spacing *after* column
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.PageColumn.GetActualIndex">
            <summary>
            Auxiliary
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumn.Index">
            <summary>
            Zero-based index of a current generating column or -1 if not currently
            in generation.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumn.Body">
            <summary>
            Page body which column belongs to.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumn.AutoWidth">
            <summary>
            Width is calculated automatically based on document's columns
            definitions.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.PageColumn.AutoHeight">
            <summary>
            Height is always equal to the height of page body.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.StyleNameToObjectMap.StyleNameRegistered(System.String)">
            TODO: Case-insensitive search
            
        </member>
        <member name="T:C1.C1PrintDocument.DocumentPageLayerEnum">
            <summary>
            Defines possible page layers
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.EmfHyperlinksAndAnchorsHelper.ParseCommentRecord(System.IntPtr,System.Int32,System.Drawing.Imaging.EmfPlusRecordType,C1.C1PrintDocument.CommentRecordTypeEnum@,System.String@,System.Drawing.Rectangle@)">
            <summary>
            Parses the passed metafile comment record (EmfPlusRecordType.Comment or EmfPlusRecordType.EmfGdiComment).
            Function returns true if no errors occur during parsing.
            </summary>
            <param name="data">Data of the metafile's record.</param>
            <param name="dataSize">Size of data.</param>
            <param name="recordType">Type of the metafile's record.</param>
            <param name="commentType">Type of record, the possible values are defined by the CommentRecordTypeEnum enumeration.</param>
            <param name="tag">Tag field of the record.</param>
            <param name="boundRectangle">Bounding rectangle of the record.</param>
            <returns>Returns true if no errors occur.</returns>
        </member>
        <member name="T:C1.C1PrintDocument.OutlineFromEmfHelper">
            <summary>
            Fetches outline entries from metafiles created by C1Report.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1LinkTarget">
            <summary>
            Represents the type of jump: to place within document (C1LinkTargetAnchor),
            to external file or URL (C1LinkTargetFile) and so on.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1LinkTargetFile.IsUrlString(System.String)">
            <summary>
            Returns true if passed parameter contains URL.
            </summary>
            <param name="s">String to test.</param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PrintDocument.PageMovingTypeEnum">
            <summary>
            Describes the supported modes of moving between pages.
              First - Move to first page.
              Prev - Move to previous page.
              Next - Move to next page.
              Last - Move to last page.
              Absolute - Move directly to specified page.
              Relative - Move to the specified page relative to current page.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1LinkTargetPage">
            <summary>
            Specifies the link target which allows to moving between pages of document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1LinkTargetPage.PageMovingType">
            <summary>
            Gets or sets the type of moving between pages.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1LinkTargetPage.Offset">
            <summary>
            Specifies the offset from current page, if Offset = -1 then move to previos page,
            if Offset = 1 the move to next page. This property is used only if PageMovingType
            equals to PageMovingTypeEnum.Relative.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1LinkTargetPage.PageNo">
            <summary>
            Specifies the absolute number of page to jump.
            This property is used only if PageMovingType equals to PageMovingTypeEnum.Absolute.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1LinkTargetPage.URL">
            <summary>
            Returns the URL.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.C1LinkTargetPage.PdfURL">
            <summary>
            Returns the URL in the PDF format.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.IC1HighlightInfo">
            <summary>
            Represents an information about hyperlink in object.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.UserActionEnum">
            <summary>
            Identifies a single end-user input action which can be handled by a 
            C1Preview form control.
              Click - The control is clicked.
              MouseUp - The mouse pointer is over the control and a mouse button is released.
              MouseDown - The mouse pointer is over the control and a mouse button is pressed.
              MouseEnter - The mouse pointer enters the control.
              MouseLeave - The mouse pointer leaves the control.
              Enter - The input focus enters the control.
              Leave - The input focus leaves the control.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.FormsKeyActionTabEnum">
            <summary>
            Describes the actions to be performed when a tab key is pressed 
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.FormsKeyActionEnterEnum">
            <summary>
            Describes the actions to be performed when a Enter key is pressed
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ActionHandlerBase">
            <summary>
            Describes an action that can be performed in response to a user action in a
            C1Preview form. This is an abstract base class for the specific action 
            handlers.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ActionHandlerBase.Execute(C1.C1PrintDocument.IRenderInputControlParent)">
            <summary>
            Executes the action which is represented by this ActionHandler object. 
            This is an abstract method and must be overridden in descendant class.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ActionHandlerLink">
            <summary>
            Describes an action handler that executes a hyperlink jump.
            All link types which are supported by the C1Preview hyperlinks are 
            also supported by this action handler:
              - Jump to an anchor in the existing document.
              - Jump to an anchor in another document.
              - Open an external program or file.
              - Jump to another page of the same document.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ActionHandlerLink.Execute(C1.C1PrintDocument.IRenderInputControlParent)">
            <summary>
            Overriden. Executes the hyperlink jump.
            </summary>
            <param name="container">The IRenderInputControlParent object representing the context in which the input control functions. The IRenderInputControlParent interface is implemented by the C1PreviewPane class.</param>
        </member>
        <member name="P:C1.C1PrintDocument.ActionHandlerLink.LinkTarget">
            <summary>
            Gets or sets the link target. See C1LinkTarget for details.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ActionHandlerPreviewCommand">
            <summary>
            Describes an action handler that executes one of the predefined preview 
            toolbar actions. The effect from executing this handler is the same 
            as pressing the corresponding button on the preview toolbar.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ActionHandlerPreviewCommand.Execute(C1.C1PrintDocument.IRenderInputControlParent)">
            <summary>
            Overriden. Performs the associated button’s action.
            </summary>
            <param name="container">The IRenderInputControlParent object representing the context in which the input control functions. The IRenderInputControlParent interface is implemented by the C1PreviewPane class.</param>
        </member>
        <member name="P:C1.C1PrintDocument.ActionHandlerPreviewCommand.ButtonAction">
            <summary>
            Gets or sets the associated preview button action.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputAction">
            <summary>
            Describes a single input action, and any handling associated with it.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputAction.AssignFrom(C1.C1PrintDocument.InputAction)">
            <summary>
            Copies the content of another InputAction object into the current object.
            </summary>
            <param name="source">The source object, whose properties are to be copied into this object.</param>
        </member>
        <member name="P:C1.C1PrintDocument.InputAction.Owner">
            <summary>
            Gets the InputActions collection containing this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputAction.UserAction">
            <summary>
            Gets or sets the user action associated with this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputAction.ActionHandler">
            <summary>
            Gets or sets the object describing the handling associated with the action.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputActions">
            <summary>
            Represents the collection of InputAction objects.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputActions.ExecuteAction(C1.C1PrintDocument.UserActionEnum,C1.C1PrintDocument.IRenderInputControlParent)">
            <summary>
            Executes the action handler associated with specified userAction.
            </summary>
            <param name="userAction">The user action (Click, Enter, Leave etc.)</param>
            <param name="container">The IRenderInputControlParent object representing the context in which the input control functions. The IRenderInputControlParent interface is implemented by the C1PreviewPane class.</param>
        </member>
        <member name="P:C1.C1PrintDocument.InputActions.Owner">
            <summary>
            Gets or sets the input info object containng this collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.IRenderInputControlParent">
            <summary>
            This interface must be implemented by the Windows control containing 
            the C1Preview Forms’ controls. In the current version of C1Preview 
            this interface is implemented by the C1PreviewPane class.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.SetStatusText(System.String)">
            <summary>
            This method is called when the status text could have changed and should 
            be updated (e.g. when the control receives the input focus).
            </summary>
            <param name="text">the status text.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.JumpToLink(C1.C1PrintDocument.C1LinkTarget)">
            <summary>
            This method is called when the jump to the specified link should be performed.
            </summary>
            <param name="linkTarget">the target of the jump.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.DoPreviewCommand(C1.Win.C1PrintPreview.ToolBarButtonActionEnum)">
            <summary>
            This method is called when the specified preview action must be executed.
            </summary>
            <param name="action">the action to execute.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.OnUserAction(C1.C1PrintDocument.InputInfoBase,C1.C1PrintDocument.UserActionEnum,C1.C1PrintDocument.InputAction,System.Boolean@)">
            <summary>
            This method is called when the specified preview action must be executed.
            </summary>
            <param name="inputInfo">the InputInfoBase object corresponding to the input control which causes an event.</param>
            <param name="userAction">the user action which occurred (mouse click, control enter, etc.).</param>
            <param name="inputAction">the InputAction that will be executed (can be null if no actions are defined for the specified user action).</param>
            <param name="handled">output parameter; if set to true when the method returns, any further handling is cancelled.</param>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.DisableLayout">
            <summary>
            This method is called when the OnLayot event must be disabled (when the size of the input control is changing).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.EnableLayout">
            <summary>
            This method is called when the OnLayot event must be enabled (when the size of input control has changed).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.ResetSelection">
            <summary>
            This method is called when the selection must be reset (when the input control becomes input focus).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.IRenderInputControlParent.SetFocusTo(C1.C1PrintDocument.InputInfoBase)">
            <summary>
            This method is called when the input focus must be assigned to specified control.
            </summary>
            <param name="inputInfo"></param>
        </member>
        <member name="P:C1.C1PrintDocument.IRenderInputControlParent.Parent">
            <summary>
            Gets the parent control for the input controls.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IRenderInputControlParent.ToolTip">
            <summary>
            Gets the ToolTip object which will hold the tooltips of the input controls.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.IRenderInputControlParent.ZoomFactor">
            <summary>
            Gets the current zoom factor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.PageFormContext">
            <summary>
            Describes the form context that is used by C1PreviewForms.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoBase">
            <summary>
            The base abstract class for all input-related features of C1Preview Forms’ input 
            render objects (controls). InputInfoBase defines the basic properties which are 
            supported by all input controls – Value, StatusText, UserActions and so on. 
            Classes derived from RenderInputBase and providing specific controls 
            (such as text box, button etc.) can define derived input info classes specific 
            to the needs of the control. For example, RenderInputButton defines 
            the InputInfoButton class which is derived from InputInfoBase and provides 
            button-specific features.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputInfoBase.IsControlNeededParentForWmPrint">
            <summary>
            Some controls process the WM_PRINT message incorrectly if their Parent property
            is null. Example of such class is a TextBox when its Multiline property is false.
            The class derived from InputInfoBase must return true in this method
            if it uses such control.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputInfoBase.AssignFrom(C1.C1PrintDocument.InputInfoBase)">
            <summary>
            Copies the content of another InputInfoBase object.
            Attention! this method does not copy the value of Name property.
            </summary>
            <param name="source">The source object, its properties will be copied to this object.</param>
        </member>
        <member name="M:C1.C1PrintDocument.InputInfoBase.GetAutoSizeMm(System.Double,System.Double)">
            <summary>
            Calculates the optimal sizes of object in mms.
            </summary>
            <param name="width">Width of object, if -1 then it must be autocalculated.</param>
            <param name="width">Height of object, if -1 then it must be autocalculated.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.InputInfoBase.CreateControl(System.Boolean)">
            <summary>
            Creates the native control and initializes its properties.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputInfoBase.GetControlImage(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Returns the image representing the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.Owner">
            <summary>
            Gets the interface to the object that owns this input info object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.Name">
            <summary>
            Gets or sets the unique name of the input control. Allows to identify the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.Value">
            <summary>
            Gets or set the value associated with the input control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.ReadOnly">
            <summary>
            Gets or sets the value indicating whether the control is read-only. 
            For read-only controls, all input actions are still fired, but the control’s 
            value cannot be changed. The default is false.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.Printable">
            <summary>
            Gets or sets the value indicating whether the control is printed. 
            If true (default), the content of the control is printed normally. 
            Otherwise, it is not printed or exported. This might be used for example 
            to provide help for fields that are to be filled.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.StatusText">
            <summary>
            Gets or sets the text that appears in the status line of the preview when 
            the control has focus.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.ToolTip">
            <summary>
            Gets or sets the tooltip associated with the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.Cursor">
            <summary>
            Gets or sets the cursor used when the mouse is over the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.InputActions">
            <summary>
            Gets the collection of supported user actions and handlers associated with those actions.
            See help on InputActions class for details.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoBase.HasInputActions">
            <summary>
            Gets the value indicating whether the InputInfo has any actions associated with it. 
            Checking this property is similar to testing the InputActions.Count, with the 
            following important difference: the InputActions collection is created only when it 
            is needed or accessed, so if a control does not have any associated input actions, 
            using this property is more efficient.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoBase.FormForWmPrint">
            <summary>
            Some controls process the WM_PRINT message incorrectly if their Parent property
            is null. Example of such class is a TextBox when its Multiline property is false.
            FormForWmPrint is used as a parent form for such classes, this form is invisible and
            when it is displayed it does not receive an input focus, see FormForWmPrint.Show() method for details.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputBase">
            <summary>
            The base class for all C1Preview Forms’ input render objects 
            (which represent controls on C1Preview forms). Provides the basic functionality 
            for all input controls – position, size, visual style, user actions, input options. 
            Adds input-specific features to the display features provided by the base 
            class (position, size, visual style and so on).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputBase.CanSplit">
            <summary>
            Already returns false, RenderInputBase and its descendants does not 
            support the splitting.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputBase.InputInfo">
            <summary>
            Gets or sets the InputInfoBase object containing input-specific properties 
            of the input render object (including value).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoButtonBase">
            <summary>
            The abstract base class for the input info classes for all button-like controls 
            (RenderInputButton, RenderInputCheckBox, etc.)
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoButtonBase.Text">
            <summary>
            Gets or sets the text of the button.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoButtonBase.TextAlign">
            <summary>
            Gets or sets the alignment of the button text.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputControls">
            <summary>
            Allows to access all input controls in a C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.InputControls.GetDrawelInputPosition(C1.C1PrintDocument.DocEngine.Src.DrawelInput,C1.C1PrintDocument.DocEngine.Render.Page@,System.Int32@,System.Int32@)">
            <summary>
            Returns information about the DrawelInput within document.
            </summary>
            <param name="drawelInput">DrawelInput object to test.</param>
            <param name="renderPage">Render.Page containing the DrawelInputObject.</param>
            <param name="pageControlsCount">Total number of controls on page.</param>
            <param name="drawelIndex">Index of DrawelInput within of page.</param>
        </member>
        <member name="M:C1.C1PrintDocument.InputControls.GetAcceptButton">
            <summary>
            Returns the InputInfoButton object that is a accept button for document,
            (its AcceptButton property equals to true)
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.InputControls.ActiveControl">
            <summary>
            Gets or sets the active input control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputControls.Count">
            <summary>
            Gets the total number of input controls (RenderInputBase objects) in the document.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputControls.Item(System.Int32)">
            <summary>
            Gets the InputInfoBase object with the specified index.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputControls.Item(System.String)">
            <summary>
            Returns the InputInfoBase object with the specified name 
            (the value of the InputInfoBase.Name property). If there are several controls with the 
            same name, the first that is found will be returned.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoButton">
            <summary>
            Input info for the push button control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoButton.AcceptButton">
            <summary>
            Gets or sets the value indicating whether the button is an "Accept button" and its
            action will be executed when user press Enter in the C1PrintPreview control, which
            is lined to the document containing this button.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputButton">
            <summary>
            Input render object providing a push button.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputButton.InputInfo">
            <summary>
            Overridden. Gets or sets the InputInfoButton objects providing button features.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoCheckBox">
            <summary>
            Input info for the RenderInputCheckBox object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoCheckBox.Checked">
            <summary>
            Gets or sets the value indicating whether the check box is checked. 
            This is a typed (Boolean) wrapper around the base Value property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoCheckBox.CheckMarkStyle">
            <summary>
            Gets or sets the visual style of the check mark used by the control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoCheckBox.CheckAlign">
            <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputCheckBox">
            <summary>
            Input render object providing a checkbox.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputCheckBox.InputInfo">
            <summary>
            Overridden. Gets or sets the InputInfoCheckBox objects providing check box features.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputComboBoxItem">
            <summary>
            Represents the separate item in the combobox collection.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderInputComboBoxItem.AssignFrom(C1.C1PrintDocument.RenderInputComboBoxItem)">
            <summary>
            Copies the content of another InputAction object into the current object.
            </summary>
            <param name="source">The source object, whose properties are to be copied into this object.</param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputComboBoxItem.Owner">
            <summary>
            Gets the RenderInputComboBoxItems collection containing this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputComboBoxItem.Text">
            <summary>
            Gets or sets a text that will be displayed in the dropdown list.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputComboBoxItem.UserData">
            <summary>
            Gets or sets a user's data.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputComboBoxItems">
            <summary>
            Represents the collection of objects, which will be displayed in the drop-down list of combobox.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputComboBoxItems.Owner">
            <summary>
            Gets or sets the InputInfoComboBox object containng this collection.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoComboBox">
            <summary>
            Input info for the RenderInputComboBox object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoComboBox.Text">
            <summary>
            Gets or sets the text.
            This is simply a typed wrapper around the base Value property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoComboBox.PasswordChar">
            <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is ‘\0’ (no hiding takes place).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoComboBox.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the combo box.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoComboBox.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoComboBox.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputComboBox">
            <summary>
            Input render object providing text input with dropdown list.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputComboBox.InputInfo">
            <summary>
            Overridden. Gets or sets the InputInfoComboBox object which provides text input with dropdown list features.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoRadioButton">
            <summary>
            Input info for the RenderInputRadioButton object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoRadioButton.Checked">
            <summary>
            Gets or sets the value indicating whether the check box is checked. 
            This is a typed (Boolean) wrapper around the base Value property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoRadioButton.GroupIndex">
            <summary>
            Gets or sets the group index for the radiobutton. 
            Only one button in a group can be checked at any time.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoRadioButton.CheckAlign">
            <summary>
            Gets or sets the horizontal and vertical alignment of the radiobutton on the control.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputRadioButton">
            <summary>
            Input render object providing a radio button.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputRadioButton.InputInfo">
            <summary>
            Overridden. Gets or sets the InputInfoRadioButton objects providing radio button features.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.InputInfoText">
            <summary>
            Input info for the RenderInputText object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoText.Text">
            <summary>
            Gets or sets the text.
            This is simply a typed wrapper around the base Value property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoText.PasswordChar">
            <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is ‘\0’ (no hiding takes place).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.InputInfoText.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderInputText">
            <summary>
            Input render object providing text input.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderInputText.InputInfo">
            <summary>
            Overridden. Gets or sets the InputInfoText object which provides text input features.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.TextLineInfo">
            <summary>
            Auxiliary class that keeps measurement info about single line of text.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.TextLineInfo.ComparativeWidthProviderEH(C1.C1PrintDocument.UnitBase,C1.C1PrintDocument.UnitGetComparativeLengthEventArgs)">
            <summary>
            Provides event handler that is attached to Unit properties representing
            horizontal lengthes, and provides them with relative length for percentage
            calculations.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TextLineInfo.ComparativeHeightProviderEH(C1.C1PrintDocument.UnitBase,C1.C1PrintDocument.UnitGetComparativeLengthEventArgs)">
            <summary>
            Provides event handler that is attached to Unit properties representing
            vertical lengthes, and provides them with relative length for percentage
            calculations.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.TextLineInfo.CreateUnit(System.Boolean)">
            <summary>
            Creates Unit object representing horizontal length if "horz" parameter
            is true, or vertical length in other case.
            </summary>
            <param name="horz"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.TextLineInfo.Init(C1.C1PrintDocument.Util.C1TextLine)">
            <summary>
            Fill out properties basing on fromMarkup properties.
            </summary>
            <param name="fromMarkup"></param>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.Extent">
            <summary>
            Value of ExtentUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.ExtentUnit">
            <summary>
            Width of text itself in the line, without regard to full justification.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.Ascent">
            <summary>
            Value of AscentUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.AscentUnit">
            <summary>
            Vertical space from top of line to the baseline.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.Height">
            <summary>
            Value of HeightUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.HeightUnit">
            <summary>
            The full height of the line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.Top">
            <summary>
            Value of TopUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.TopUnit">
            <summary>
            Y coordinate of top edge of the line relative to top edge of the first line. 
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.CharIndexFirst">
            <summary>
            The index of the character that is the first character in this line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.CharCountRendered">
            <summary>
            Number of characters rendered in this string, doesn't include trailing
            invisible characters such as space and CR/LF.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.CharCountProcessed">
            <summary>
            Number of all characters in this string, includinf trailing
            invisible characters such as space and CR/LF.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.IsEndOfParagraph">
            <summary>
            Indicates whether this is a last line of paragraph.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.Owner">
            <summary>
            RenderTextBase object whose line info is represented in this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.RelWidthMm">
            <summary>
            The width in mm of owner RenderTextBase object. It's used for percantage
            calculations.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.TextLineInfo.RelHeightMm">
            <summary>
            The height in mm of owner RenderTextBase object. It's used for percantage
            calculations.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderTextBase">
            <summary>
            The base class for text-rendering classes, namely RenderText and
            RenderMultiStyleText.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.UpdateTextInfoFromTextBox(C1.C1PrintDocument.Util.C1Text)">
            <summary>
            Update text-measurement-info properties from a specified textbox object.
            Being called internally when necessary.
            </summary>
            <param name="tb"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.CheckUpdateTextInfo">
            <summary>
            Check whether text-measurement-info properties has actual values
            and update them if necessary.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.CheckInfoTextBoxActual">
            <summary>
            Checks whether info in the InfoTextBox is actual and update it
            if necessary.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.CreateUnitRectFromLURect(System.Drawing.RectangleF)">
            <summary>
            Creates UnitRectangle object with with values corresponding to the ones
            from luRect object, in a supposition that luRect has metrics expressed
            in textbox's LUPerIn.
            </summary>
            <param name="luRect"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.OffsetMargins(C1.C1PrintDocument.UnitRectangle)">
            <summary>
            In a supposition that coordinates of rect are expressed relative
            to the content area, change them so that to be expressed relative
            to object's left-top corner.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.MmToTBLuPerIn(System.Double)">
            <summary>
            Translates a value in mm to a value expressed in textbox's LUPerIn.
            </summary>
            <param name="mmValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.TBLuPerInToMm(System.Double)">
            <summary>
            Translates value expressed in textbox's LUPerIn to a value in mm.
            </summary>
            <param name="luValue"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.InitTextBox(C1.C1PrintDocument.Util.C1Text,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initialize textBox to measure text string starting from character fromChar,
            </summary>
            <param name="textBox"></param>
            <param name="fromChar"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GenerationStateChanged">
            <summary>
            Reset generation-related attributes.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.BeforeInvalidateAutoSize">
            <summary>
            Marks that InfoTextBox has non-actual state.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetFormatForChar(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Searches ITextRangeFormat for specified char, returns the index of format and index of char within format.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.AddTextRangeToDrawelMarkup(C1.C1PrintDocument.DocEngine.Src.DrawelMarkup,System.String,C1.C1PrintDocument.Util.ITextRangeFormat)">
            <summary>
            Creates the new TextRange object and copies it into the DrawelMarkup.TextRanges,
            updates DrawelMarkup.TagPageNo and DrawelMarkup.TagTotalPages.
            This method do not initialize TextRange.Hyperlink property, this property
            will be updated later, when hyperlinks will be moved to DrawelMarkup.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.IC1TextOwner_Text">
            <summary>
            Gets the text to render by the managed C1Text objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.IC1TextOwner_Formats">
            <summary>
            Gets the formats of text.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetDependsOnPageNo">
            <summary>
            Gets the value indicating whether the object has text with PageNoField tag.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetDependsOnTotalPages">
            <summary>
            Gets the value indicating whether the object has text with PageNoField tag.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetLineInfo(System.Int32)">
            <summary>
            Returns object containing measurement info of a line of text with a
            specified index.
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetCharRect(System.Int32)">
            <summary>
            Returns a rectangle that a character with a specified index occupies
            in this object's surface, relative to top-left corner (not to content 
            area!!!).
            </summary>
            <param name="charIndex"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.RenderTextBase.GetCharRangeRectangles(System.Int32,System.Int32)">
            <summary>
            Returns an array of rectangles that characters from a specified range 
            occupies in this object's surface, relative to top-left corner 
            (not to content area!!!).
            </summary>
            <param name="startCharIndex"></param>
            <param name="charCount"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.InfoTextBox">
            <summary>
            Textbox that is used to retrieve text measurement info.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.GenCharCount">
            <summary>
            Keeps an entire number of characters that must be rendered.
            For a single rendering action a value of this property is determined 
            in the first call to the GenerateContent method.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.TextLength">
            <summary>
            Gets the number of chars in text.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.CurCharIndex">
            <summary>
            For a generation process keeps an index of a character that is a first
            in a next generation portion.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.FittedCharacterCount">
            <summary>
            Returns number of character that fit in the element's content area.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.FittedAllCharacters">
            <summary>
            Indicates whether all charactes of a text are fitted in the content area.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.FittedLineCount">
            <summary>
            Number of text lines fitted in the content area.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.BoundHeight">
            <summary>
            Value of BoundHeightUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.BoundHeightUnit">
            <summary>
            Returns the minimal height of this object necessary to fit all currently
            fitted text. Includes frame size.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.BoundWidth">
            <summary>
            Value of BoundWidthUnit
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.BoundWidthUnit">
            <summary>
            Returns the minimal width of this object necessary to fit all currently
            fitted text. Includes frame size.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderTextBase.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderText">
            <summary>
            Represents RO that renders plain text 
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderText.UpdateHyperlinks">
            <summary>
            Updates all C1HyperlinkText hyperlinks positions so that their length equals length of object's text.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderText.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderText.TextLength">
            <summary>
            Implements base abstract property IsEmptyText
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderText.Text">
            <summary>
            Text to render
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.RenderMultiStyleText">
            <summary>
            Represents RO rendering text constituted of multiple parts widh different
            formatting. 
            Text parts are being added by means of one of Add(...) methods.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.TextCollectionChangedEH(C1.C1PrintDocument.GeneralCollection,C1.C1PrintDocument.CollectionChangedEventArgs)">
            <summary>
            Event handler that is subscribed to TextCollection's CollectionChanged
            event and raises PropertyChange event on this object.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String,C1.C1PrintDocument.C1DocStyle)">
            <summary>
            Add a specified string to the end of the text, with formatting 
            defined in style.
            </summary>
            <param name="text"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Add a specified string to the end of the text, with formatting 
            represented by specified font, color and background color.
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="textColor"></param>
            <param name="backgroundColor"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Add a specified string to the end of the text, with formatting 
            represented by specified font and color.
            </summary>
            <param name="text"></param>
            <param name="font"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String,System.Drawing.Font)">
            <summary>
            Add a specified string to the end of the text, with formatting 
            represented by specified font.
            </summary>
            <param name="text"></param>
            <param name="font"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String,System.Drawing.Color)">
            <summary>
            Add a specified string to the end of the text, with formatting 
            represented by specified font.
            </summary>
            <param name="text"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AddText(System.String)">
            <summary>
            Add a specified string to the end of the text. The formatting is defined
            by this object's Style.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.ClearText">
            <summary>
            Clear the text.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.AssignFrom(System.Object,System.Boolean)">
            <summary>
            ICopyAssignable implementation
            </summary>
            <param name="other"></param>
            <param name="keepStylesPropertiesInheritance"></param>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.BeginUpdate">
            <summary>
            Starts a process of rapid assignment processing (update mode). Must be
            finished with EndUpdate call. While in the update mode autosizes has 
            invalid values.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.EndUpdate">
            <summary>
            Closes update mode.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.RenderMultiStyleText.CutStartingText(System.Int32)">
            <summary>
            Rebuild TextCollection so that text it will contain will be a part
            of the old one starting with char index newStartIndex.
            </summary>
            <param name="newStartIndex"></param>
        </member>
        <member name="P:C1.C1PrintDocument.RenderMultiStyleText.TextLength">
            <summary>
            Implements base abstract property IsEmptyText
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderMultiStyleText.CurrentPosition">
            <summary>
            Returns current text position
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.RenderMultiStyleText.TextCollection">
            <summary>
            Collection of "text with formatting" parts. Filled out by Add methods.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.StyledText">
            <summary>
            Represents a single format run of RenderMultiStyleText object. Used as an
            item of the StyledTextCollection class.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.StyledText.SetText(System.String)">
            <summary>
            Sets the Text property.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:C1.C1PrintDocument.StyledText.Owner">
            <summary>
            Gets the RenderMultyStyleText object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.StyledText.Text">
            <summary>
            Text of the format run.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.StyledText.Style">
            <summary>
            Style defining a formatting of the format run.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.StyledTextCollection">
            <summary>
            Collection of StyledText objects
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.StyledTextCollection.Owner">
            <summary>
            RenderMultiStyleText object which belongs to.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.CheckMarkStyleEnum">
            <summary>
            Describes the type of mark which is used in the ScalableCheckBox and RenderInputCheckBoxOptions.
              Default - the default style, like in Windows.
              Cross - like in MS Word.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ScalableCheckBox">
            <summary>
            Represents the "scalable" checkbox control.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.ScalableComboBox">
            <summary>
            Represents the "scalable" combobox control.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.ScalableComboBox._fireMouseEnter">
            <summary>
            Indicates whether the MouseEnter event can be fired.
            See methods: OnMouseEnter, OnMouseLeave, OnChildControlMouseEnter, OnChildControlMouseLeave
            for details.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ScalableComboBox.ShowDropDownForm">
            <summary>
            Creates a dropdown form and displays it.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ScalableComboBox.CloseDropDownForm">
            <summary>
            Closes and disposes a dropdown form.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.ScalableComboBox.UpdateValue">
            <summary>
            Updates _selectedIndex and _textBox.Text, these properties are filled on the basis of
            the _listBox.SelectedIndex property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ScalableComboBox.SelectedIndexText">
            <summary>
            Gets the text of selected item, if no item selected returns an empty string.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.MarkPainter.GetSize100">
            <summary>
            Returns the size of mark for 100%
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.MarkPainter.InternalDrawMark(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Single)">
            <summary>
            Paints the real mark.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="rect">Bounds of mark.</param>
            <param name="zoomFactor">Zoom factor.</param>
        </member>
        <member name="T:C1.C1PrintDocument.ScalableRadioButton">
            <summary>
            Represents the "scalable" radio button control.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.ScalableRadioButton.AutoCheck">
            <summary>
            Hides the base AutoCheck property.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.StyleContext">
            <summary>
            StyleContext contains a base Style definition and a list of
            named Styles. It provides the following services:
            - Style management (create, edit, and remove Styles)
            - Style inheritance mechanism
            - Rendering and measuring methods
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.StyleContext.m_baseTypes">
            <summary>
            Attributes base types map (optional). If attribute has an entry
            in this list then its 
            Key - attribute name (string)
            Value - type of the attribute (Type), can't be null.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.StyleContext.AddAbstractTypeAttribute(System.String,System.Type,System.Object)">
            <summary>
            Adds new attribute with exact specification of its base type.
            </summary>
            <param name="attName">
            Attribute name
            </param>
            <param name="baseType">
            A base type of the attribute. If null then type is being determined
            by value attribute.
            </param>
            <param name="value">
            Default value of an attribute stored in the BaseCollection.
            Can't be null.
            </param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.StyleContext.GetAttributeBaseType(System.String)">
            <summary>
            Returns the base type of the attribute. If there is no such attribute 
            then returns null.
            </summary>
            <param name="attName"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.StyleContext.ValidType(System.String,System.Object)">
            <summary>
            Indicates whether value type is assignment compatible to attribute's
            base type. 
            </summary>
            <param name="attName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.StyleContext.CheckType(System.String,System.Object)">
            <summary>
            The same as ValidType but raises an exception in case of fault.
            </summary>
            <param name="attName"></param>
            <param name="value"></param>
        </member>
        <member name="T:C1.C1PrintDocument.Util.Style">
            <summary>
            Style contains a collection of arbitrary attributes, 
            represented by a name/object entry, a reference to a parent
            Style, and a referrence to the containing StyleContext.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentInfoFields">
            <summary>
            Describes fields of DocumentInfo.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocumentInfo">
            <summary>
            Represents the common information about the C1PrintDocument:
            author, subject, creation time and so on.
            </summary>
        </member>
        <member name="T:C1.Win.C1PrintPreview.ZoomModeEnum">
            <summary>
            Describes the supported zoom modes of C1PrintPreview control.
            </summary>
        </member>
        <member name="T:C1.Win.C1PrintPreview.ToolBarButtonActionEnum">
            <summary>
            Enumerates the built in preview toolbar buttons
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.ExportProvider">
            <summary>
            Base class for all export providers.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.IExportProvider">
            <summary>
            Encapsulates static export properties for a given format
            (format name, default file extension, etc.)
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.IExportProvider.NewExporter">
            <summary>
            Creates and returns a new instance of format exporter
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.IExportProvider.CanExportDocumentObject(System.Object)">
            <summary>
            Checks whether the exporter can export the specified document
            </summary>
            <param name="o">Document object</param>
            <returns>Whether exporter can export the document specified</returns>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.FormatName">
            <summary>
            Returns a one-line description of the format (e.g. "Adobe PDF")
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.DefaultExtension">
            <summary>
            Returns the default file extension (e.g. "pdf")
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.Format">
            <summary>
            Returns the file format this provider supports.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.CanExportOutline">
            <summary>
            Returns true if outline export is supported
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.CanExportSomePages">
            <summary>
            Returns true if some pages export is supported
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExportProvider.CanShowOptions">
            <summary>
            Returns true if the exporter can show user options (supports ShowOptions)
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.Exporter">
            <summary>
            Base abstract class for all exporters.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.IExporter">
            <summary>
            Encapsulates instance export methods and properties for a given format
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.IExporter.ShowOptionsDialog">
            <summary>
            Shows the options dialog, returns true if user pressed OK, false if Cancel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Export.IExporter.Export">
            <summary>
            Performs export.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.ExportProvider">
            <summary>
            Returns the corresponding export provider.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.Document">
            <summary>
            Sets or returns the document to export.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.OutputFileName">
            <summary>
            Sets or returns the output file name.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.ShowOptions">
            <summary>
            Sets or returns whether Export() will show the options dialog.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.OnLongOpInProgressProvider">
            <summary>
            Sets the object which can be used to show progress of the operation.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.IExporter.LastErrorText">
            <summary>
            Returns last error explanation.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.DocumentInfoForm">
            <summary>
            Summary description for DocumentInfoForm.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Export.DocumentInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.DocumentInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.DocumentInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.C1BaseExportDialogForm">
            <summary>
            Base abstract class for all forms of export parameters.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.HtmlOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.C1BaseExportDialog">
            <summary>
            Base abstract class for all dialogs of export parameters.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.MetafileExportProvider">
            <summary>
            Base class for all export providers, which work over metafiles.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.MetafileExporter">
            <summary>
            Base class for all exporters, which work over metafiles.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.MetafileExporter.Export">
            <summary>
            Performs export.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.MetafileExporter.Document">
            <summary>
            Gets or sets a document for export, can be: C1PrintDocument, C1DocEngine, PrintDocument, list of metafiles (IEnumerable).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Export.MetafileExporter.ShowOptions">
            <summary>
            Gets or sets value indicating whether the options dialog should be displayed before export.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.EmfOptionsForm">
            <summary>
            Summary description for EmfOptionsForm.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Export.EmfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.EmfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.EmfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.PdfOptionsForm">
            <summary>
            Summary description for epdffrm.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Export.PdfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.PdfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.PdfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.RtfOptionsForm">
            <summary>
            Summary description for ertffrm.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Export.RtfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.RtfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.RtfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.ExportProviders">
            <summary>
            Implements the IExportProviders interface.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Export.XlsOptionsForm">
            <summary>
            Summary description for ertffrm.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Export.XlsOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.XlsOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Export.XlsOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PrintHelper.MergePageToPrinterSettings(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
            <summary>
            This method fixes a bug in .NET 1.0/1.1 (not sure about 2.0) 
            method PageSettings.CopyToHdevmode: it copies PaperSize.Height/Width
            (which are in 1/100 of an inch) to devmode's dmPaperLength/Width
            (which are in 1/10 mm) "as is", w/out converting the values. This
            *sometimes* results in printout being cut off at width/height times 2.54.
            </summary>
            <param name="target">PrinterSettings to which the page settings are to be merged.</param>
            <param name="source">PageSettings to be merged into PrinterSettings.</param>
        </member>
        <member name="T:C1.C1PrintDocument.PrintProgressForm">
            <summary>
            	Summary description for Form2.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.PrintProgressForm.InitializeComponent">
            <summary>
            	Required method for Designer support - do not modify
            	the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.MetafilePainter">
            <summary>
            Internal class is used for drawing metafiles.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.ImageUtils">
            <summary>
            Class with no instance props or methods, providing static image handling
            utilities.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.ImageUtils.GetImageSizeMm(System.Drawing.Image)">
            <summary>
            Returns size of a specified image in mm, or {0, 0} if image is null.
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.ImageUtils.AlignDir(System.Single,System.Single,C1.C1PrintDocument.DocEngine.Src.Names.ImageAlignment,System.Boolean,System.Single@,System.Single@,System.Int32@)">
            <summary>
            alings (supposedly an image) in one direction.
            </summary>
            <param name="length">original (image) side length</param>
            <param name="space">original space where the image is to fit</param>
            <param name="a">image alignment in that dir</param>
            <param name="tile">whether to tile the image</param>
            <param name="offset">resulting initial offset</param>
            <param name="side">resulting side length</param>
            <param name="repeat">how many times to repeat</param>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DImage">
            <summary>
            Encapsulates an image which can be set either by value (and serialized in place)
            or reference a dictionary item and serialized by reference.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1DImage.d">
            <summary>
            Sets or gets the image data
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DImageData">
            <summary>
            Class with the only purpose in life - serialize images.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1MetafileInfo">
            <summary>
            Contains addititional information about metafile created by the C1PrintDocument.
            This information are stored in the GdiComment record.
            Format of the record describes by the C1.C1Pdf.EMR_C1_METAFILE_INFO structure.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.PrintDocumentPrintController">
            <summary>
            The .NET PreviewPrintController creates metafiles with gdi+ commands.
            This is bad for us because the format of such emf records is not
            documented, and so we can not e.g. search for text. But, if we just
            use .NET PrintController, the page generation process slows down by
            a factor of 2 (at least). The only way to avoid this is to inherit
            from PreviewPrintController but provide our own graphics, based on
            emf-only metafiles. Another caveat is which base methods to call and
            which not. Invoking base.OnStartPrint/base.OnEndPrint is necessary
            because if we do not do that performance is the same as with the
            regular PrintController (i.e. bad). OTOH, invoking base.OnStartPage/
            base.OnEndPage looks like wasting time (as we can not use the provided
            graphics anyway) and what is more, for big documents at some point
            seems to drain resources and causes our creation of metailes to fail.
            So what is below seems to be the only combination that works. Still,
            the whole printing stuff in .NET is a mess. --dima.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.FontCacheItem.ThreadId">
            <summary>
            Id of thread producing this font.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.TextDirectionEnum">
            <summary>
            Describes variaous text directions in the C1Text object, which are depend of TextAngle.
              TopToBottom - TextAngle is about 0
              BottomToTop - TextAngle is about 180
              LeftToRight - TextAngle is about 90
              RightToLeft - TextAngle is about 270
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.LineRangeTextMetrics">
            <summary>
            Contains an information about text of range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.Size">
            <summary>
            Size of text in pixels, width and height.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.Ascent">
            <summary>
            Ascent for range, ascent is a distance from top edge of text to its baseline.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.NormalHeight">
            <summary>
            "Normal" height of range, this height is calculated without using of superscript / subscript
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.NormalAscent">
            <summary>
            "Normal" ascent for range, this ascent is calculated without using of superscript / subscript
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.IsTrueTypeFont">
            <summary>
            True if range uses a TrueType font
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.IsFixedFont">
            <summary>
            True if range uses a Fixed font (Courier New for example).
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.LineRangeTextMetrics.LineGap">
            <summary>
            Specifies typographic line spacing, used in calcuation of superscript / subscript 
            position.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1TextLineRange">
            <summary>
            Represents the part of formatted text within line.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange._line">
            <summary>
            Parent C1TextLine object containing this range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange._from">
            <summary>
            Specifies the index of first char of range,
            index is relative to the start of range's line.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange._length">
            <summary>
            Number of characters in range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange._format">
            <summary>
            Format of range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange.Position">
            <summary>
            Position of range in pixels relative to top-left corner of object.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLineRange.Metrics">
            <summary>
            Dimensions of text of range.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.Text">
            <summary>
            Gets the text of range.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.Line">
            <summary>
            Gets the parent C1TextLine object, containing this range.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.Owner">
            <summary>
            Gets the C1Text object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.From">
            <summary>
            Gets the index of first char of range within line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.Length">
            <summary>
            Gets the length of range in chars.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLineRange.Format">
            <summary>
            Format of range.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1TextLine">
            <summary>
            Represents the line of text, each line contains several C1TextLineRange objects.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLine.Size">
            <summary>
            Gets or sets the size of line in pixels.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1TextLine.Center">
            <summary>
            Gets or sets the coordinates of the geometrical center of line.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1TextLine.AddRange(System.Int32,System.Int32,C1.C1PrintDocument.Util.ITextRangeFormat)">
            <summary>
            Creates and adds new C1TextLineRange object.
            </summary>
            <param name="from">Index of first character of range.</param>
            <param name="length">Length of range in characters.</param>
            <param name="format">Format of range.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1TextLine.GetIndex">
            <summary>
            Returns index of line.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1TextLine.IsFirst">
            <summary>
            Returns the true value if line is a first line in Lines list.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1TextLine.IsLast">
            <summary>
            Returns the true if line is a last line in Lines list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Lines">
            <summary>
            Gets the C1TextLines object containing this line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Owner">
            <summary>
            Gets the C1Text object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.From">
            <summary>
            Gets the index of first character of line in C1Text.Text property.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.LengthNoSpaces">
            <summary>
            Number of characters in line without trailing spaces.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.LengthWithSpaces">
            <summary>
            Number of characters in line with trailing spaces, but without CR LF characters.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Length">
            <summary>
            Returns the LengthWithSpaces if C1Text.MeasureTrailingSpaces = true or C1Text.AutoWidth and
            LengthNoSpaces otherwise.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.FullLength">
            <summary>
            Gets the full length of line in characters, including trailing CRLF chars.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.CreatedFromCrlf">
            <summary>
            If true then line is created when CR or LF character is found.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Ascent">
            <summary>
            Gets or sets ascent of line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.RotatedHeight">
            <summary>
            Specifies the "rotated" height of line, this property equals to 
            Size.Height / cos(TextAngle) or Size.Height / sin.TextAngle.
            Depending on lines direction (by vertically or by horizontally).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.IsFixedFont">
            <summary>
            Indicates whether all ranges within line use a FIXED font (like Courier New for example).
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.SpacingHeight">
            <summary>
            Gets the height of line in pixels with spacing after it.
            Spacing is defined by C1Text.LinesSpacing parameter.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.SpacingRotatedHeight">
            <summary>
            Gets the rotated height of line in pixels with spacing after it.
            Spacing is defined by C1Text.LinesSpacing parameter.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.IsEndOfParagraph">
            <summary>
            Returns the true if line is end of paragraph.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Text">
            <summary>
            Returns the text of line.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLine.Item(System.Int32)">
            <summary>
            Returns the C1TextLineRange object by its index, first object has 0 index.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1TextLines">
            <summary>
            The array of C1TextLine objects.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLines.Owner">
            <summary>
            Gets the C1Text object containing this C1TextLines object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1TextLines.Item(System.Int32)">
            <summary>
            Returns the C1TextLine object by its index, first line has 0 index.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1Text">
            <summary>
            C1 text renderer.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text.c_TextAnglePrecision">
            <summary>
            Specifies the precision of rotation angle of text, for example if
            c_TextAnglePrecision equals to 0.01 then
            90.000 equals to 90.009
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._textSize">
            <summary>
            Specifies the sizes of object.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._autoHeight">
            <summary>
            Indicates whether the height of object must be calculated automatically.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._autoWidth">
            <summary>
            Indicates whether the width of object must be calculated automatically.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._firstCharIndex">
            <summary>
            Specifies the index of the first char of text range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._length">
            <summary>
            Specifies the length of text range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._firstFormat">
            <summary>
            Index of first ITextRangeFormat object, used in calculations.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._indexInFirstFormat">
            <summary>
            Position within first range, must be less than length of range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._lastFormat">
            <summary>
            Index of last ITextRangeFormat object, used in calculations.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._indexInLastFormat">
            <summary>
            Position within last range, must be less than length of range.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._textAlignSize">
            <summary>
            Specifies the max width of line of text, if text's width is large than this width then
            it will be wrapped on next line.
            This field has correct value only if AutoWidth = false and WordWrap = true
            Typically this field equals to TextSize.Width (if TextAngle == 0),
            if TextAngle = 90 or 270 then _wrapSize = TextSize.Height and so on.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._linesAlignSize">
            <summary>
            Specifies the size within of which lines must be aligned, calculated as
            TextSize.Width - _rotateOffset * 2 or
            TextSize.Height - _rotateOffset * 2
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._horzDirection">
            <summary>
            Can be 0, 1, -1
              0 - lines of text go by vertically
              1 - lines of text go from left to right
             -1 - lines of text go from right to left
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._vertDirection">
            <summary>
            Can be 0, 1, -1
              0 - lines of text go by horizontally
              1 - lines of text go from top to bottom
             -1 - lines of text go from bottom to top
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._rotateOffset">
            <summary>
            Specifies the offset of rotated text from edge of object.
            This parameter is 0 for degrees: 0, 90, 180, 270
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._autoTextSize">
            <summary>
            Indicates whether the width of text's lines must be auto calculated.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._autoLinesSize">
            <summary>
            Indicates whether the summary height of lines must be auto calculated.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._sizeText">
            <summary>
            Specifies the object's size for text operations.
            This field equals to TextSize.Width of lines of text go by vertically.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._linesAlign">
            <summary>
            Specifies the internal text alignment.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._textAlign">
            <summary>
            Specifies the internal lines alignment.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._calcSize">
            <summary>
            Specifies the calculated size of object, this size depends from 
            TextSize, AutoWidth and AutoHeight properties, for example if AutoWidth = true 
            and AutoHeight = true then _calcSize = _maxLineWidth, _allLinesHeight + _rotateOffset * 2;
            If AutoWidth = false and AutoHeight = false then
            _calcSize = TextSize and so on.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._fittedCharacterCount">
            <summary>
            Count of characters which are fitted into specified bounds,
            Bounds are specified by TextSize property.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._fittedCharacterStartIndex">
            <summary>
            Specifies the index of first fitted character, usually this field equals to 0, BUT if 
            TextDirection equals BottomToTop or RightToLeft this field is not zero.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._fittedLineStartIndex">
            <summary>
            Specifies an index of first fitted line, usually this field equals to 0, BUT if 
            TextDirection equals BottomToTop or RightToLeft this field is not zero.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._fittedLinesCount">
            <summary>
            Count of lines which are *fully* visible in object.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._fittedLinesSize">
            <summary>
            The summary size of fitted lines.
            Also this side inculdes the rotation offset (_rotateOffset) from edges of object.
            This size can be used as height or as width of object depending on TextAngle
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._maxLineWidth">
            <summary>
            Length in pixels of longest line.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._maxLineHeight">
            <summary>
            Height in pixels of highest line.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._allLinesHeight">
            <summary>
            Summary height of all lines.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._lines">
            <summary>
            Array of lines of text.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._normalAngle">
            <summary>
            Normalized rotation angle in degrees, this value is from 0 to 360.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._radAngle">
            <summary>
            Angle in radians.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.C1Text._text">
            <summary>
            Caches the value of Text property.
            filled in the Calculate method.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.CalculateStringSize(System.IntPtr,System.String,System.Drawing.Size@)">
            <summary>
            Calculates the sizes of string, if string contains the TAB characters then their
            length is assumed as TEXTMETRIC.tmAveCharWidth * 4.
            </summary>
            <param name="dc">DC used during calculation.</param>
            <param name="s">Strings size of which is calculated.</param>
            <param name="size">Contains the sizes of string in pixels on exit.</param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.GetTextRangeFormatByCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Searches the text range.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildFontCalc(C1.C1PrintDocument.Util.ITextRangeFormat,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds the GDI font handle during calculating.
            Font handle must be deleted with using DummyWin32.DeleteObject function.
            If useTextPosition equals to false then the font size has normal height.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildFontCalc(C1.C1PrintDocument.Util.ITextRangeFormat)">
            <summary>
            Builds the GDI font handle during calculating.
            Font handle must be deleted with using DummyWin32.DeleteObject function.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildFontReal(C1.C1PrintDocument.Util.ITextRangeFormat,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds the real GDI font handle which can be used for drawning the text
            on some DC. dpiX and dpiY specify the DPI of target DC.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildLinesWithoutWrap">
            <summary>
            Builds the list of lines with using \r or \n characters only.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.InternalBuildCharMap(System.IntPtr,System.String,C1.C1PrintDocument.Util.ITextRangeFormat,System.Boolean,System.Int32,System.Int32,System.Int32[]@,System.Int32@)">
            <summary>
            Internal method, called from BuildCharMap and BuildLineCharMap methods.
            Length of string (s parameter) must be more than 0.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildCharMap">
            <summary>
            Builds the array with chars' widths.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.CalculateLinesStartPoint">
            <summary>
            Calculates the value of _linesStartPoint field, used fields:
              _allLinesHeight - summary height of all lines
              _rotationOffset - offset of rotated text from edge of object
              _vertDirection, _horzDirection, _calcSize
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildLinesWrap">
            <summary>
            Builds the list of lines with using of \r or \n characters and wrapping.
            This functin uses _wrapSize field.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.CalculateLineRangeTextMetrics(System.IntPtr,C1.C1PrintDocument.Util.C1TextLineRange,C1.C1PrintDocument.Util.LineRangeTextMetrics@)">
            <summary>
            Calculates text metrics of line's range.
            </summary>
            <param name="dc">DC used for calculations.</param>
            <param name="lineRange">C1TextLineRange object metrics of which should be calculated.</param>
            <param name="metrics">Contains range's metrics on exit.</param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.CalculateLineRangesTop(C1.C1PrintDocument.Util.C1TextLine)">
            <summary>
            Calcualtes the top position of line ranges.
            Also this function may update the height of line, if line has superscript / subscript text
            and it is placed outside of line.
            </summary>
            <param name="textLine"></param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.RotateLinePoint(C1.C1PrintDocument.Util.C1TextLine,System.Drawing.Point)">
            <summary>
            Rotate the specified point around thw line's center.
            </summary>
            <param name="line">C1TextLine object.</param>
            <param name="linePoint">The point to rotate coordinates must be specified relative to center of line.</param>
            <returns>The rotated point.</returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.GetLineCorners(C1.C1PrintDocument.Util.C1TextLine,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Returns the coordinates of line's corners.
            Uses fields: _autoTextSize, _sizeText
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.BuildRanges">
            <summary>
            Split each line on ranges.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.DrawLine(System.IntPtr,System.Drawing.PointF,C1.C1PrintDocument.Util.C1TextLine,System.Boolean,System.Int32,System.Int32,System.Drawing.GraphicsUnit,C1.Win32.RECT,C1.C1PrintDocument.Util.IC1HighlightInfo@)">
            <summary>
            Draws line.
            </summary>
            <param name="dc">Handle to the device context.</param>
            <param name="line">C1TextLine object to be drawn.</param>
            <param name="calculateOnly"></param>
            <param name="dpiX">Pixels per inch by horizontally for specified device context.</param>
            <param name="dpiY">Pixels per inch by vertically for specified device context.</param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.Calculate">
            <summary>
            Calculates the text within specified area.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.GetCharPosition(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculates the position of char, its line and range within line.
            Returns false if char is not placed within object (its index >= than Text.Length for example).
            charIndexInRange and rangeIndex may contain -1 on exit if char corresponds to
            an "empty" place (on CR or LF character at end of line for example).
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.GetCharLuRect(System.Int32,System.Int32@)">
            <summary>
            Returns the rectangle of char.
            Function may return Rectangle.Empty if char has no place (char is a CR or LF at end of char for example),
            or if TextAngle does not equal to 0, 90, 180 or 270.
            </summary>
            <param name="charIndex">Index of char, first char has zero index.</param>
            <param name="lineIndexOfChar">Contains the index of line containing the char on exit.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.C1Text.GetCharsLuRects(System.Int32,System.Int32)">
            <summary>
            Returns the array of rectangles of range of characters.
            If TextAngle is not 0, 90, 180 or 270 degrees then returns array with zero size.
            </summary>
            <param name="startCharIndex">Index of first character.</param>
            <param name="length">Count of characters.</param>
            <returns></returns>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.FirstCharIndex">
            <summary>
            Gets or sets the index of the first char of text range within Text property,
            which will be used in measurements.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.Length">
            <summary>
            Gets or sets the length of the text range within Text property,
            which will be used in measurements.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.Text">
            <summary>
            Specifies the text to render.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.TextSize">
            <summary>
            Specifies the bounds of object.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.WordWrap">
            <summary>
            Indicates whether a object automatically wraps words to the beginning of the 
            next line when necessary.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.CalcSize">
            <summary>
            Specifies the calculated size of object, this size depends from 
            TextSize, AutoWidth and AutoHeight properties, for example if AutoWidth = true 
            and AutoHeight = true then CalcSize = MaxLineWidth, AllLinesHeight + RotateOffset * 2;
            If AutoWidth = false and AutoHeight = false then
            CalcSize = TextSize and so on.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.FittedBounds">
            <summary>
            Specifies the size of "fitted" part of object, for example if only first three lines of object
            are fit in the specified TextSize then FittedBounds.Height equals summary height of first three lines.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.Lines">
            <summary>
            Gets the lines array.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.FittedCharacterCount">
            <summary>
            Gets the number of characters are fit in the specified area, this property always
            equals Text.Length if AutoHeight is true.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.FittedAllCharacters">
            <summary>
            Gets the value indicating that all characters are fitted.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.FittedLineCount">
            <summary>
            Gets the number of lines which fit fully in the specified area.
            </summary>
        </member>
        <member name="P:C1.C1PrintDocument.Util.C1Text.TextDirection">
            <summary>
            Gets the direction of text within C1Text object, direction depends on TextAngle.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.DialogUtil.ShowPageSetupDialog(System.Windows.Forms.PageSetupDialog)">
            <summary>
            Displays the PageSetupDialog, for dialog must be specified:
              PageSettings
              PrinterSettings
            This method is a workaround for .NET bug with Margins in PageSetupDialog
            (the are displayed incorrectly if RegionInfo.CurrentRegion.IsMetric == true)
            and for PaperSize if it is created as PaperSize ps = new PaperSize(Name, Width, Height);
            </summary>
            <param name="dialog">The PageSetupDialog object</param>
            <returns>Returns the result of dialog.ShowDialog() function.</returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.GraphicsUtil.ConvertGraphicsUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.SizeF,System.Single,System.Single)">
            <summary>
            Converts the sizes from one GraphicsUnit to another.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.GraphicsUtil.ConvertGraphicsUnits(System.Drawing.GraphicsUnit,System.Drawing.GraphicsUnit,System.Drawing.SizeF,System.Drawing.Graphics)">
            <summary>
            Converts the sizes from one GraphicsUnit to another.
            </summary>
            <param name="from">Specifies the GraphicsUnit from.</param>
            <param name="to">Specifies the GraphicsUnit to.</param>
            <param name="size">Spicifies the sizes to convert.</param>
            <param name="referenceGraphics">Specifies the Graphics object which is used to calculate sizes in pixels, may be null.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.GraphicsUtil.CalcImageSizeInPoints(System.Drawing.Image)">
            <summary>
            Calculates the image size with the optimal algorithm, which is used
            by C1PrintDocument and C1PrintPreview.
            </summary>
            <param name="image">The image a size of which must be calculated.</param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.GraphicsUtil.ConvertToEmf(System.Drawing.Imaging.Metafile)">
            <summary>
            Converts the metafile from EmfPlusOnly or EmfPlusDual to EmfOnly
            </summary>
            <param name="metafile">Metafile to convert</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.GraphicsUtil.GetC1DocumentMetafileInfo(System.Drawing.Imaging.Metafile,C1.C1PrintDocument.Util.C1DocumentMetafileType@,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.SizeF@,System.Drawing.SizeF@)">
            <summary>
            </summary>
            <param name="metafile"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1PrintDocument.Util.DefaultPaperSize">
            <summary>
            Class used to persist page settings without printer settings.
            The following page settings are persisted: color, landscape,
            margins, paper size and name.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.DefaultPaperSize.GetCurrentLocaleDefaultPaperSize">
            <summary>
            Returns default paper size based on current system locale.
            This function uses the same strategy as Add Printer Wizard in
            choosing of default page size, that is returns value based
            on LOCALE_SYSTEM_DEFAULT LCID.
            
            Implementation notes: this function first attempt to retrieve size
            using GetLocaleInfo WinApi function, which must succeed on 2000/XP
            systems. If this attempt failed then it retrieves region descriptor
            and returns size based on its own knowledge.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1PrintDocument.Util.DefaultPaperSize.GetDefaultPaperSize">
            <summary>
            Returns the default paper size. If default printer presents
            in the system then returns its default paper size, otherwise
            returns size based on the current locale (see 
            GetCurrentLocaleDefaultPaperSize() for details).
            </summary>
            <returns></returns>
        </member>
        <member name="T:C1.C1PrintDocument.Util.DeviceCaps">
            <summary>
            Class allowing access to Win32 GetDeviceCaps API call.
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.Util.DeviceCaps.GetPhysOffset(System.IntPtr,System.Double@,System.Double@)">
            <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
            <param name="hdc">Handle to device context</param>
            <param name="left">Left physical offset</param>
            <param name="top">Top physical offset</param>
        </member>
        <member name="M:C1.C1PrintDocument.Util.DeviceCaps.GetPhysOffset(System.Drawing.Graphics,System.Double@,System.Double@)">
            <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
            <param name="hdc">Handle to Graphics for the device context</param>
            <param name="left">Left physical offset</param>
            <param name="top">Top physical offset</param>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DSides">
            <summary>
            Holds float values for four sides. Also serializes as an attribute.
            Note that the implied sequence is top-right-bottom-left.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DRectSerializer">
            <summary>
            Serializer for RectangleF (can serialize as an attribute).
            The sequence is x,y,width,height
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DPointSerializer">
            <summary>
            Serializer for PointF (can serialize as an attribute).
            The sequence is x,y
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DPoints">
            <summary>
            Provides serialization for a collection of PointF items
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.StringFormatProvider">
            <summary>
            Auxiliary class that provides an unified StringFormat content.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DocMetaInfo">
            <summary>
            Holds a serializable name/value collection.
            Each name/value is serialized as:
                name:type:value
            where type can be one of:
                i   - int
                s   - string (strings are base64'ed)
                f   - float
                d   - double
                ? what else?
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffReader">
            <summary>
            Reads a biff record into a memory stream, exposes the record code
            and provides methods like a binary reader so callers can get the
            data, plus methods for reading Excel-specific elements like
            RK numbers and biff strings.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffWriter">
            <summary>
            Writes biff records. call the Open method to start the record,
            then BinaryWriter-like commands to write the record data, which 
            gets cached in a memory stream. call the Close method to write
            the record header (code and data size) plus the actual record 
            data.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordBOF">
            <summary>
            First record in the biff file
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordStyle">
            <summary>
            These are the 6 main Excel styles (Normal, etc), not to be confused with the XF records
            which we call styles and excel calls eXtended Format.
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.C1XLBook"/> class. The 
            new workbook contains a single empty <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Clear">
            <summary>
            Clears the <see cref="T:C1.C1Excel.C1XLBook"/>, restoring the initial state with a single
            <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
            <remarks>
            The <see cref="M:C1.C1Excel.C1XLBook.Clear"/> method restores the <see cref="T:C1.C1Excel.C1XLBook"/> object
            to its initial state, with a single empty sheet called "Sheet1" and the 
            <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> set to 10pt Arial.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <remarks>
            <para>If the file doesn't exist, is locked, or is not a valid Excel 
            file, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="fillSheets">Whether to fill the worksheets with data.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <remarks>
            <para>If the file can't be created, an exception is thrown. 
            This typically indicates that the file is currently open by another 
            application (such as Microsoft Excel).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)">
            <summary>
            Converts a pixel measurement into twips (1/20th of a point).
            </summary>
            <param name="pix">Measurement in screen pixels.</param>
            <returns>Measurement in twips.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), a 
            resolution-independent unit. .NET controls, on the other hand, usually 
            express measurements in pixels. This method provides an easy way to 
            convert pixel measurements into twips using the current screen resolution.</para>
            <seealso cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)">
            <summary>
            Converts a twip measurement into screen pixels.
            </summary>
            <param name="twip">Measurement in twips.</param>
            <returns>Measurement in screen pixels.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), 
            a resolution-independent unit. .NET controls, on the other hand, 
            usually express measurements in pixels. This method provides an 
            easy way to convert pixel measurements into twips using the 
            current screen resolution.</para>
            <para><see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/></para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Sheets">
            <summary>
            Gets a collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent
            the worksheets in the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            The <see cref="T:C1.C1Excel.XLSheetCollection"/> returned has methods for counting, 
            enumerating, adding and removing sheets from the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.DefaultFont">
            <summary>
            Gets or sets the default <see cref="T:System.Drawing.Font"/> for the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            <para>You can assign any font to any cell using <see cref="T:C1.C1Excel.XLStyle"/> objects. Cells
            that have no associated custom styles or have styles that do not define
            a custom font are displayed using the book's default font.</para>
            <para>The <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property is initially set to 10 pt Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.KeepFormulas">
            <summary>
            Specifies whether the component should store formulas read from Xls files
            and write them back when saving the file.
            </summary>
            <remarks>
            <para>Setting this property to true allows you to load existing XLS files, modify the values 
            in some cells, and save the file preserving the formulas. This is the default setting.</para>
            <para>Setting this property to false causes the component to remove the formulas in the book 
            when it is loaded. Saving the file in this case will retain the last calculated values but 
            will remove the formulas.</para>
            <para>The component does not provide any support for creating or editing formulas. 
            Formulas must be created in Excel.</para>
            <para>Assigning any value to a cell will clear the formula in the cell.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.BuiltInFormats">
            <summary>
            Summary description for BuiltInFormats.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShape">
            <summary>
            Represents a shape embedded in a <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>Excel sheets may contain many types of embedded shapes, including 
            images, graphical elements, controls, and comments.</para>
            
            <para>The <b>XLShape</b> abstract class contains information that is common
            to all shape types, including the shape's location (<see cref="P:C1.C1Excel.XLShape.Sheet"/>, <see cref="P:C1.C1Excel.XLShape.Row"/>, 
            <see cref="P:C1.C1Excel.XLShape.Column"/>, <see cref="P:C1.C1Excel.XLShape.Rectangle"/>, <see cref="P:C1.C1Excel.XLShape.Rotation"/>),
            the type of border drawn around the shape (<see cref="P:C1.C1Excel.XLShape.LineWidth"/>, <see cref="P:C1.C1Excel.XLShape.LineColor"/>, 
            <see cref="P:C1.C1Excel.XLShape.LineStyle"/>), the <see cref="P:C1.C1Excel.XLShape.Rotation"/> applied to the shape, and
            <see cref="P:C1.C1Excel.XLShape.Hyperlink"/> information.</para>
            
            <para>The <see cref="T:C1.C1Excel.XLPictureShape"/> class derives from <b>XLShape</b> and 
            is used to embed images in sheets.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Excel.XLShape.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Excel.XLShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Id">
            <summary>
            Gets the unique identifier of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Row">
            <summary>
            Gets the index of the row to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Column">
            <summary>
            Gets the index of the column to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Workbook">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rectangle">
            <summary>
            Gets or sets the rectangle that contains the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rotation">
            <summary>
            Gets or sets the rotation of the shape, in degrees.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineWidth">
            <summary>
            Gets or sets the width of the border around the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineColor">
            <summary>
            Gets or sets the color of the border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineStyle">
            <summary>
            Gets or sets the style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.DashedLineStyle">
            <summary>
            Gets or sets the dash style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.ForeColor">
            <summary>
            Gets or sets foreground color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillColor">
            <summary>
            Gets or sets fill color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillOpacity">
            <summary>
            Gets or sets fill opacity for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the shape.
            </summary>
            <remarks>
            If you set this property to a URL, clicking the shape in Excel will
            open the browser and navigate to the URL.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="P:C1.C1Excel.XLOpaqueShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.None">
            <summary>
            Images are rendered in their original size, regardless of cell size.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Clip">
            <summary>
            Images are clipped to fit within the cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Scale">
            <summary>
            Images are scaled to fill the cell while preservind their original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Stretch">
            <summary>
            Images are stretched to fill the cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is rendered in its original size, and is
            indented from the top left corner of the cell by 30 twips:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 30, 30);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 
                rc.X, rc.Y, rc.Width, rc.Height);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="rc"><see cref="T:System.Drawing.Rectangle"/>that specifies the image size and position 
            with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, rc);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Size,System.Drawing.ContentAlignment,C1.C1Excel.ImageScaling)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="cellSize">The size of the cell that will contain the image, in pixels (used for aligning the image).</param>
            <param name="align">A <see cref="T:System.Drawing.ContentAlignment"/> value that specifies the position of the image in the cell.</param>
            <param name="scale">An <see cref="T:C1.C1Excel.ImageScaling"/> value that specifies the image scaling within the cell.</param>
            <remarks>
            This constructor automatically calculates the image size, position, and clipping based on the cell and image sizes
            and on the given alignment and scaling parameters.
            </remarks>
            <example>
            The code below adds an image to a cell. The image is centered within the cell and scaled to 
            fill the cell while preserving its aspect ratio.
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Size cellSize = new Size(
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(
                image,
                cellSize,
                ContentAlignment.MiddleCenter,
                ImageScaling.Scale);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(C1.C1Excel.XLSheet,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object that owns the new shape.</param>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the sheet, in twips.</param>
            <param name="y">The vertical position of the image with respect to the sheet, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Image">
            <summary>
            Gets a reference to the <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.ViewType">
            <summary>
            Gets or sets wheether this <see cref="T:C1.C1Excel.XLPictureShape"/> should be displayed in color, grayscale, or black and white.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Brightness">
            <summary>
            Gets or sets the brightness of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Contrast">
            <summary>
            Gets or sets the contrast of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.LeftClip">
            <summary>
            Gets or sets the left clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.RightClip">
            <summary>
            Gets or sets the right clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.TopClip">
            <summary>
            Gets or sets the top clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.BottomClip">
            <summary>
            Gets or sets the bottom clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.FileName">
            <summary>
            Gets or sets the file name of this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Excel.ShapeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLShape"/> objects on an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(C1.C1Excel.XLShape)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(System.Int32)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(C1.C1Excel.XLShape)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(System.Int32)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(C1.C1Excel.XLShape)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="id">The identifier of the object  to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Add(C1.C1Excel.XLShape)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLShape"/> object to the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Insert(System.Int32,C1.C1Excel.XLShape)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLShape"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="shape">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLShape"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Sheet">
            <summary>
            Gets the <see cref="P:C1.C1Excel.ShapeCollection.Sheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.Auto">
            <summary>
            Display the image using the image's own color information.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.GrayScale">
            <summary>
            Display the image in a grayscale.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.BlackAndWhite">
            <summary>
            Display the image in black and white.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeLineStyleEnum">
            <summary>
            Specifies the style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Simple">
            <summary>Single line (of width LineWidth).</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Double">
            <summary>Double lines of equal width.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThickThin">
            <summary>Double lines, one thick, one thin.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThinThick">
            <summary>Double lines, reverse order.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Triple">
            <summary>Three lines, thin, thick, thin.</summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeDashedLineStyleEnum">
            <summary>
            Specifies the dash style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Solid">
            <summary>Solid (continuous) pen.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dash">
            <summary>Dash style, analogue PS_DASH pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dot">
            <summary>Dot style, analogue PS_DOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDot">
            <summary>Dash-dot style, analogue PS_DASHDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDotDot">
            <summary>Dash-dot-dot style, analogue PS_DASHDOTDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.SquareDot">
            <summary>Square dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDash">
            <summary>Short dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDash">
            <summary>Long dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDashDot">
            <summary>Short dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDot">
            <summary>Long dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDotDot">
            <summary>Long dash-dot-dot style.</summary>
        </member>
        <member name="T:C1.C1Excel.XLCell">
            <summary>
            Represents individual cells in a <see cref="T:C1.C1Excel.XLSheet"/>, and provides
            properties for getting and setting the cell <see cref="P:C1.C1Excel.XLCell.Value"/>,
            <see cref="P:C1.C1Excel.XLCell.Style"/>, and <see cref="P:C1.C1Excel.XLCell.Hyperlink"/>.
            </summary>
            <remarks>
            <para>To create cells, use the <see cref="T:C1.C1Excel.XLSheet"/> indexer (Item property). 
            If the cell already exists, the reference will be returned as usual. 
            If not, the sheet will create the cell (as well as rows and columns if 
            necessary) and will return a reference to the new cell.</para>
            <para>Because it creates cells automatically, the indexer is especially 
            useful when creating and populating sheets.</para>
            </remarks>
            <example>
            For example, the code below creates a new <see cref="T:C1.C1Excel.C1XLBook"/>, then 
            populates the first sheet with a 10 by 10 multiplication table:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            for (int r = 0; r &lt; 10; r++)
            {
              for (int c = 0; c &lt; 10; c++)
              {
                XLCell cell = sheet[r, c];
            	cell.Value = (r+1) * (c+1);
              }
            }
            book.Save(@"c:\temp\test.xls");
            </code>
            Note how the code simply accesses the cells using the indexer. There's no 
            need to create any rows, columns, or cells. The indexer takes care of all 
            that automatically.
            </example>
        </member>
        <member name="M:C1.C1Excel.XLCell.SetValue(System.Object,C1.C1Excel.XLStyle)">
            <summary>
            Sets the <see cref="P:C1.C1Excel.XLCell.Value"/> and <see cref="P:C1.C1Excel.XLCell.Style"/> properties of a cell.
            </summary>
            <param name="value">New cell value.</param>
            <param name="style">New cell style.</param>
            <remarks>
            This method allows you to set the Value and Style properties of a cell
            simultaneously. This can make your code more compact and easier to maintain.
            For example:
            <code>
            // set cell value and style (short version)
            sheet[0,0].SetValue("Hello", styleBold);
            
            // set cell value and style (longer version)
            sheet[0,0].Value = "Hello";
            sheet[0,0].Style = styleBold;
            </code>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Value">
            <summary>
            Gets or sets the value stored in the cell.
            </summary>
            <remarks>
            <para>The value may contain strings, numeric, boolean, <see cref="T:System.DateTime"/>, or 
            null objects. Other types of object can't be saved into Excel files.</para>
            <para>DateTime values are internally converted into doubles, 
            and stored in the sheet as such. The only way to tell the difference 
            between a DateTime value and a double in Excel is by way of the 
            format associated with the cell (<see cref="P:C1.C1Excel.XLStyle.Format"/> property).
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Hyperlink">
            <summary>
            Gets or sets a string that specifies an action to take when the cell
            is clicked.
            </summary>
            <remarks>
            <para>Hyperlinks may contain URLs that when clicked open a browser window and
            navigate to the specified site (for example, "http://www.componentone.com"). They
            may also contain references to files that are launched by the application
            associated with the file type (for example, "readme.doc"). Finally, hyperlinks
            can be used to send e-mails (for example, "mailto:joe@foo.com").</para>
            <para>Each cell may contain a hyperlink and a value. However, if you assign
            a hyperlink to a cell that has no value (<see cref="P:C1.C1Excel.XLCell.Value"/> == null), then
            the hyperlink text is automatically assigned to the cell value as well.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLCell.XLFormula">
            <summary>
            Rudimentary formula support. 
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLCellRange"/> objects on 
            an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLCellRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Contains(C1.C1Excel.XLCellRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.IndexOf(C1.C1Excel.XLCellRange)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLCellRange"/> object in the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Remove(C1.C1Excel.XLCellRange)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object from the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(C1.C1Excel.XLCellRange)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLCellRange"/> object to the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLCellRange"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the cell range.</param>
            <param name="colIndex">Index of the left column in the cell range.</param>
            <param name="rowCount">Number of rows in the cell range.</param>
            <param name="colCount">Number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Insert(System.Int32,C1.C1Excel.XLCellRange)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="cr">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLCellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLCellRange"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            an empty range.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            a specified range.
            </summary>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Bottom column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Intersects(C1.C1Excel.XLCellRange)">
            <summary>
            Determines whether the range intersects another range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.IsEmpty">
            <summary>
            Determines whether the range is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowFrom">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnFrom">
            <summary>
            Gets index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowCount">
            <summary>
            Gets the number of rows in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnCount">
            <summary>
            Gets the number of columns in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowTo">
            <summary>
            Gets or sets the index of the last row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnTo">
            <summary>
            Gets or sets the index of the last column in the range.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLFont">
            <summary>
            XLFont
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStorage">
            <summary>
            C1OleStorage
            wrapper for creating and accessing OLE compound files
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStream">
            <summary>
            C1OleStream
            COleStorage files contain C1OleStream
            </summary>
        </member>
        <member name="T:C1.C1Excel.LockByteStream">
            <summary>
            Class that implements the ILockBytes interface on top of a Stream
            (so we can open storages on streams as well as files)
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueCreator">
            <summary>
            Opaque table creator.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueParser">
            <summary>
            Opaque table analyse.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueRecordList">
            <summary>
            helper class used to store opaque records
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPrintSettings">
            <summary>
            Provides options and settings for printing <see cref="T:C1.C1Excel.XLSheet"/> objects.
            </summary>
            <remarks>
            <para>The settings are applied to each sheet, and are accessible through the
            sheet's <see cref="P:C1.C1Excel.XLSheet.PrintSettings"/> property.</para>
            <para>Note that <see cref="T:C1.C1Excel.C1XLBook"/> does not provide any printing
            services. The settings are used when printing the sheet from Excel.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLPrintSettings"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Header">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            <para>The header string may contain special commands, i.e. placeholders for the page number, 
            current date, or text formatting attributes. Most of these fields are represented by single 
            letters with a leading ampersand ("&amp;").</para>
            <para>The page header is divided into 3 sections: left, center, and right. Each section is 
            introduced by a special command ("&amp;L", "&amp;C", and "&amp;R"). All text and all commands following 
            are part of the selected section.</para>
            <para>The following commands are available:</para>
            <para>&amp;L Start of the left section</para>
            <para>&amp;C Start of the centered section</para>
            <para>&amp;R Start of the right section</para>
            <para>&amp;P Current page number</para>
            <para>&amp;N Page count</para>
            <para>&amp;D Current date</para>
            <para>&amp;T Current time</para>
            <para>&amp;A Sheet name</para>
            <para>&amp;F File name without path</para>
            <para>&amp;Z File path without file name</para>
            <para>&amp;G Picture (file name)</para>
            <para>&amp;B Bold toggle</para>
            <para>&amp;I Italic toggle</para>
            <para>&amp;U Underline toggle</para>
            <para>&amp;E Double underline toggle</para>
            <para>&amp;S Strikeout toggle</para>
            <para>&amp;X Superscript toggle</para>
            <para>&amp;Y Subscript toggle</para>
            <para>&amp;"[fontname]" Set new font</para>
            <para>&amp;"[fontname,fontstyle]" Set new font with specified style. The style is in most cases 
            "Regular", "Bold", "Italic", or "Bold Italic".</para>
            &amp;[fontheight] Set font height in points.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Footer">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            The footer string has the same structure and embedded commands as the header string. 
            See the <see cref="P:C1.C1Excel.XLPrintSettings.Header"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterHorizontal">
            <summary>
            Gets or sets whether the sheet should be centered horizontally on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterVertical">
            <summary>
            Gets or sets whether the sheet should be centered vertically on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginLeft">
            <summary>
            Gets or sets the left margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginRight">
            <summary>
            Gets or sets the right margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginTop">
            <summary>
            Gets or sets the top margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginBottom">
            <summary>
            Gets or sets the bottom margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginHeader">
            <summary>
            Gets or sets the header margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginFooter">
            <summary>
            Gets or sets the footer margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintHeaders">
            <summary>
            Gets or sets whether row and column headers (the areas with row numbers and column letters) will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintGridlines">
            <summary>
            Gets or sets whether the gridlines will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PaperKind">
            <summary>
            Gets or sets the paper size to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.ScalingFactor">
            <summary>
            Gets or sets the scaling factor (in percent) to use when printing the sheet.
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property automatically sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/>
            property to false, causing C1Excel to use the selected scaling factor and to ignore the
            value of the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.AutoScale">
            <summary>
            Gets or sets the scaling mode used for printed output.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to true, then the printed sheet will be 
            automatically scaled to fit the number of pages specified by the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> 
            and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.</para>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to false, then the printed sheet will be 
            scaled according to the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.StartPage">
            <summary>
            Gets or sets the initial page number to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesAcross">
            <summary>
            Fit the sheet to this number of pages across (0 means use as many as needed).
            </summary>
            <remarks>
            Causes C1Excel to select "fit to page" print mode, ignoring the value of the 
            <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesDown">
            <summary>
            Fit the sheet to this number of pages down (0 means use as many as needed).
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintPagesInRows">
            <summary>
            Gets or sets whether to print the pages in rows (across first) or in columns (down first).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Landscape">
            <summary>
            Gets or sets whether to print the sheet in landscape mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.BlackAndWhite">
            <summary>
            Gets or sets whether to print the sheet in monochrome mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.DraftQuality">
            <summary>
            Gets or sets whether to print the sheet in draft quality mode.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLRow"/> objects that represent the 
            individual rows in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            The collection has methods for counting, enumerating, adding, and removing 
            rows from the collection.
            </remarks>
            <example>
            Note that you can create rows automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book = new C1XLBook();
            sheet = book.Sheets[0];
            XLCell cell   = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLRow"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add(C1.C1Excel.XLRow)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLRow"/> object to the collection.
            </summary>
            <param name="row">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="row"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Contains(C1.C1Excel.XLRow)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLRow"/> is a member of the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.IndexOf(C1.C1Excel.XLRow)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLRow"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32,C1.C1Excel.XLRow)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLRow"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="row">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLRow"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 65,536. This is a limitation imposed by Excel.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Remove(C1.C1Excel.XLRow)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLRow"/> object from the collection.
            </summary>
            <param name="row">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLRow"/> object at the specified index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLRow"/> object at the
            specified position if necessary. It never returns null.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows in the collection.
            </summary>
            <remarks>
            Frozen rows are displayed on the top of the sheet and do not scroll vertically.
            They are useful for displaying column headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLColumn"/> objects that represent the 
            individual columns in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>The collection has methods for counting, enumerating, adding, and removing 
            columns from the collection.</para>
            <para>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.</para>
            </remarks>
            <example>
            Note that you can create columns automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book  = new C1XLBook();
            XLSheet  sheet = book.Sheets[0];
            XLCell   cell  = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLColumn"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add(C1.C1Excel.XLColumn)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLColumn"/> object to the collection.
            </summary>
            <param name="col">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="col"/> parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Contains(C1.C1Excel.XLColumn)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLColumn"/> is a member of the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.IndexOf(C1.C1Excel.XLColumn)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLColumn"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32,C1.C1Excel.XLColumn)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLColumn"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="col">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLColumn"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 256. This is a limitation imposed by Excel.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Remove(C1.C1Excel.XLColumn)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLColumn"/> object from the collection.
            </summary>
            <param name="col">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLColumn"/> object at the specified
            index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLColumn"/> object at the
            specified position if necessary. It never returns null.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Frozen">
            <summary>
            Gets or sets the number of frozen columns in the collection.
            </summary>
            <remarks>
            Frozen columns are displayed on the right side of the sheet and do not scroll horizontally. 
            They are useful for displaying row headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLRow">
            <summary>
            Represents a row in a worksheet, provides properties for setting 
            the row's height, style, and visibility.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRow.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLRow"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Visible">
            <summary>
            Gets or sets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this row.
            </summary>
            <example>
            The code below inserts forced page breaks at every 10th row on a sheet, and
            clears the breaks at all other rows.
            <code>
            C1.C1Excel.XLSheet sheet = c1XLBook1.Sheets[0];
            for (int r = 0; r &lt; sheet.Rows.Count; r++)
            {
                sheet.Rows[r].PageBreak = (r &gt; 0 &amp;&amp; r % 10 == 0);
            }
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLRow.Height">
            <summary>
            Gets or sets the height of the row, in twips.
            </summary>
            <remarks>
            <para>A value of -1 causes the row to be displayed using the sheet's 
            <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRow.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the row.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLColumn">
            <summary>
            Represents a column in a worksheet, provides properties for setting 
            the column's width, style, and visibility.
            </summary>
            <remarks>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumn.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLColumn"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Visible">
            <summary>
            Gets or sets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Width">
            <summary>
            Gets or sets the width of the column, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the column should be displayed using
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheetCollection">
            <summary>
            Collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent the individual 
            worksheets in a <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            Provides methods and properties for counting, enumerating, adding, and removing sheets from 
            the workbook.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> property to get the 
            book's sheet collection. For example, the code below gets a reference 
            to the first sheet on the book, then prints the sheet's name:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine(sheet.Name);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and appends it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(C1.C1Excel.XLSheet)">
            <summary>
            Appends an existing <see cref="T:C1.C1Excel.XLSheet"/> to the collection.
            </summary>
            <param name="sheet">The object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and inserts it at a specific 
            position in the collection.
            </summary>
            <param name="index">Index where the new <see cref="T:C1.C1Excel.XLSheet"/> will be added.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(C1.C1Excel.XLSheet)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
            <param name="sheet">The object to look for in the collection.</param>
            <returns>True if the collection contains the object, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an <see cref="T:C1.C1Excel.XLSheet"/> object
            with a given name.
            </summary>
            <param name="sheetName">The name of the sheet to look for (case-insensitive).</param>
            <returns>True if the collection contains an <see cref="T:C1.C1Excel.XLSheet"/>, with the
            given <paramref name="sheetName"/>, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(C1.C1Excel.XLSheet)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLSheet"/> in the collection.
            </summary>
            <param name="sheet">The object to look for.</param>
            <returns>The index of the object in the collection, or -1 if the object is not
            a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(C1.C1Excel.XLSheet)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLSheet"/> from the collection.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> at a specific index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> with a given name and appends it to the collection.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.C1Excel.XLSheet"/>.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> with the specified name from the collection.
            </summary>
            <param name="name">Name of the sheet to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32,C1.C1Excel.XLSheet)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLSheet"/> object into the collection at the specified position.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(System.String)">
            <summary>
            Gets the position of the sheet with the specified name in the collection.
            </summary>
            <param name="name">Name of the object to look for (case-insensitive).</param>
            <returns>The index of the sheet in the collection, or -1 if the sheet can't be 
            found in the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLSheet"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the sheet that is selected when the <see cref="T:C1.C1Excel.C1XLBook"/> 
            file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> at a given position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> with the given name (case-insensitive).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheet">
            <summary>
            Represents individual worksheets in an Excel workbook (<see cref="T:C1.C1Excel.C1XLBook"/>).
            </summary>
            <remarks>
            Provides indexers to get or set the value of individual cells (<see cref="T:C1.C1Excel.XLCell"/>) 
            and to access the <see cref="P:C1.C1Excel.XLSheet.Rows"/> and <see cref="P:C1.C1Excel.XLSheet.Columns"/> on the sheet.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer to get an individual 
            sheet. For example, the code below gets a reference to the first sheet on the book, then 
            prints the number of rows and columns on the sheet:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine("Sheet has {0} rows and {1} columns",
              sheet.Rows.Count, sheet.Columns.Count);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a reference to a cell at the specified coordinates, or null of the cell doesn't exist.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>A reference to the <see cref="T:C1.C1Excel.XLCell"/> object at the specified coordinates, or null if there
            is no cell at the specified position.</returns>
            <remarks>
            <para>To populate new sheets, use the <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer instead.</para>
            <para>The indexer will automatically create new rows, columns, and cells as needed, and will never return null.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Clone">
            <summary>
            Creates a copy of this sheet.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLSheet"/> object with the same contents and formatting as this sheet.</returns>
            <remarks>
            <para>After cloning a sheet, you must rename it and then add it to the book (duplicate names are not
            allowed).</para>
            <para>This method is useful for applications that generate books with a large number of similar sheets.</para>
            </remarks>
            <example>
            The code below loads a book that contains a template sheet, creates 12 copies of that sheet, removes the
            template sheet, then saves the file with a new name.
            <code>
            // load book with template sheet
            _c1xl.Load(@"c:\temp\template.xls");
            
            // create 12 copies of the template sheet
            XLSheet templateSheet = _c1xl.Sheets["Template"];
            for (int month = 1; month &lt;= 12; month++)
            {
              XLSheet newSheet = templateSheet.Clone();
              newSheet.Name = month.ToString(); // rename clone
              newSheet[0,0].Value = month;      // make changes
              _c1xl.Sheets.Add(newSheet);       // add clone to book
            }
            
            // remove the template sheet and save with new name
            _c1xl.Sheets.Remove("Template");
            _c1xl.Save(@"C:\temp\expense_report.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>When you open a workbook in Excel, the sheet names appear in the tabs 
            below the work area.</para>
            <para>Sheet names can be used as indexers, so they should be unique.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Rows">
            <summary>
            Gets a reference to sheet's row collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Columns">
            <summary>
            Gets a reference to sheet's column collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.MergedCells">
            <summary>
            Gets a <see cref="T:C1.C1Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are merged on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each merged range is represented by a <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the height of individual rows using the <see cref="T:C1.C1Excel.XLRow"/> class. 
            Any rows that do not have a custom height assigned to them will be displayed using 
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/> method 
            in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> 
            method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the width of individual rows using the <see cref="T:C1.C1Excel.XLColumn"/>
            class. Any columns that do not have a custom width assigned to them will 
            be displayed using the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/> property is expressed in twips 
            (1/20th of a point), rather than pixels. This allows sheets to maintain 
            their aspect regardless of the resolution of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            method in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the
            <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at a specified position on the sheet, 
            creating a new cell if necessary.
            </summary>
            <remarks>
            <para>If the specified cell doesn't exist when the indexer is invoked, the sheet will be expanded and 
            a new cell will be created, then returned. This makes it easy to create and populate sheets.</para>
            <para>If you want to determine whether a specific cell has been defined, use the <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method instead.</para>
            <para>The indexer is generally more useful when creating and populating sheets. The <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method is more useful when loading existing sheets.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Locked">
            <summary>
            Gets or sets a value that determines if the sheet is locked for editing.
            </summary>
            <remarks>
            <para>Sheets and styles can be locked. By default, sheets are unlocked and styles are locked. 
            This combination allows users to edit the cells in Excel.</para>
            <para>To protect a cell against editing in Excel, both the sheet and the cell style must have the 
            <see cref="P:C1.C1Excel.XLSheet.Locked"/> property set to true.</para>
            <para>To lock most cells on a sheet and allow editing of only a few cells, lock the sheet, then 
            create an unlocked style and assign it to the cells that should be editable.</para>
            </remarks>
            <example>
            The code below creates a data entry sheet. Most cells are locked, except for the ones where the user 
            is supposed to enter data.
            <code>
            // start with a single locked sheet
            _c1xl.Clear();
            XLSheet sheet = _c1xl.Sheets[0];
            sheet.Locked = true;
            
            // create an unlocked style
            XLStyle dataEntry = new XLStyle(_c1xl);
            dataEntry.Locked = false;
            dataEntry.BackColor = Color.Beige;
            
            // create data entry titles
            sheet[0,0].Value = "Name:";
            sheet[1,0].Value = "Address:";
            sheet[2,0].Value = "Phone #:";
            
            create data entry cells (unlocked)
            sheet[0,1].Style = dataEntry;
            sheet[1,1].Style = dataEntry;
            sheet[2,1].Style = dataEntry;
            
            // save the book
            _c1xl.Save(@"c:\temp\Protected.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Visible">
            <summary>
            Gets or sets the sheet's visibility.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowGridLines">
            <summary>
            Gets or sets whether Excel should show the grid lines when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowHeaders">
            <summary>
            Gets or sets whether Excel should show the row and column headers when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.GridColor">
            <summary>
            Gets or sets the color used to display gridlines.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the grid lines using the default color.</para>
            <para>To hide the grid lines, set the <see cref="P:C1.C1Excel.XLSheet.ShowGridLines"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.PrintSettings">
            <summary>
            Gets or sets an <see cref="T:C1.C1Excel.XLPrintSettings"/> object that controls how the
            sheet is printed.
            </summary>
            <example>
            The code below creates a header for the sheet and sets the orientation to landscape:
            <code>
            XLPrintSettings pp = sheet.PrintSettings();
            pp.Landscape = true;
            pp.Header = "&amp;LLeft Header&amp;CCenter Header&amp;RRight Header";
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Shapes">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.ShapeCollection"/> for the sheet.
            </summary>
        </member>
        <member name="T:C1.C1Excel.SharedStringTable">
            <summary>
            SharedStringTable is an ArrayList that contains a Hashtable helper.
            
            The Hashtable contains pairs (string, index) and is used for two purposes:
            
            1) To prevent the addition of duplicate values to the list. The Add method
               looks up values in the hashtable and only adds new values.
            
            2) To provide a quick IndexOf override. The index is retrieved from the
               Hashtable instead of using the slow default linear search.
               
            This new implementation reduces the time needed to save a 10,000 x 20 sheet
            from 650 seconds down to 16, essentially the same amount of time needed
            to save numbers.
            
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignHorzEnum">
            <summary>
            Specifies how to align cell content horizontally within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.General">
            <summary>
            Align strings to the left, numbers to the right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Left">
            <summary>
            Align to cell left.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Right">
            <summary>
            Align to cell right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Fill">
            <summary>
            Fill cell, repeating content as necessary.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Justify">
            <summary>
            Justify content horizontally to span the whole cell width.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Selection">
            <summary>
            Align to selection center (may span multiple cells).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignVertEnum">
            <summary>
            Specifies how to align cell content vertically within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Top">
            <summary>
            Align to cell top.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Bottom">
            <summary>
            Align to cell bottom.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Justify">
            <summary>
            Justify content vertically to span the whole cell height.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLDiagonalFlags">
            <summary>
            Specifies the type of diagonal line to draw across the cells.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.None">
            <summary>
            No diagonal.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Forward">
            <summary>
            Forward diagonal (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Backward">
            <summary>
            Backward diagonal (\).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLLineStyleEnum">
            <summary>
            Specifies the line style used for the cell borders.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thin">
            <summary>
            Thin.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thick">
            <summary>
            Thick.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Hair">
            <summary>
            Hair (one pixel).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashed">
            <summary>
            Medium dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotted">
            <summary>
            Thin dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotted">
            <summary>
            Medium dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotDotted">
            <summary>
            Thin dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotDotted">
            <summary>
            Medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.SlantedMediumDashDotted">
            <summary>
            Slanted dash-dot.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPatternEnum">
            <summary>
            Specifies the pattern used for To fill the cell background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.None">
            <summary>
            No pattern (transparent).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Solid">
            <summary>
            Solid background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray50">
            <summary>
            50% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray75">
            <summary>
            75% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray25">
            <summary>
            25% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.HorizontalStripe">
            <summary>
            Horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.VerticalStripe">
            <summary>
            Vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalStripe">
            <summary>
            Diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinVerticalStripe">
            <summary>
            Thin vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray12">
            <summary>
            12% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray06">
            <summary>
            6% dotted pattern.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLStyle">
            <summary>
            Contains style elements used to define the appearance of the cells.
            </summary>
            <remarks>
            <para>Each <see cref="T:C1.C1Excel.XLStyle"/> object may define one or more of the following 
            elements: font, format, background color, background pattern, foreground color, 
            alignment, text direction, and word wrapping.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell styles 
            and merges the style elements defined in each one in order to determine how 
            the cell should be displayed. The precedence of the styles is: (1) cell, 
            (2) row, (3) column, (4) default style.</para>
            <para>Every <see cref="T:C1.C1Excel.XLStyle"/> belongs to a <see cref="T:C1.C1Excel.C1XLBook"/>, and may 
            be assigned to one or more <see cref="T:C1.C1Excel.XLRow"/>, <see cref="T:C1.C1Excel.XLColumn"/>, and 
            <see cref="T:C1.C1Excel.XLCell"/> objects through their <see cref="P:C1.C1Excel.XLCell.Style"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.#ctor(C1.C1Excel.C1XLBook)">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Excel.XLStyle"/> and adds it to the
            specified <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <param name="book">Parent <see cref="T:C1.C1Excel.C1XLBook"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)">
            <summary>
            Sets the border style for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="style">Line style used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)">
            <summary>
            Sets the border color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="color">Color used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <param name="dataType">Data type to be formatted.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)">
            <summary>
            Converts a Excel-style format string into a .NET-style format string.
            </summary>
            <param name="fmt">Excel-style format to convert.</param>
            <returns>A .NET-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.C1Excel.XLStyle"/> objects are equivalent.
            </summary>
            <param name="obj"><see cref="T:C1.C1Excel.XLStyle"/> object to compare to the current instance.</param>
            <returns>True if the styles are equivalent, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.GetHashCode">
            <summary>
            Serves as a hash function suitable for use in hashing algorithms and 
            data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.C1Excel.XLStyle"/>.</returns>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Font">
            <summary>
            Gets or sets the font for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.Font"/> property to null in order to suppress 
            this style element and use the default font instead. The default font is 
            determined by the book's <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.ForeColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default foreground color instead (black).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.BackColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default background color instead (white).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackPattern">
            <summary>
            Gets or sets the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.PatternColor">
            <summary>
            Gets or sets the color of the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Format">
            <summary>
            Gets or sets the format associated with this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Excel uses formats similar, but not identical to .NET. Refer
            to the Excel documentation for details on how to create format strings.</para>
            <para>You can use the <see cref="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)"/> and <see cref="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)"/>
            methods to convert common Excel format strings to and from .NET format strings.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignHorz"/> property to <see cref="F:C1.C1Excel.XLAlignHorzEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignHorzEnum.General"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignVert"/> property to <see cref="F:C1.C1Excel.XLAlignVertEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignVertEnum.Bottom"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.WordWrap">
            <summary>
            Gets or sets whether this <see cref="T:C1.C1Excel.XLStyle"/> causes cell contents to wrap.
            </summary>
            <remarks>
            Cells that do not wrap will spill onto adjacent cells, and will be kept on 
            a single line even if they contain line-break characters.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Rotation">
            <summary>
            Gets or sets the rotation for this <see cref="T:C1.C1Excel.XLStyle"/>, in degrees.
            </summary>
            <remarks>
            <para>This property should be set to values between 0 and 180, or 255, 
            as explained below:</para>
            <para>Zero means no rotation.</para>
            <para>1-90 means 1 to 90 degrees counter-clockwise (90 causes text to be 
            displayed in the vertical direction going up the cell).</para>
            <para>91-180 means 1 to 90 degrees clockwise (180 causes text to be 
            displayed in the vertical direction going down the cell).</para>
            <para>255 causes letters are stacked top to bottom and not rotated.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Locked">
            <summary>
            Gets or sets whether the cell should be locked for editing when the <see cref="T:C1.C1Excel.XLSheet"/>
            is protected.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderLeft">
            <summary>
            Gets or sets the line style used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderRight">
            <summary>
            Gets or sets the line style used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderTop">
            <summary>
            Gets or sets the line style used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderBottom">
            <summary>
            Gets or sets the line style used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorLeft">
            <summary>
            Gets or sets the color used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorRight">
            <summary>
            Gets or sets the color used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorTop">
            <summary>
            Gets or sets the color used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorBottom">
            <summary>
            Gets or sets the color used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Diagonal">
            <summary>
            Gets or sets which diagonal lines to display (none, forward, backward).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalStyle">
            <summary>
            Gets or sets the line style used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalColor">
            <summary>
            Gets or sets the color used to draw the diagonal lines.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.FontSubSet">
            <summary>
            Summary description for FontSubSet.
            </summary>
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.OutputBuffer">
            get output font buffer for used glyphs only.
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.IsBold">
            get or set used glyphs for this font.
        </member>
        <member name="T:C1.C1Pdf.FontSubSet.BigEndianBinaryReader">
            <summary>
            TTF files are stored in big-endian format, we need special 
            readers and writers
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotationCollection">
            <summary>
            PdfAnnotationCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotation">
            <summary>
            PdfAnnotation
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfArabic">
            <summary>
            Class for support Arabic character shaping.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Paperclip">
            <summary>
            Paper Clip attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.PushPin">
            <summary>
            Pushpin attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Tag">
            <summary>
            Tag attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Graph">
            <summary>
            Graph attachment icon.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAttachment">
            <summary>
            Summary description for PdfAttachment.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmarkCollection">
            <summary>
            PdfBookmarkCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmark">
            <summary>
            PdfBookmark
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Clip">
            <summary>
            Image is clipped to the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Stretch">
            <summary>
            Image is stretched to fill the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Scale">
            <summary>
            Image is scaled to fill as much of the rectangle as possible,
            while keeping the original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Low">
            <summary>
            Low quality, small file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Medium">
            <summary>
            Medium quality, medium file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Default">
            <summary>
            High quality, medium/large file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.High">
            <summary>
            Highest quality, largest file size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocumentBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Clear">
            <summary>
            Restores the document to its initial state.
            </summary>
            <remarks>
            All current content and security settings are discarded, a single empty page is created, and 
            the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property is set to zero.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.NewPage">
            <summary>
            Starts a new page.
            </summary>
            <remarks>
            Adds a blank page to the document and sets the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property 
            to make it the currently active page.
            <para>The size of the new page is defined by the value of the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            <para>If you want the new page to have a different size than the rest of the document, 
            create the new page first, then set the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.String)">
            <summary>
            Saves the Pdf document to a file.
            </summary>
            <param name="fileName">Name of the Pdf file to create.</param>
            <remarks>
            Saving the Pdf document to a file requires that the file be available 
            for writing. If the file already exists and is in use by an application 
            (such as the Adobe Acrobat Reader), the method will throw an exception.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the Pdf document to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object to use for saving the document.</param>
            <remarks>
            Saving the Pdf document to a <see cref="T:System.IO.Stream"/> object is often used in Web 
            scenarios, when you are creating a Response object or storing the document in the 
            a cache, and don't want to create temporary files.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.BeginPathInternal">
            <summary>
            For internal use only. Starts a new path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPathInternal">
            <summary>
            For internal use only. Ends the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPathInternal">
            <summary>
            For internal use only. Starts adding elements to the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RestartPathInternal">
            <summary>
            For internal use only. Begin a new sub-path by moving the current point to coordinates (x, y).
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CloseFigureInternal">
            <summary>
            For internal use only. Fills/strokes the current path at closed figure.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.FillStrokeInternal(System.Boolean,System.Boolean,System.Boolean,System.Drawing.Drawing2D.FillMode)">
            <summary>
            For internal use only. Fills/strokes the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.UpdateResources(System.Object)">
            <summary>
            For internal use only. Updates resources of specified type.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPage">
            <summary>
            For internal use only. Closes page stream, clears page pointer.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPage">
            <summary>
            For internal use only. Adds a page to the page collection, opens stream writer on the new page.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartOverlay(System.Int32)">
            <summary>
            For internal use only. Reopens a page for additional output.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font)">
            <summary>
            For internal use only. Sets the current font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize">
            <summary>
            For internal use only. Gets the current font size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize(System.Drawing.Font)">
            <summary>
            For internal use only. Gets the size of a given font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetPen(System.Drawing.Pen)">
            <summary>
            For internal use only. Sets the current pen.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetBrush(System.Drawing.Brush)">
            <summary>
            For internal use only. Sets the current brush.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            Find best alternative font for font and text. 
            </summary>
            <param name="pdfFont"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontBlocks(System.String,System.Int32[])">
            <summary>
            Get array (part of text, font, kerns of part of text).
            </summary>
            <param name="text"></param>
            <param name="kerns"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean)">
            <summary>
            For internal use only. Output text to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean,System.Int32[],System.Single)">
            <summary>
            For internal use only. Output text with kerning information to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MoveTo(System.Single,System.Single)">
            <summary>
            For internal use only. Moves cursor to a specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.LineTo(System.Single,System.Single)">
            <summary>
            For internal use only. Draws a line from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            For internal use only. Draws a curve from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Rectangle(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws a rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RoundRect(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            For internal use only. Draws a rounded rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Ellipse(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws an ellipse.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Polygon(System.Drawing.PointF[])">
            <summary>
            For internal use only. Draws a polygon.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetStreamPosition">
            <summary>
            For internal use only. Gets the Position on the page stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetCurrentID">
            <summary>
            For internal use only. Gets the ID of the last object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetNewID">
            <summary>
            For internal use only. Increments the ID for the next object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Write(System.String,System.Object[])">
            <summary>
            Writes raw content into the Pdf stream for the current page.
            </summary>
            <param name="format">Format string, as in <see cref="M:System.String.Format(System.String,System.Object)"/>.</param>
            <param name="args">Array of objects to write using <paramref name="format"/>.</param>
            <remarks>
            This is a low-level method that allows you to insert Pdf commands directly 
            into the page stream. It is intended for use by derived classes and requires 
            knowledge of the Pdf document structure and syntax.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Normalize(System.Drawing.RectangleF)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <remarks>The new document contains a single empty page, and the
            default page size is set to Letter (8.5 x 11 inches).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <param name="landscape">The default paper orientation for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            and <paramref>landscape</paramref> parameters.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="pageSizeInPoints">The default paper size for the document, in points.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>pageSizeInPoints</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">Width of the rectangle to fill.</param>
            <param name="height">Height of the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draws a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fills the interior of a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="x1">x-coordinate of the first point.</param>
            <param name="y1">y-coordinate of the first point.</param>
            <param name="x2">x-coordinate of the second point.</param>
            <param name="y2">y-coordinate of the second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line segments.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points to connect.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode"/> parameter that determines how to handle overlapping areas within the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a Bezier spline defined by four <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bezier spline.</param>
            <param name="start"><see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the curve.</param>
            <param name="ctl1"><see cref="T:System.Drawing.PointF"/> structure that represents the first control point for the curve.</param>
            <param name="ctl2"><see cref="T:System.Drawing.PointF"/> structure that represents the second control point for the curve.</param>
            <param name="end"><see cref="T:System.Drawing.PointF"/> structure that represents the ending point of the curve.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of Bezier splines from an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bezier splines.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points that determine the curve.</param>
            <remarks>
            <para>The first spline requires four points, and each additional spline requires
            three additional points (it starts from the last point in the previous spline). 
            Therefore, the <paramref name="points"/> array must contain at least four points,
            and the total length minus one must be a multiple of three.</para>
            <para>All coordinates are expressed in points, measured from the upper-left corner of the page.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the arc.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> 
            object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <param name="sf">A <see cref="T:System.Drawing.StringFormat"/> object that determines whether word wrapping is allowed.</param>
            <returns>The size of the string expressed in points.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload wraps the string to prevent any lines from getting
            wider than the <paramref name="width"/> parameter. The value returned contains
            the given width and the height needed to render the entire string.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font"/> object. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload returns the width and height of the string without wrapping.
            Unless the <paramref name="text"/> parameter contains line break characters, the 
            height returned corresponds to the font height.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <param name="firstChar">Index of the first character that will be rendered.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
            <remarks>
            <para>The <paramref name="sf"/> contains properties that specify formatting options. Use the
            <see cref="P:System.Drawing.StringFormat.Alignment"/> property to specify horizontal alignment and the
            <see cref="P:System.Drawing.StringFormat.LineAlignment"/> property to specify vertical alignment.</para>
            <para>Use the <see cref="P:System.Drawing.StringFormat.FormatFlags"/> property to specify clipping and wrapping.</para>
            <para>To render text in the vertical direction, use the <see cref="F:System.Drawing.StringFormatFlags.DirectionVertical"/>.
            By itself, this flag will cause text to render from the bottom to the top of the rectangle.
            Combined with the <see cref="F:System.Drawing.StringFormatFlags.DirectionRightToLeft"/> flags, it will cause text to render from
            the top to the bottom of the rectangle.</para>
            <para>The <b>DrawString</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page.</para>
            </remarks>
            <example>
            The code below renders a long string into several pages, using the return value
            from the <b>DrawString</b> method to determine where to continue printing.
            <code>
            // render string spanning multiple pages
            for (int start = 0; start &lt; int.MaxValue;)
            {
            	// render as much as will fit into the rectangle
            	start = _c1pdf.DrawString(text, font, Brushes.Black, rcPage, start);
            		
            	// move on to the next page
            	_c1pdf.NewPage();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="firstChar">Index of the first character that will be rendered.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, 
            in points from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <remarks>
            This overload renders strings aligned to the top left corner of the specified rectangle,
            wrapping text as needed within the rectangle, without clipping, and in the horizontal
            direction. To change any of these defaults, use the overload that allows you to specify
            a <see cref="T:System.Drawing.StringFormat"/> parameter.
            </remarks>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            adjusting the image size as specified by the <paramref name="align"/> and 
            <paramref name="mode"/> parameters.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="align"><see cref="T:System.Drawing.ContentAlignment"/> value that specifies how the image should be aligned within the rectangle.</param>
            <param name="mode"><see cref="T:C1.C1Pdf.ImageSizeModeEnum"/> value that specifies how the image should be sized to fit the rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            stretching it to fit the destination rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <remarks>
            The <b>DrawImage</b> method can be used to render bitmaps and metafiles. When used with
            metafiles, it enumerates the drawing commands in the metafile and translates them into low-level
            drawing primitives. This results in resolution-independent images.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            clipping the output to the given clipping rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rcImage"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="rcClip"><see cref="T:System.Drawing.RectangleF"/> structure that specifies a clipping rectangle on the page. No part of the image is drawn outside the clipping rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes
            Rtf (Rich Text Format) strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>For details, see the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font)">
            <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font"/> object.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <returns>The size of the string expressed in points.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">Rtf string to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left 
            corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>There are two types of Rtf strings:</para>
            <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox"/> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are not used.</para>
            <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are used
            to build the Rtf header automatically.</para>
            <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. To do this, use the overload that
            takes the starting character in the text as a parameter.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects,
            starting at a given offset within the string.
            </summary>
            <param name="text">Rtf string to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="firstChar">Index of the first character to draw (usually the return value of a previous call to <b>DrawStringRtf</b>).</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>There are two types of Rtf strings:</para>
            <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox"/> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are not used.</para>
            <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are used
            to build the Rtf header automatically.</para>
            <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. Note that this value is not an index 
            into the raw Rtf input, but into the text represented by the Rtf. See example below.</para>
            </remarks>
            <example>
            The code below renders a long string into several pages, using the return value
            from the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method to determine where to continue printing.
            <code>
            // calculate page rectangle
            RectangleF rcPage = _c1pdf.PageRectangle;
            rcPage.Inflate(-72, -72);
            
            // get Rtf to render
            string text = richTextBox1.Rtf;
            
            // print the Rtf string spanning multiple pages
            _c1pdf.Clear();
            for (int start = 0; start &lt; int.MaxValue; )
            {
                if (start &gt; 0) _c1pdf.NewPage();
                start = _c1pdf.DrawStringRtf(text, Font, 
                       Brushes.Black, rcPage, start);
            }
            
            // show the result
            string fn = @"c:\temp\test\rtf.pdf";
            _c1pdf.Save(fn);
            System.Diagnostics.Process.Start(fn);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the current page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="y">Position on the current page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the specified page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="page">Index of the page that contains the bookmark.</param>
            <param name="y">Position on the specified page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the current page.
            </summary>
            <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the document.
            </summary>
            <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
            <param name="page">Index of the page that contains the hyperlink</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
            <remarks>
            <para>Hyperlinks can be external (Urls and file names) or local (other locations within the same document).</para>
            <para>Local links are useful when you want to implement some type of cross-referencing within the document, such 
            as a table of contents or an index. Local links are identical to regular hyperlinks, except for two things:</para>
            <para>1) The <paramref name="url"/> parameter must start with a "#", and </para>
            <para>2) You must specify the target location for the link using the <see cref="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)"/> method.</para>
            <para>Note that the <b>AddLink</b> method does not add any visible content to the page, so you will 
            usually need another command along with <b>AddLink</b> to specify some text or an image that the user 
            can see, as the example below demonstrates.</para>
            </remarks>
            <example>
            The code below adds a string that says "Visit ComponentOne" and a link that takes the user to the ComponentOne home page:
            <code>
            RectangleF rc = new RectangleF(50, 50, 100, 15);
            Font font = new Font("Arial", 10, FontStyle.Underline);
            _c1pdf.AddLink("http://www.componentone.com", rc);
            _c1pdf.DrawString("Visit ComponentOne", font, Brushes.Blue, rc);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the current page.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the document.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="page">Index of the page that will contain the hyperlink target.</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,System.Int32,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the document.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="page">Index of the page that contains the attachment.</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
            <remarks>
            When the user moves the mouse over an area of the page that contains an attachment, 
            the mouse pointer and tool tip change to indicate that the user can retrieve the attachment. 
            The user can right-click the attachment area to open or save the attachment.
            </remarks>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.PageSize">
            <summary>
            Gets or sets the default page size for the document (in points).
            </summary>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.CurrentPage">
            <summary>
            Gets or sets the index of the current page within the document.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property determines which page of the document should 
            receive the output from the methods that generate content (e.g. <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>).</para>
            <para>The value is an integer ranging from -1 (no active page) to <see cref="P:C1.C1Pdf.C1PdfDocumentBase.Pages"/>.<see cref="P:System.Collections.ArrayList.Count"/>-1.</para>
            <para>You rarely have to use the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property while creating a document. 
            When a <see cref="T:C1.C1Pdf.C1PdfDocument"/> object is created, a blank page is automatically added 
            and becomes the current page, so you can immediately start adding content to it.
            When the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method is invoked, a new page is added to the document 
            and becomes the current page.</para>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property is useful when you want to reopen pages that 
            have already been generated and add content to them (for example, page headers and footers).</para>
            </remarks>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.None">
            <summary>
            No compression (useful for debugging).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestSpeed">
            <summary>
            Low compression, fastest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestCompression">
            <summary>
            Highest compression, slowest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.Default">
            <summary>
            High compression, fast save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Standard">
            <summary>
            Use only standard Pdf fonts (Helvetica, Times, Symbol).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.TrueType">
            <summary>
            Use TrueType fonts, no embedding (viewer must have fonts installed).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Embedded">
            <summary>
            Use embedded TrueType fonts.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.CurrentEncoding">
            <summary>
            CurrentEncoding
            get encoding used for entry names and comments
            NOTE: this is culture-dependent, which seems like a terrible idea
            but that is apparently what works for the Japanese...
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfDocumentInfo.CreationDate">
            <summary>
            Gets or sets the creation date and time of the Pdf document.
            </summary>
            <remarks>
            <para>The default value for this property is the <b>DateTime.MinValue</b>, which
            causes <see cref="T:C1.C1Pdf.C1PdfDocument"/> to use the date and time when the document
            is saved as the creation date.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Pdf.PdfFontCollection">
            <summary>
            PdfFontCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFont">
            <summary>
            PdfFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFontEUDC">
            <summary>
            PdfEUDCFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageCollection">
            <summary>
            PdfImageCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImage">
            <summary>
            PdfImage
            store an image to allow reuse, write it out to Pdf format
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB">
            <summary>
            Summary description for PdfImageDIB.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB.BitmapInfo">
            <summary>
            BitmapInfo
            reads a BITMAPINFOHEADER structure, provides a few utilities
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfLink">
            <summary>
            PdfLink
            a link to an external document (URI) or to a location within
            this document (PdfTarget).
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfTarget">
            <summary>
            PdfTarget
            target areas for internal links.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter">
            <summary>
            Summary description for PdfMetafile.
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase">
            <summary>
            Abstract class to enumerate metafiles and interpret commands into simpler calls.
            Used as a base class for converting metafiles into pdf, xls, rtf, etc.
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase.MetaFont">
            data wrapper for LOGFONT
        </member>
        <member name="M:C1.Util.MetafileConverterBase.MetaFont.op_Implicit(C1.Util.MetafileConverterBase.MetaFont)~System.Drawing.Font">
            <summary>
            Convert implicitly to GDI+ font.
            </summary>
            <param name="mf">The mate font object.</param>
            <returns>GDI+ approximate font for meta font.</returns>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.Font">
            <summary>
            Get GDI+ aproximate font for this meta font. 
            </summary>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.FontAngle">
            <summary>
            Get angle for this meta font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfMetafileConverter.IsCJK(System.String)">
            <summary>
            Is CJK (Chinese, Japanese, and Korean) of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is CJK, otherwise false.</returns>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter.Clipper">
            <summary>
            Clipper
            Relies on owner's _clipRect. Implements IDisposable to allow this pattern:
            using (new Clipper(this))		// ctor starts clipping
            {
            	// draw clipped stuff
            }								// implicit Dispose ends clipping
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObjectCollection">
            <summary>
            PdfObjectCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObject">
            <summary>
            PdfObject
            simple class used to manage unique object IDs and the position
            of each object in the output stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(C1.C1Pdf.PdfPage)">
            <summary>
            Adds a page to the document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <returns>The index of the new page in the document.</returns>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,C1.C1Pdf.PdfPage)">
            <summary>
            Inserts a page at a specific position in the document.
            </summary>
            <param name="index">Position where the new page will be inserted in the document.</param>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(C1.C1Pdf.PdfPage)">
            <summary>
            Removes a page from a document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page at a specific position from the document.
            </summary>
            <param name="index">Index of the page to be removed from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"/> to the end of the document.
            </summary>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of an <see cref="T:System.Collections.ICollection"/> at a specified position 
            in the document.
            </summary>
            <param name="index">Position where the new pages will be inserted.</param>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of pages from the document.
            </summary>
            <param name="index">Index of the first page to remove.</param>
            <param name="count">Number of pages to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> and adds it to the end of the document.
            </summary>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> 
            property of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the 
            <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the 
            <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="pageSize">The size of the new page, in points.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32)">
            <summary>
            Creates a new page and inserts it at a specific position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> property 
            of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="pageSize">The size of the new page, expressed in points.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Clear">
            <summary>
            Removes all pages from the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Object)">
            <summary>
            Adds a new page to the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new page to the document at a specific position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(System.Object)">
            <summary>
            Removes a page from the document.
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1Pdf.PdfPage"/> at a specific position in the document.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfPage">
            <summary>
            PdfPage
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPage.Tag">
            <summary>
            Gets or sets an object associated with the page that contains data
            useful to the application.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfRtf">
            <summary>
            Summary description for PdfRtf.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.ViewerDefault">
            <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.Automatic">
            <summary>
            Document outline visible if available.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buff"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buff"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            ZStreamException
            </summary>
        </member>
        <member name="T:C1.C1Excel.ExcelMetafileConverter">
            <summary>
            The metafile convertor to Excel content.
            </summary>
        </member>
        <member name="T:C1.C1Excel.Field">
            <summary>
            Field
            Fields may contain text, expressions, pictures, or subreports.
            </summary>
        </member>
        <member name="T:C1.C1Excel.FieldComparer">
            <summary>
            FieldComparer
            Class used to sort fields by comparing their 
            Section, ZOrder, Top, and Opacity properties
            </summary>
        </member>
        <member name="T:C1.C1Excel.FieldCollection">
            <summary>
            FieldCollection
            </summary>
        </member>
        <member name="T:C1.C1Excel.Line">
            <summary>
            Line object of the metafile.
            </summary>
            <remarks>Line may has width, color and length.</remarks>
        </member>
        <member name="T:C1.C1Excel.LineCollection">
            <summary>
            LineCollection
            </summary>
        </member>
        <member name="T:C1.C1Excel.MetaBook">
            <summary>
            Summary description for XlsFilter.
            </summary>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="pt1">The first point of the line.</param>
            <param name="pt2">The second point of the line.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x1">The x first coordinate.</param>
            <param name="y1">The y first coordinate.</param>
            <param name="x2">The x second coordinate.</param>
            <param name="y2">The y second coordinate.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawPolyline(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw lines from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the polyline.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw poligon from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill poligon from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw Bezier curve from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillBeziers(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill Bezier curve from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draw round rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fill round rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw pie from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill pie from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw arc from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill arc from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawString(System.String,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="rc">The drawing rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rcImage">The drawing image rectangle.</param>
            <param name="rcClip">The drawing clip for image rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Excel.MetaBook.SetPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            Set current page settings from this RTF document.
            </summary>
            <param name="pageSize">The size of the current page.</param>
            <param name="margins">The print margins for the current page.</param>
        </member>
        <member name="P:C1.C1Excel.MetaBook.Hyperlink">
            <summary>
            Gets or sets current hyperlink for all adds objects for this book.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfAttribute">
            <summary>
            The base RTF object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfObject">
            <summary>
            The base RTF object.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObject._obj">
            <summary>Various object value, may be null.</summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObject._name">
            <summary>RTF object name, may be null.</summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObject._space">
            <summary>RTF object end on space ' '.</summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObject._semicolon">
            <summary>RTF object end on semicolon ';'.</summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObject._owner">
            <summary>The owner RTF object for this object.</summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.#ctor">
            <summary>
            RTF object default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.#ctor(System.String)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.#ctor(System.Object)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.#ctor(System.String,System.Object)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObject.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.IsEmpty">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.Name">
            <summary>
            Get RTF name value for this object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.Value">
            <summary>
            Get RTF object value for this object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.HasSpace">
            <summary>
            Gets or sets, true if this object end on space ' ', otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.HasSemicolon">
            <summary>
            Gets or sets, true if this object end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.Owner">
            <summary>
            Get RTF documnet for this object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObject.Document">
            <summary>
            Get RTF documnet for this object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfAttribute.#ctor">
            <summary>
            RTF object default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfAttribute.#ctor(System.String)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfAttribute.#ctor(System.Object)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfAttribute.#ctor(System.String,System.Object)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfAttribute.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfAttribute.Attribute">
            <summary>
            Get RTF object value for this object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfCellCollection">
            <summary>
            The collection of cells for the RTF table.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfCollection">
            <summary>
            The collection of objs for the RTF table.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfObjectSet">
            <summary>
            The base RTF object set.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfObjectSet._current">
            <summary>The current RTF object for objects collection.</summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.#ctor">
            <summary>
            The RTF group default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.#ctor(System.String)">
            <summary>
            The RTF group default constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.#ctor(System.String,System.Object)">
            <summary>
            The RTF group default constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.Add(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Adds the element to the set (collection).
            </summary>
            <param name="obj">The object for the RTF document.</param>
            <returns>Index from the collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.IsAttribute(C1.C1Rtf.Objects.RtfAttribute)">
            <summary>
            Test RTF attribute for this group.
            </summary>
            <param name="attr">The RTF attribute (RTF name or RTF number).</param>
            <returns>True if attribute is attribute for this group, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfObjectSet.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObjectSet.Count">
            <summary>
            Get count elements of this group.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObjectSet.Parameters">
            <summary>
            Gets the collection of paremeters.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfObjectSet.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Add(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
            <returns>Index from the collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Contains(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Determines whether the RTF object is located within the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.IndexOf(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Returns the index within the collection of the RTF object.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
            <returns>THe index of the clee into this collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Insert(System.Int32,C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Inserts an item into the RTF object collection of the RTF object at the specified index.
            </summary>
            <param name="index">The specified index of the RTF object.</param>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Remove(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Removes the specified RTF object from the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index within the collection.
            </summary>
            <param name="index">The specified index of the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCollection.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Validate RTF object.
            </summary>
            <param name="obj">The RTF object.</param>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCollection.Count">
            <summary>
            Gets the number of RTF object in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF object at the specified index within the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCollection.IsEmpty">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCollection.HasSpace">
            <summary>
            Gets or sets, true if this object end on space ' ', otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCollection.HasSemicolon">
            <summary>
            Gets or sets, true if this object end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCellCollection.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCellCollection.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCellCollection.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCellCollection.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Validate RTF object.
            </summary>
            <param name="obj">The RTF object.</param>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCellCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF cell at the specified index within the collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfCell">
            <summary>
            Summary description for RtfCell.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfTableObject">
            <summary>
            Summary description for RtfCell.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTableObject.#ctor(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Rtf cell.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTableObject.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTableObject.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTableObject.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.BackroundColor">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.Alignment">
            <summary>
            Gets or sets content of the table element alignment.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.TopBorderWidth">
            <summary>
            Gets or sets top border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.LeftBorderWidth">
            <summary>
            Gets or sets left border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.RightBorderWidth">
            <summary>
            Gets or sets right border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.BottomBorderWidth">
            <summary>
            Gets or sets bottom border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.TopBorderColor">
            <summary>
            Gets or sets top border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.LeftBorderColor">
            <summary>
            Gets or sets left border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.RightBorderColor">
            <summary>
            Gets or sets right border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.BottomBorderColor">
            <summary>
            Gets or sets bottom border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.TopBorderStyle">
            <summary>
            Gets or sets top border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.LeftBorderStyle">
            <summary>
            Gets or sets left border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.RightBorderStyle">
            <summary>
            Gets or sets rigth border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTableObject.BottomBorderStyle">
            <summary>
            Gets or sets bottom border style from the table element.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCell.#ctor(C1.C1Rtf.Objects.RtfRow)">
            <summary>
            Rtf cell.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCell.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCell.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCell.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfCell.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCell.Content">
            <summary>
            Gets or sets RTF content for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCell.Width">
            <summary>
            Gets or sets width for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfCell.Right">
            <summary>
            Gets or sets right position for this cell.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfColorTable">
            <summary>
            RTF colors table object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfGroup">
            <summary>
            The dictionary collection of RTF objects.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.#ctor">
            <summary>
            The RTF group default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.#ctor(System.String)">
            <summary>
            The RTF group default constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.#ctor(System.String,System.Object)">
            <summary>
            The RTF group default constructor.
            </summary>
            <param name="name">The RTF name for this object.</param>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the ArrayList.
            </summary>
            <returns>The enumerator that can iterate through the ArrayList</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Add(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Adds the element to the collection.
            </summary>
            <param name="obj">The object for the RTF document.</param>
            <returns>Index from the collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Contains(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Determines whether the element is located within the collection.
            </summary>
            <param name="obj">The object for the RTF document.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.IndexOf(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Returns the index within the collection of the element.
            </summary>
            <param name="obj">The object for the RTF document.</param>
            <returns>The zero-based index of the first occurrence of element, if found, otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Insert(System.Int32,C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Inserts an item into the element collection of the document at the specified index.
            </summary>
            <param name="index">The specified index of the element.</param>
            <param name="obj">The object for the RTF document.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Remove(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Removes the specified element from the collection.
            </summary>
            <param name="obj">The object for the RTF document.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index within the collection.
            </summary>
            <param name="index">The specified index of the element.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            On validate context object.
            </summary>
            <param name="obj">The RTF object to add.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfGroup.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.Count">
            <summary>
            Gets count elements of this group.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.IsUnique">
            <summary>
            Gets true if this object is unique, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.HasNameSemicolon">
            <summary>
            Gets or sets, true if this attribute name end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index within the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.Item(System.String)">
            <summary>
            Gets the element at the specified name within the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.Content">
            <summary>
            Gets RTF content for this group.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfGroup.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.#ctor">
            <summary>
            The RTF group default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            On validate key and context object.
            </summary>
            <param name="value">The RTF object to add.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColorTable.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfColorTable.HasNameSemicolon">
            <summary>
            Gets or sets, true if this attribute name end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfColor">
            <summary>
            The RTF color object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColor.#ctor(System.Drawing.Color)">
            <summary>
            The RTF color constructor.
            </summary>
            <param name="clr">The drawing color.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColor.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColor.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColor.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfColor.op_Implicit(C1.C1Rtf.Objects.RtfColor)~System.Drawing.Color">
            <summary>
            Convert implicitly to drawing color.
            </summary>
            <param name="color">The mate color object.</param>
            <returns>Aproximate color for RTF color.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfColor.Color">
            <summary>
            Get drawing aproximate color for this RTF color.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfColor.HasSemicolon">
            <summary>
            Get true if this object end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfContent">
            <summary>
            Summary description for RtfContent.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.IRtfContent.Add(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
            <returns>Index from the collection.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.IRtfContent.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfContentGroup">
            <summary>
            The RTF specific group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.#ctor">
            <summary>
            The RTF content group constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.#ctor(System.String)">
            <summary>
            The RTF content group constructor.
            </summary>
            <param name="name">The group name.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfContentGroup.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfDateTime">
            <summary>
            The RTF date and time object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfDateTime.#ctor(System.String,System.DateTime)">
            <summary>
            The RTF date time object constructor.
            </summary>
            <param name="name">The name of this object.</param>
            <param name="value">The DateTime object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfDateTime.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfDateTime.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfDateTime.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfDateTime.op_Implicit(C1.C1Rtf.Objects.RtfDateTime)~System.DateTime">
            <summary>
            Convert implicitly to DateTime.
            </summary>
            <param name="dt">The mate date and time object.</param>
            <returns>Aproximate DateTime for RTF date and time.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfDateTime.DateTime">
            <summary>
            Get date and time for this RTF date and time.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfDateTime.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfDateTime.IsUnique">
            <summary>
            Gets true if this object is unique, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfField">
            <summary>
            Summary description for RtfField.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfField.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfField.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfField.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfField.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfField.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfFontTable">
            <summary>
            RTF fonts table object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.#ctor">
            <summary>
            The RTF fonts table default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            On validate key and context object.
            </summary>
            <param name="value">The RTF object to add.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFontTable.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfFontTable.IsUnique">
            <summary>
            Gets true if this object is unique, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfFont">
            <summary>
            The RTF font object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.#ctor(System.String,System.Drawing.Font)">
            <summary>
            The RTF font constructor.
            </summary>
            <param name="name">The name for this object.</param>
            <param name="font">The drawing font.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfFont.op_Implicit(C1.C1Rtf.Objects.RtfFont)~System.Drawing.Font">
            <summary>
            Convert implicitly to drawing font.
            </summary>
            <param name="rtfFont">The mate font object.</param>
            <returns>Aproximate font for RTF font.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfFont.Font">
            <summary>
            Get drawing aproximate font for this RTF font.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfFont.FontSize">
            <summary>
            Get or set operator of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfFont.IsUnique">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfFont.HasSemicolon">
            <summary>
            Get true if this object end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfHeaderFooter">
            <summary>
            Summary description for RtfHeaderFooter.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfHeader">
            <summary>
            Summary description for RtfHeader.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfFooter">
            <summary>
            Summary description for RtfFooter.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfHyperlink">
            <summary>
            Summary description for RtfHyperlink.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.#ctor(System.String,C1.C1Rtf.Objects.RtfContent)">
            <summary>
            The RTF hyperlink constructor.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="content">The anchor content (paragraph) for this hyperlink.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfHyperlink.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfHyperlink.Target">
            <summary>
            Gets target object (URL, bookmark ...) as string.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfHyperlink.HyperlinkContent">
            <summary>
            Gets anchor RTF paragraph for this hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfHyperlink.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfInfo">
            <summary>
            The RTF info group.
            </summary>
            <example>
            {\info{\title Hello}{\author Oleg}{\operator Oleg}{\creatim\yr2003\mo11\dy9\hr12\min2}{\revtim\yr2003\mo11\dy9\hr12\min2}{\version2}{\edmins0}{\nofpages1}{\nofwords1}{\nofchars12}{\*\company C1}{\nofcharsws12}{\vern16437}}
            </example>
        </member>
        <member name="T:C1.C1Rtf.IC1RtfInfo">
            <summary>
            The RTF documnet information.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Title">
            <summary>
            Gets or sets title of the RTF document.
            </summary>
            <value>The title string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Author">
            <summary>
            Gets or sets author name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Operator">
            <summary>
            Gets or sets operator of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.CreationTime">
            <summary>
            Gets or sets creation time of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.RevisionTime">
            <summary>
            Gets or sets modified date of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Subject">
            <summary>
            Get or set subject of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Keywords">
            <summary>
            Get or set keywords array of the RTF document.
            </summary>
            <value>The text strings array.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Company">
            <summary>
            Get or set company name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Manager">
            <summary>
            Get or set manager name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Comment">
            <summary>
            Get or set comment name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInfo.#ctor">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInfo.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInfo.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInfo.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInfo.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Title">
            <summary>
            Gets or sets title of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Author">
            <summary>
            Gets or sets author name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Operator">
            <summary>
            Gets or sets operator of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.CreationTime">
            <summary>
            Gets or sets creation time of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.RevisionTime">
            <summary>
            Gets or sets modified date of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Subject">
            <summary>
            Get or set subject of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Keywords">
            <summary>
            Get or set keywords array of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Company">
            <summary>
            Get or set company name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Manager">
            <summary>
            Get or set manager name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.Comment">
            <summary>
            Get or set comment name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInfo.IsUnique">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfInnerDocument">
            <summary>
            Represents a RTF document.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfInnerDocument._document">
            <summary>The owner RTF document for this object.</summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.PageBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.IsAttribute(C1.C1Rtf.Objects.RtfAttribute)">
            <summary>
            Test RTF attribute for this group.
            </summary>
            <param name="attr">THe RTF attribute (RTF name or RTF number).</param>
            <returns>True if attribute is attribute for this group, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfInnerDocument.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInnerDocument.PageSize">
            <summary>
            Get or set page size for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInnerDocument.CurrentPage">
            <summary>
            Get or set current page number for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInnerDocument.Version">
            <summary>
            Gets or sets RTF version number.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInnerDocument.CodePage">
            <summary>
            Gets or sets code page.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfInnerDocument.Document">
            <summary>
            Get RTF documnet for this object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfName">
            <summary>
            The name object of the RTF file.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfName.#ctor(System.String)">
            <summary>
            RTF name constructor.
            </summary>
            <param name="name">The name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfName.#ctor(System.String,System.Object)">
            <summary>
            RTF object constructor.
            </summary>
            <param name="name">The name for this object.</param>
            <param name="value">The value for initialization.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfName.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfName.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfName.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfNumber">
            <summary>
            The RTF date and time object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.#ctor(System.String,System.Int32)">
            <summary>
            The RTF number object constructor.
            </summary>
            <param name="name">The RTF name value.</param>
            <param name="value">The number value.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.#ctor(System.String,System.Double)">
            <summary>
            The RTF number object constructor.
            </summary>
            <param name="name">The RTF name value.</param>
            <param name="value">The number value.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfNumber.op_Implicit(C1.C1Rtf.Objects.RtfNumber)~System.Int64">
            <summary>
            Convert implicitly to number.
            </summary>
            <param name="number">The mate number object.</param>
            <returns>Aproximate number for RTF number.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfOrdinary">
            <summary>
            The RTF ordinary group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.#ctor(System.String)">
            <summary>
            The RTF ordinary group constructor.
            </summary>
            <param name="name">The ordinary group name.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.#ctor(System.String,System.Object)">
            <summary>
            The RTF ordinary group constructor.
            </summary>
            <param name="name">The ordinary group name.</param>
            <param name="value">The initial for ordinary object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfOrdinary.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfOrdinary.IsEmpty">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfOrdinary.IsUnique">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfParagraph">
            <summary>
            Summary description for RtfParagraph.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParagraph.#ctor">
            <summary>
            Rtf paragraph.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParagraph.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParagraph.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParagraph.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParagraph.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.FirstLineIndent">
            <summary>
            Gets or sets the first line left indent value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.LeftIndent">
            <summary>
            Gets or sets the left indent value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.RightIndent">
            <summary>
            Gets or sets the right indent value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.SpacesBefore">
            <summary>
            Gets or sets the spaces before value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.SpacesAfter">
            <summary>
            Gets or sets the spaces after value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.SpaceBetweenLines">
            <summary>
            Gets or sets the space between lines value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.Style">
            <summary>
            Gets or sets the first line left indent value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.Alignment">
            <summary>
            Gets or sets the horizontal alignment of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.Leading">
            <summary>
            Gets or sets the leading value relatively the owner of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.AbsoluteWidth">
            <summary>
            Gets or sets the absolute width value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.IsClip">
            <summary>
            Gets or sets the clip text value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.IsWrap">
            <summary>
            Gets or sets the wrap text value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.IsVertical">
            <summary>
            Gets or sets the vertical text direct value of this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.Content">
            <summary>
            Gets or sets RTF content for this paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParagraph.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfParamCollection">
            <summary>
            The collection of shape parameters for the RTF shape.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.Contains(System.String)">
            <summary>
            Determines whether the RTF object is located within the collection.
            </summary>
            <param name="name">The name of the RTF param.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.IndexOf(System.String)">
            <summary>
            Returns the index within the collection of the RTF object.
            </summary>
            <param name="name">The name of the RTF param.</param>
            <returns>The index of the clee into this collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.Remove(System.String)">
            <summary>
            Removes the specified RTF object from the collection.
            </summary>
            <param name="name">The name of the RTF param.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfParamCollection.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParamCollection.Count">
            <summary>
            Gets the number of paremeters of the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParamCollection.Item(System.Int32)">
            <summary>
            Gets name of the RTF shape parameter.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfParamCollection.Item(System.String)">
            <summary>
            Gets or sets the RTF shape parameters.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfPictureShape">
            <summary>
            RTF fonts table object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfSpecific">
            <summary>
            The RTF specific group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.#ctor">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.#ctor(System.String)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.#ctor(System.String,System.Object)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfSpecific.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfSpecific.IsEmpty">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.#ctor">
            <summary>
            The RTF fonts table default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            On validate key and context object.
            </summary>
            <param name="value">The RTF object to add.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPictureShape.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfPicture">
            <summary>
            The RTF specific group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.#ctor(System.Drawing.Image)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfPicture.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfPicture.Image">
            <summary>
            Get drawing aproximate font for this RTF font.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfPicture.Properties">
            <summary>
            Get drawing aproximate font for this RTF font.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfPicture.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfRowCollection">
            <summary>
            The collection of rows for the RTF table.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRowCollection.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRowCollection.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRowCollection.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRowCollection.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Validate RTF object.
            </summary>
            <param name="obj">The RTF object.</param>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfRowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF row at the specified index within the collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfRow">
            <summary>
            Summary description for RtfRow.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRow.#ctor(C1.C1Rtf.Objects.RtfTable)">
            <summary>
            Rtf row.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRow.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRow.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRow.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfRow.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfRow.Height">
            <summary>
            Get or set height of this row of a point.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfRow.Cells">
            <summary>
            Get cell collection for this row.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfShapeCollection">
            <summary>
            The collection of rows for the RTF table.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeCollection.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeCollection.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeCollection.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeCollection.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Validate RTF object.
            </summary>
            <param name="obj">The RTF object.</param>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfShapeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF row at the specified index within the collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfShape">
            <summary>
            Summary description for RtfShape.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShape.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShape.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShape.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShape.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShape.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfShapeField">
            <summary>
            Summary description for RtfShapeField.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeField.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeField.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeField.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeField.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfShapeField.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfShapeField.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfString">
            <summary>
            The collection of elements for the table row
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.#ctor(System.String)">
            <summary>
            The RTF text object constructor.
            </summary>
            <param name="value">The string object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.IsUnicode(System.String)">
            <summary>
            Is Unicode of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is Unicode, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.IsCJK(System.String)">
            <summary>
            Is CJK (Chinese, Japanese, and Korean) of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is CJK, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.IsRightToLeft(System.String)">
            <summary>
            Is right to left text (such as Arabic or Hebrew).
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is right to left, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfString.op_Implicit(C1.C1Rtf.Objects.RtfString)~System.String">
            <summary>
            Convert implicitly to DateTime.
            </summary>
            <param name="str">The mate date and time object.</param>
            <returns>Aproximate DateTime for RTF date and time.</returns>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfStyleSheet">
            <summary>
            The RTF specific group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.#ctor">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.OnValidate(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            On validate key and context object.
            </summary>
            <param name="value">The RTF object to add.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyleSheet.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfStyleSheet.IsUnique">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfStyle">
            <summary>
            The RTF style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyle.#ctor(System.String)">
            <summary>
            The RTF style constructor.
            </summary>
            <param name="name">The name for this object.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyle.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyle.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyle.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfStyle.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfStyle.FontSize">
            <summary>
            Get or set operator of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfStyle.IsUnique">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfStyle.HasSemicolon">
            <summary>
            Get true if this object end on semicolon ';', otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfTable">
            <summary>
            Summary description for RtfTable.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Objects.RtfTable._lastHeaderRow">
            This is the number of the last row of the table headers. 
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.#ctor">
            <summary>
            RTF table constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.#ctor(System.Int32,System.Int32)">
            <summary>
            RTF table constructor with definite rows and columns.
            </summary>
            <param name="rows">The rows number for this RTF table.</param>
            <param name="cols">The columns number for this RTF table.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.BeforeWrite(C1.C1Rtf.C1RtfDocument)">
            <summary>
            Call this method at added object from RTF document (before write).
            </summary>
            <param name="document">The owner RTF documnet.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfTable.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTable.IsCellsFitPage">
            <summary>
            Get or set cells fit to the page.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTable.LastHeaderRow">
            <summary>
            Get or set the number of the last row of the table headers.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTable.Rows">
            <summary>
            Get cell collection for this row.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Objects.RtfTable.IsEmpty">
            <summary>
            Get true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Objects.RtfUnknown">
            <summary>
            The RTF specific group.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfUnknown.#ctor">
            <summary>
            The RTF unknown constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfUnknown.ReadNested(C1.C1Rtf.RtfBinaryReader,System.String)">
            <summary>
            Read other group nested into this RTF group.
            </summary>
            <param name="br">The RTF binary reader.</param>
            <param name="name">The name of other group.</param>
            <returns>The nested <code>RtfGroup</code> object.</returns>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfUnknown.Read(C1.C1Rtf.RtfBinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfUnknown.Write(C1.C1Rtf.RtfBinaryWriter)">
            <summary>
            Write this RTF object to binary writer.
            </summary>
            <param name="bw">The RTF binary writer.</param>
        </member>
        <member name="M:C1.C1Rtf.Objects.RtfUnknown.ToString">
            <summary>
            Get string value for this object.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:C1.C1Rtf.RtfBinaryReader">
            <summary>
            Read the RTF format.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.#ctor(System.IO.Stream)">
            <summary>
            Read the binary format for the XL stream.
            </summary>
            <param name="stream">The XL stream.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Read the binary format for the XL stream with necessary encoding.
            </summary>
            <param name="stream">The XL stream.</param>
            <param name="encoding">The necessary encoding.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadAttribute">
            <summary>
            Read RTF object from the RTF stream.
            </summary>
            <returns>The RTF attribute object.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with index as the starting point in the byte array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads count characters from the stream with index as the starting point in the character array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by 1 byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads count bytes from the current stream into a byte array and advances
            the current position by count bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>
            A byte array containing data read from the underlying stream. This might be less than the number
            of bytes requested if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadBoolean">
            <summary>
            Reads a Boolean from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>True if the byte is non-zero; otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position
            of the stream in accordance with the Encoding used and the specific character being
            read from the stream.
            </summary>
            <returns>A character read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadChars(System.Int32)">
            <summary>
            Reads count characters from the current stream, returns the data in a character array,
            and advances the current position in accordance with the Encoding used and the specific
            character being read from the stream.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>An decimal value read from the current stream.</returns>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryReader.ReadString">
            <summary>
            Reads a String from the current stream. The String is prefixed with the length, encoded as an integer 7 bits at a time.
            </summary>
            <returns>The string being read.</returns>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryReader.Position">
            <summary>
            Get or set the base stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryReader.MinPosition">
            <summary>
            Get or set the minimum stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryReader.MaxPosition">
            <summary>
            Get or set the minimum stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryReader.Encoding">
            <summary>
            Encoding for the reading strings
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryReader.Document">
            <summary>
            Encoding for the reading strings
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfBinaryWriter">
            <summary>
            Write the RTF format.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the C1XLBinaryWriter class that writes to a stream.
            </summary>
            <param name="stream">The output stream.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the C1XLBinaryWriter class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Boolean)">
            <summary>
            Writes a one-byte Boolean value to the current stream, with zero representing false and one representing true.
            </summary>
            <param name="value">The Boolean value to write (zero or one).</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the current stream and advances the current position of the stream
            in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the current stream and advances the current position of the stream
            in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">A character array containing the data to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the current stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in buffer from which to begin reading.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a section of a character array to the current stream, and advances the current position
            of the stream in accordance with the Encoding used and perhaps the specific characters being
            written to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
            <param name="index">The starting point in buffer from which to begin reading.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:C1.C1Rtf.RtfBinaryWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed string to this stream in the current Encoding of the BinaryWriter,
            and advances the current position of the stream in accordance with the Encoding used and
            the specific characters being written to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryWriter.Position">
            <summary>
            Get or set the base stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryWriter.MinPosition">
            <summary>
            Get or set the minimum stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryWriter.MaxPosition">
            <summary>
            Get or set the minimum stream position.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryWriter.Encoding">
            <summary>
            Encoding for the reading strings
            </summary>
        </member>
        <member name="P:C1.C1Rtf.RtfBinaryWriter.Document">
            <summary>
            Encoding for the reading strings
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfPageSize">
            <summary>
            Page sizes for text document.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Note">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Legal">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Letter">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A0">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A1">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A2">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A3">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A4">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A5">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A6">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A7">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A8">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A9">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A10">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B0">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B1">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B2">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B3">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B4">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B5">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchA">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchB">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchC">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchD">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchE">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.FLSA">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.FLSE">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.HalfLetter">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Ledger">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="T:C1.C1Rtf.C1RtfDocument">
            <summary>
            Represents a RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.#ctor">
            <summary>
            Create new RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Load(System.String)">
            <summary>
            Save this document from the file with file name.
            </summary>
            <param name="fileName">The file name for load of a file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Save(System.String)">
            <summary>
            Save this document to the file with file name.
            </summary>
            <param name="fileName">The file name for creation or replacement of a file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Clear">
            <summary>
            Clear this Rtf document, reset content.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Add(C1.C1Rtf.Objects.RtfObject)">
            <summary>
            Add RTF object for this document.
            </summary>
            <param name="obj">THe RTF object.</param>
            <returns>The index from group collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font,System.Drawing.Brush)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font,System.Drawing.Brush,C1.C1Rtf.RtfParagraphAlignmentEnum)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="align">The paragraph alignment.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddPicture(System.Drawing.Image)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddPicture(System.Drawing.Image,C1.C1Rtf.RtfParagraphAlignmentEnum)">
            <summary>
            Add (draw) image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="align">The paragraph alignment.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmark(System.String)">
            <summary>
            Add bookmark (start and end) into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmark(System.String,C1.C1Rtf.Objects.RtfContent)">
            <summary>
            Add bookmark (start and end) into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
            <param name="content">The drawing content (paragraph) object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkStart(System.String)">
            <summary>
            Add start bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkStart(System.String,C1.C1Rtf.Objects.RtfContent)">
            <summary>
            Add start bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
            <param name="content">The drawing content (paragraph) object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkEnd(System.String)">
            <summary>
            Add end bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkEnd(System.String,C1.C1Rtf.Objects.RtfContent)">
            <summary>
            Add end bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
            <param name="content">The drawing content (paragraph) object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String,C1.C1Rtf.Objects.RtfParagraph)">
            <summary>
            Add hyperlink into this document in next position.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="paragraph">The anchor paragraph for the target hyperlink.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String,C1.C1Rtf.Objects.RtfParagraph,C1.C1Rtf.Objects.RtfContent)">
            <summary>
            Add hyperlink into this document in next position.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="paragraph">The anchor paragraph for the target hyperlink.</param>
            <param name="content">The drawing content (paragraph) object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String,C1.C1Rtf.Objects.RtfShape)">
            <summary>
            Add hyperlink into this document for RTF shape object.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="shape">The shape for add link.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeRotation(System.Single)">
            <summary>
            Set rotation for current RTF shape.
            </summary>
            <param name="rotation">The rotation angle in degrees.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeFillOpacity(System.Int32)">
            <summary>
            Set opacity for current RTF shape.
            </summary>
            <param name="opacity">The opacity in persents.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeHyperlink(System.String)">
            <summary>
            Set hyperlink source for current RTF shape.
            </summary>
            <param name="source">THe hyperlink source string.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="pt1">The first point of the line.</param>
            <param name="pt2">The second point of the line.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x1">The x first coordinate.</param>
            <param name="y1">The y first coordinate.</param>
            <param name="x2">The x second coordinate.</param>
            <param name="y2">The y second coordinate.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPolyline(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw lines from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the polyline.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw poligon from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill poligon from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw Bezier curve from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillBeziers(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill Bezier curve from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draw round rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fill round rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw pie from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill pie from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw arc from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String,System.Drawing.StringFormat)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String,System.Drawing.StringFormat,System.Single)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="sf">The drawing string format.</param>
            <param name="expand">The value in points for expand (+) or packed (-).</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="sf">The drawing string format.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawParagraph(System.Drawing.RectangleF,C1.C1Rtf.Objects.RtfParagraph)">
            <summary>
            Draw paragraph into this document in next position.
            </summary>
            <param name="rc">The drawing rectangle.</param>
            <param name="paragraph">The drawing paragraph object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rcImage">The drawing image rectangle.</param>
            <param name="rcClip">The drawing clip for image rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.PageBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.SetPageSettings(System.Drawing.SizeF,System.Drawing.Printing.Margins)">
            <summary>
            Set current page settings from this RTF document.
            </summary>
            <param name="pageSize">The size of the current page.</param>
            <param name="margins">The print margins for the current page.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.LineBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.PageSize">
            <summary>
            Gets or sets page size for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.IsLandscape">
            <summary>
            Gets landscape of the page for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.IsOpen">
            <summary>
            Gets or sets opened this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.CurrentPage">
            <summary>
            Gets or sets current page number for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Version">
            <summary>
            Gets or sets RTF version number.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Info">
            <summary>
            Gets info interface for this RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Hyperlink">
            <summary>
            Gets or sets current hyperlink for all adds objects for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Creator">
            <summary>
            Gets or sets creator (generator) name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.FitShapesToText">
            <summary>
            Gets or sets fit shapes with text value/
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.LeftIndent">
            <summary>
            Gets or sets the current left indent.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.RightIndent">
            <summary>
            Gets or sets the current right indent.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.ClientRectangle">
            <summary>
            Gets client rectangle for this document.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfParagraphAlignmentEnum">
            <summary>
            RTF paragraph alignment.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfParagraphAlignmentEnum.Left">
            <summary>Left alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfParagraphAlignmentEnum.Right">
            <summary>Right alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfParagraphAlignmentEnum.Center">
            <summary>Center alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfParagraphAlignmentEnum.Justify">
            <summary>Justify alignment of the paragraph.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfTextFlowEnum">
            <summary>
            Text flow (direct).
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.LeftToRigth">
            <summary>Left to rigth text direct.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.TopToBottom">
            <summary>Top to bottom text direct.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.BottomToTop">
            <summary>Bottom to top text direct.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfBorderStyleEnum">
            <summary>
            Table border styles.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Undefined">
            <summary>Table border solid line (probably).</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Single">
            <summary>Table border solid line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DoubleThick">
            <summary>Table border double thickness line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Shadowed">
            <summary>Table border shadowed.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Dotted">
            <summary>Table border dotted line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Dashed">
            <summary>Table border dashed line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Hairline">
            <summary> Table border hairline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Double">
            <summary>Table border double line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DotDash">
            <summary>Table border dot dash line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DotDotDash">
            <summary>Table border dot dot dash line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Triple">
            <summary>Table border triple line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThin">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThick">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThin">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThinMedium">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickMedium">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThinMedium">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThinLarge">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickLarge">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThinLarge">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Wavy">
            <summary>Table border wavy line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DoubleWavy">
            <summary>Table border double wavy line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Striped">
            <summary>Table border striped line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Emboss">
            <summary>Table border emboss line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Engrave">
            <summary>Table border engrave line.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfMergeCellEnum">
            <summary>
            RTF merge type for the <code>RtfCell</code>.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.None">
            <summary>The cell is not merge.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.HorizontalFirst">
            <summary>The cell is merge horizontal first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.VerticalFirst">
            <summary>The cell is merge vertical first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.BothFirst">
            <summary>The cell is merge horizontal and vertical first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.HorizontalPrevious">
            <summary>The cell is merge horizontal previous.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.VerticalPrevious">
            <summary>The cell is merge vertical previous.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.BothPrevious">
            <summary>The cell is merge horizontal and vertical previous.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfLanguageEnum">
            <summary>
            The RTF languages.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfLanguageEnum.NoLanguage">
            <summary>No language or language is default.</summary>
        </member>
        <member name="T:C1.C1Rtf.BitmapInfo">
            <summary>
            BitmapInfo
            reads a BITMAPINFOHEADER structure, provides a few utilities
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfMetafileConverter">
            <summary>
            The metafile convertor to RTF content.
            </summary>
        </member>
        <member name="M:C1.Win.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.LicensingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            ------------------------------------------------------------------------
            C1Localizer contains static methods to load and look up resources
            </summary>
        </member>
        <member name="T:C1.Util.StaticSimpleStrIntMapper">
            <summary>
            A dumb class allowing to map small numbers of strings to integers
            </summary>
        </member>
        <member name="T:C1.Util.ReferenceDC">
            <summary>
            Summary description for ReferenceDC.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1TreeNodePath">
            <summary>
            This class holds the full path to a tree node
            </summary>
        </member>
        <member name="M:C1.C1PrintDocument.C1TreeNodePath.TraversePathDown(C1.C1PrintDocument.NodeProc,System.Object)">
            <summary>
            Traverses the path from the root down
            </summary>
            <param name="proc"></param>
            <param name="param"></param>
        </member>
        <member name="T:C1.C1PrintDocument.C1TreeNodeChildren">
            <summary>
            Class containing the children of a tree node (which must also all be tree nodes).
            In addition to the children, holds reference to the tree node object itself.
            Adding/removing elements updates their Parent property.
            </summary>
        </member>
        <member name="T:C1.Util.Xml.Serialization.TypeSerialization">
            <summary>
            Determines how item types are serialized
            </summary>
        </member>
        <member name="F:C1.Util.Xml.Serialization.TypeSerialization.None">
            <summary>
            Item type is not serialized (this is the default)
            </summary>
        </member>
        <member name="F:C1.Util.Xml.Serialization.TypeSerialization.FullName">
            <summary>
            Item type is serialized as a fully qualified name
            </summary>
        </member>
        <member name="F:C1.Util.Xml.Serialization.TypeSerialization.AssemblyQualifiedName">
            <summary>
            Item type is serialized as a fully qualified name and assembly name
            </summary>
        </member>
        <member name="F:C1.Util.Xml.Serialization.TypeSerialization.Custom">
            <summary>
            Use owner's IMemberTypeEncoder for members
            (for collection items, this is done automatically).
            </summary>
        </member>
        <member name="T:C1.Util.Xml.Serialization.MemberTypeEncoderHelper">
            <summary>
            Helper class for implementors of IMemberTypeEncoder
            </summary>
        </member>
        <member name="T:C1.Util.Xml.Serialization.TypeSerializationAttribute">
            <summary>
            Forces the serializer to serialize the type name of a property or field
            </summary>
        </member>
        <member name="T:C1.Util.Xml.Serialization.CollectionElementTypeAttribute">
            <summary>
            This attribute allows to specify collection's element type name
            (in that case there is no need to store it).
            </summary>
        </member>
        <member name="T:C1.Util.Xml.Serialization.Serializer">
            <summary>
            Serializes and deserializes objects into and from XML.
            </summary>
            <remarks>
            All the methods in this class are static (Shared in Visual Basic).
            You cannot create an instance of this class.
            </remarks>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="mi">The FieldInfo or MemberInfo object context for the object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Serialize(System.Object,System.Reflection.MemberInfo,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified object to an XML formatted string.
            </summary>
            <param name="o"></param>
            <param name="mi"></param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.writeNamespaces(System.Xml.XmlTextWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Used to write the namespaces as attributes for the initial object
            </summary>
            <param name="writer"></param>
            <param name="namespaces"></param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.isVisible(System.Object[])">
            <summary>
            Given a list of Field or Property attributes returns visibility
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.MapType(System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Enumerates and serializes all public fields and properties
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="stream">The Stream containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="stream">The Stream containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <param name="elementType">The type of array elements (in case the object is an array)</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.Xml.XmlTextReader,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.Xml.XmlTextReader,System.Object,System.Type,System.Type)">
            <summary>
            Deserializes object
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="o">The Object being deserialized</param>
            <param name="type">The type of object being deserialized</param>
            <param name="elementType">The type of array elements (in case the object is an array)</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes an XML document string 
            </summary>
            <param name="text"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.Deserialize(System.String,System.Type,System.Type)">
            <summary>
            Deserializes an XML document string 
            </summary>
            <param name="text"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.DeserializeText(System.Xml.XmlTextReader,System.Type)">
            <summary>
            Deserializes text of element or attribute into object of appropriate type
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.DeserializeType(System.Xml.XmlTextReader,System.Type,C1.Util.Xml.Serialization.IMemberTypeEncoder)">
            <summary>
            Recognizes type of object serialized in element
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="type">The default type of object being deserialized</param>
            <returns>The type of object being deserialized</returns>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.DeserializeArray(System.Xml.XmlTextReader,System.Type,System.Collections.IList)">
            <summary>
            Deserializes array or collection
            </summary>
            <param name="reader">The XmlReader containing the XML-document instance to deserialize</param>
            <param name="elementType">Collection item type</param>
            <param name="container">The array or collection being deserialized</param>
        </member>
        <member name="M:C1.Util.Xml.Serialization.Serializer.GetAssemblyQualifiedTypeName(System.Type)">
            <summary>
            Returns the "almost" fully qualified type name - i.e. with assembly name,
            but without version, culture, and public key.
            </summary>
            <param name="type">Type</param>
            <returns>Type name, assembly name</returns>
        </member>
        <member name="P:C1.Util.Xml.Serialization.Serializer.OnLongOpInProgressProvider">
            <summary>
            Sets or returns the object implementing IOnLongOpInProgressProvider interface
            (can be used to provide visual feedback to the user during serialization).
            </summary>
        </member>
        <member name="P:C1.Util.Xml.Serialization.Serializer.Formatting">
            <summary>
            Sets or returns formatting used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.Util.Xml.Serialization.Serializer.Indentation">
            <summary>
            Sets or returns indentation used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.Util.Xml.Serialization.Serializer.NonPublic">
            <summary>
            Sets or returns serialization of non-public properties.  If true non-public properties
            are included, but are hidden by default. Public properties are always visible by default.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageAddedArgs.RenderPage">
            <summary>
            The newly added page
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageAddedArgs.PageCanChangeLater">
            <summary>
            Indicates whether the engine can change/update that page later on
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageChangedArgs.PageNo">
            <summary>
            1-based page number of the page that has been changed
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageChangedArgs.SimilarPage">
            <summary>
            If true, the list of render drawels ChangedDrawels can be used to optimize redraw.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageChangedArgs.ChangedDrawels">
            <summary>
            The list of render drawels which have actually changed
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageRemovedArgs.PageNo">
            <summary>
            1-based page number of the page that has been removed
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.PageInsertedArgs.PageNo">
            <summary>
            1-based page number of the page before which the new page should be added
            (0 means append the new page to the end of the document)
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum">
            <summary>
            Enum determining what to consider drawel bounds on page when handling mouse events etc.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum.All">
            <summary>
            Outermost, includes all: spacing, border, padding and content.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum.Border">
            <summary>
            Includes border, padding and content. Excludes spacing.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum.Padding">
            <summary>
            Includes padding and content. Excludes spacing and border.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.DocEngine.Render.DrawelBoundsEnum.Content">
            <summary>
            Innermost, includes content only. Excludes spacing, border and padding.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.LengthUnit">
            <summary>
            Structure containing enumeration for different length units and
            holding a specific units value. Can convert unit names (including %)
            to and from strings.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.Names">
            <summary>
            This class is used as a namespace to hold enums and other things
            with names which are represented in the XML docs (i.e. names that
            should not be changed w/out a very good reason).
            Names of values in this class all start with a lowercase letter.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.Names.ImageAlignment">
            <summary>
            Specifies image alignment mode. Zoom, aspect (width to height),
            and fit (boolean) are set separately.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.DocEngine.Src.OutlineInfo">
            <summary>
            Class describing an outline entry corresponding to this drawel
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.C1DPageSettings">
            <summary>
            Class used to persist page settings without printer settings.
            The following page settings are persisted: color, landscape,
            margins, paper size and name.
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.Util.OutlineEntry">
            <summary>
            Class describes one entry in the document outline.
            Used to create outline tree nodes in the outline control.
            Instances of this class contain level, and thus can be stored in a flat array.
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.OutlineEntry.Level">
            <summary>
            The zero-based level of the entry
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.OutlineEntry.Text">
            <summary>
            The entry's text
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.OutlineEntry.PageNo">
            <summary>
            The one-based page number to point to
            </summary>
        </member>
        <member name="F:C1.C1PrintDocument.Util.OutlineEntry.PageArea">
            <summary>
            Bounding rectangle on page referenced by this entry, relative to page size
            (i.e. a zero-sized rectangle in the middle of the page would have all its
            members equal to .5).
            </summary>
        </member>
        <member name="T:C1.C1PrintDocument.C1DefaultUIStrings">
            <summary>
            Contains the default values for some uistrings of C1 document engine.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="F:C1.Win32.DummyWin32.S_OK">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.S_FALSE">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.E_NOTIMPL">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.E_OUTOFMEMORY">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.E_INVALIDARG">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.E_UNEXPECTED">
            End of WARNING
        </member>
        <member name="F:C1.Win32.DummyWin32.LANG_SYSTEM_DEFAULT">
            
            WARNING!!! The order of definitions is important.
            
        </member>
        <member name="M:C1.Win32.DummyWin32.GetLocaleInfo(System.UInt32,System.UInt32)">
            <summary>
            This function avoids BUG with API GetLocaleInfo function under Win9X
            </summary>
            <param name="Locale"></param>
            <param name="LCType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
