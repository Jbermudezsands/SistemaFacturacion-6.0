<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.C1Preview.2</name>
    </assembly>
    <members>
        <member name="T:C1.Win.C1BarCode.BarDirectionEnum">
            <summary>
            Specifies the direction of the barcode
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Normal">
            <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Up">
            <summary>
            The barcode is rendered from the bottom up.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.BarDirectionEnum.Down">
            <summary>
            The barcode is rendered from the top down.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.CodeTypeEnum">
            <summary>
            Specifies the type of barcode to be generated by the C1BarCode control.
            </summary>
            <remarks>
            <para>The <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration represents the different types 
            of barcode that can be generated by the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.</para>
            <para>Some types of barcode can be used to represent alphanumeric values, 
            others can only represent numeric values.</para>
            </remarks>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code39">
            <summary>
            Code 39 is an alpha-numeric encoding also known as 3 of 9 and LOGMARS.
            This was the first alphanumeric symbology developed, and is one of the
            most widely used encodings.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code93">
            <summary>
            Code 93 is an alpha-numeric encoding that is slightly denser than code 39.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Code128">
            <summary>
            Code 128 is a very high density alpha-numeric bar code. It will use the 
            least amount of space of any current 1-D symbology for symbols with 6 
            characters or more. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.CodeI2of5">
            <summary>
            Code I2of5 is a numeric encoding. The symbol can be as long as necessary 
            to store the encoded data.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Codabar">
            <summary>
            Codabar may encode 16 different characters (0 through 9 plus -$:/.+), 
            plus an additional 4 start/stop characters (A through D). Codabar
            is used by some US blood banks, photo labs, and on FedEx air bills. 
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.PostNet">
            <summary>
            PostNet is a numeric encoding used by the US postal service. It differs 
            from most others in that it is based on the height of the bars rather than
            on their width.
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean13">
            <summary>
            EAN-13 was implemented by the International Article Numbering Association (EAN)
            in Europe. EAN-13 encodes a 12-digit code that consists of a 2 digit system code
            followed by a 5 digit manufacturer code and a 5-digit product code. The 12-digit 
            code is followed by a checksum digit (automatically added by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.Ean8">
            <summary>
            EAN-8 provides a short barcode for small packages. It encodes a 7-digit
            code that consists of a 2 or 3 digit system code followed by a 4 or 5
            digit product code. The 7-digit code is followed by a checksum digit
            (automatically added by the control).
            </summary>
        </member>
        <member name="F:C1.Win.C1BarCode.CodeTypeEnum.UpcA">
            <summary>
            UPC-A is the common encoding you will find on virtually every consumer good on 
            the shelves of your local supermarket, as well as books, magazines, and newspapers.
            It is similar to EAN-13, and encodes 11 digits of numeric data along with a trailing 
            check digit.
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.C1BarCode">
            <summary>
            Creates barcode representations of alphanumeric values.
            </summary>
            <remarks>
            <para>To use the C1BarCode control, set the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> 
            property to the type of encoding you want to use, then set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to the value you want to encode.</para>
            <para>The control will show the barcode image. If you want to include the barcode in
            a document, use the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property to retrieve a 
            resolution-independent image of the barcode.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1BarCode.C1BarCode"/> control.
            </summary>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <returns>An image of the barcode with the specified format.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32)">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <param name="format">An <see cref="T:System.Drawing.Imaging.ImageFormat"/> value that specifies the type of image to be created.</param>
            <param name="width">The width of the image, in pixels.</param>
            <param name="height">The height of the image, in pixels.</param>
            <returns>An image of the barcode with the specified format and dimensions.</returns>
            <remarks>
            The <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property can also be used to obtain an image of the barcode. However,
            it always returns a <see cref="T:System.Drawing.Imaging.Metafile"/> image of a pre-set size and with a transparent 
            background. This method returns solid-background bitmaps.
            </remarks>
        </member>
        <member name="M:C1.Win.C1BarCode.C1BarCode.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <remarks>
            The background color only applies to the control. The barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property always has a transparent background.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ForeColor">
            <summary>
            Gets or sets the foreground color for the control.
            </summary>
            <remarks>
            The foreground color applies to the control and also to the barcode
            image that is available through the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> 
            property.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Font">
            <summary>
            Gets or sets the Font used to display the value of the Text property.
            </summary>
            <remarks>
            If the <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property is set to true, then the value 
            of the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property is displayed centered along the 
            bottom of the barcode image using the given font.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.ShowText">
            <summary>
            Gets or sets whether the value of the Text property should be displayed along with the barcode image.
            </summary>
            <remarks>
            By default, the control will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property, set the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.ShowText"/> property to True and set the <see cref="P:C1.Win.C1BarCode.C1BarCode.Font"/> property 
            to the Font to be used for the textual display.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Text">
            <summary>
            Gets or sets the value that is encoded as a barcode image.
            </summary>
            <remarks>
            <para>Some encodings support alpha-numeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="T:C1.Win.C1BarCode.CodeTypeEnum"/> enumeration 
            for details.</para>
            <para>If you use characters that are invalid for the current encoding, the
            control will display a blank image.</para>
            </remarks>
            <example>This sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.CodeType">
            <summary>
            Gets or sets the type of encoding to use when generating the barcode image.
            </summary>
            <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> property to generate the barcode image 
            displayed in the control. The barcode image is also available through the 
            <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.
            </remarks>
            <example>This sample shows how to use the CodeType property to encode
            the value "123456" as a Code39-encoded barcode.
            <code>
            c1barcode1.CodeType = CodeTypeEnum.Code39;
            c1barcode1.Text = "123456";
            pictureBox1.Image = c1barcode1.Image;
            </code>
            </example>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarNarrow">
            <summary>
            Gets or sets the width of the narrow bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarWide">
            <summary>
            Gets or sets the width of the wide bars in screen pixels.
            </summary>
            <remarks>
            By default, narrow bars are one screen pixel wide (1/96") and wide bars 
            are two pixels wide (1/96"). You should never have to change these values,
            they are exposed only in case you need to make adjustments for special
            barcode reader hardware.
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarHeight">
            <summary>
            Gets or sets the height of the bars in screen pixels.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.SizeMode">
            <summary>
            Gets or sets how the barcode image is displayed within the control.
            </summary>
            <remarks>
            <para>This property only affects how the barcode is displayed within
            the control. It has no effect on the actual barcode image, as returned by
            the <see cref="P:C1.Win.C1BarCode.C1BarCode.Image"/> property.</para>
            <para>In most applications, you will either center or left-align the barcode
            image within the control. Although stretching the image is possible, it may
            make it unreadable for some barcode readers.</para>
            </remarks>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.BarDirection">
            <summary>
            Gets or sets the direction of the barcode.
            </summary>
        </member>
        <member name="P:C1.Win.C1BarCode.C1BarCode.Image">
            <summary>
            Gets an image of the barcode that represents the value in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/> 
            property, obtained using the encoding specified by the <see cref="P:C1.Win.C1BarCode.C1BarCode.CodeType"/> property.
            </summary>
            <remarks>
            <para>The <b>Image</b> property returns a <see cref="T:System.Drawing.Imaging.Metafile"/> that can be 
            inserted in reports and other documents. If the value stored in the <see cref="P:C1.Win.C1BarCode.C1BarCode.Text"/>
            property is invalid for the current encoding, the image returned is blank.</para>
            <para>Although the barcode image returned by the control is scalable, the default
            size is optimal for common barcode readers. Keep in mind that if you stretch
            the image and make it very large or very small, it may become unreadable to
            some readers.</para>
            <para>The metafile image has a transparent background and therefore cannot be 
            easily converted to a solid-background bitmap. To obtain a <see cref="T:System.Drawing.Bitmap"/> 
            image of the barcode, use the <see cref="M:C1.Win.C1BarCode.C1BarCode.GetImage(System.Drawing.Imaging.ImageFormat)"/> method instead.</para>
            </remarks>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder128">
            <summary>
            Encoder128
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderBase">
            <summary>
            EncoderBase
            Base class for 1-d barcode encoders
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder39">
            <summary>
            Encoder39
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.Encoder93">
            <summary>
            Encoder93
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderCodabar">
            <summary>
            EncoderCodabar
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan13">
            <summary>
            EncoderEan13
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderEan8">
            <summary>
            EncoderEan8
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderI2of5">
            <summary>
            EncoderI2of5
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderPostNet">
            <summary>
            EncoderPostNET
            todo: ignore widths, try 22 bars/inch
            </summary>
        </member>
        <member name="T:C1.Win.C1BarCode.EncoderUpcA">
            <summary>
            EncoderUpcA
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShape">
            <summary>
            Represents a shape embedded in a <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>Excel sheets may contain many types of embedded shapes, including 
            images, graphical elements, controls, and comments.</para>
            
            <para>The <b>XLShape</b> abstract class contains information that is common
            to all shape types, including the shape's location (<see cref="P:C1.C1Excel.XLShape.Sheet"/>, <see cref="P:C1.C1Excel.XLShape.Row"/>, 
            <see cref="P:C1.C1Excel.XLShape.Column"/>, <see cref="P:C1.C1Excel.XLShape.Rectangle"/>, <see cref="P:C1.C1Excel.XLShape.Rotation"/>),
            the type of border drawn around the shape (<see cref="P:C1.C1Excel.XLShape.LineWidth"/>, <see cref="P:C1.C1Excel.XLShape.LineColor"/>, 
            <see cref="P:C1.C1Excel.XLShape.LineStyle"/>), the <see cref="P:C1.C1Excel.XLShape.Rotation"/> applied to the shape, and
            <see cref="P:C1.C1Excel.XLShape.Hyperlink"/> information.</para>
            
            <para>The <see cref="T:C1.C1Excel.XLPictureShape"/> class derives from <b>XLShape</b> and 
            is used to embed images in sheets.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Excel.XLShape.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLShape"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Excel.XLShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Id">
            <summary>
            Gets the unique identifier of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Row">
            <summary>
            Gets the index of the row to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Column">
            <summary>
            Gets the index of the column to which the shape is attached.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Workbook">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rectangle">
            <summary>
            Gets or sets the rectangle that contains the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Rotation">
            <summary>
            Gets or sets the rotation of the shape, in degrees.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineWidth">
            <summary>
            Gets or sets the width of the border around the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineColor">
            <summary>
            Gets or sets the color of the border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.LineStyle">
            <summary>
            Gets or sets the style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.DashedLineStyle">
            <summary>
            Gets or sets the dash style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.ForeColor">
            <summary>
            Gets or sets foreground color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillColor">
            <summary>
            Gets or sets fill color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.FillOpacity">
            <summary>
            Gets or sets fill opacity for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLShape.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the shape.
            </summary>
            <remarks>
            If you set this property to a URL, clicking the shape in Excel will
            open the browser and navigate to the URL.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLOpaqueShape.#ctor(C1.C1Excel.XLSheet)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLOpaqueShape"/>.
            </summary>
            <param name="sheet">The owner sheet.</param>
        </member>
        <member name="P:C1.C1Excel.XLOpaqueShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.None">
            <summary>
            Images are rendered in their original size, regardless of cell size.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Clip">
            <summary>
            Images are clipped to fit within the cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Scale">
            <summary>
            Images are scaled to fill the cell while preservind their original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Excel.ImageScaling.Stretch">
            <summary>
            Images are stretched to fill the cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is rendered in its original size, and is
            indented from the top left corner of the cell by 30 twips:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 30, 30);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, 
                rc.X, rc.Y, rc.Width, rc.Height);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="rc"><see cref="T:System.Drawing.Rectangle"/>that specifies the image size and position 
            with respect to the cell, in twips.</param>
            <example>
            The code below adds an image to a cell. The image is drawn within a rectangle centered on a 
            cell with a 60 twip edge around it:
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Rectangle rc = new Rectangle(0, 0
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // add 60 twip edge
            rc.Inflate(-60, -60);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(image, rc);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(System.Drawing.Image,System.Drawing.Size,System.Drawing.ContentAlignment,C1.C1Excel.ImageScaling)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="img">The <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="cellSize">The size of the cell that will contain the image, in pixels (used for aligning the image).</param>
            <param name="align">A <see cref="T:System.Drawing.ContentAlignment"/> value that specifies the position of the image in the cell.</param>
            <param name="scale">An <see cref="T:C1.C1Excel.ImageScaling"/> value that specifies the image scaling within the cell.</param>
            <remarks>
            This constructor automatically calculates the image size, position, and clipping based on the cell and image sizes
            and on the given alignment and scaling parameters.
            </remarks>
            <example>
            The code below adds an image to a cell. The image is centered within the cell and scaled to 
            fill the cell while preserving its aspect ratio.
            <code>
            // get sheet and cell
            XLSheet sheet = c1ExcelBook1.Sheets[0];
            XLCell  cell  = sheet[row, col];
            
            // calculate cell size to align picture
            Size cellSize = new Size(
                sheet.Columns[col].Width, 
                sheet.Rows[row].Height);
            
            // build XLPictureShape
            XLPictureShape pic = new XLPictureShape(
                image,
                cellSize,
                ContentAlignment.MiddleCenter,
                ImageScaling.Scale);
            
            // assign XLPictureShape to cell
            cell.Value = pic;
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLPictureShape.#ctor(C1.C1Excel.XLSheet,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object that owns the new shape.</param>
            <param name="img">The image contained in the new <see cref="T:C1.C1Excel.XLPictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the sheet, in twips.</param>
            <param name="y">The vertical position of the image with respect to the sheet, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.IsEmpty">
            <summary>
            Determines whether the shape is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Image">
            <summary>
            Gets a reference to the <see cref="P:C1.C1Excel.XLPictureShape.Image"/> contained in this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.ViewType">
            <summary>
            Gets or sets wheether this <see cref="T:C1.C1Excel.XLPictureShape"/> should be displayed in color, grayscale, or black and white.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Brightness">
            <summary>
            Gets or sets the brightness of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.Contrast">
            <summary>
            Gets or sets the contrast of this <see cref="T:C1.C1Excel.XLPictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.LeftClip">
            <summary>
            Gets or sets the left clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.RightClip">
            <summary>
            Gets or sets the right clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.TopClip">
            <summary>
            Gets or sets the top clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.BottomClip">
            <summary>
            Gets or sets the bottom clipping area of this <see cref="T:C1.C1Excel.XLPictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPictureShape.FileName">
            <summary>
            Gets or sets the file name of this <see cref="T:C1.C1Excel.XLPictureShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Excel.ShapeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLShape"/> objects on an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(C1.C1Excel.XLShape)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Contains(System.Int32)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLShape"/> object.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(C1.C1Excel.XLShape)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.IndexOf(System.Int32)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLShape"/> object in the collection.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(C1.C1Excel.XLShape)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLShape"/> object from the collection.
            </summary>
            <param name="id">The identifier of the object  to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Add(C1.C1Excel.XLShape)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLShape"/> object to the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Excel.XLShape"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.ShapeCollection.Insert(System.Int32,C1.C1Excel.XLShape)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLShape"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="shape">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLShape"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.ShapeCollection.Sheet">
            <summary>
            Gets the <see cref="P:C1.C1Excel.ShapeCollection.Sheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.Auto">
            <summary>
            Display the image using the image's own color information.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.GrayScale">
            <summary>
            Display the image in a grayscale.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPictureViewType.BlackAndWhite">
            <summary>
            Display the image in black and white.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeLineStyleEnum">
            <summary>
            Specifies the style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Simple">
            <summary>Single line (of width LineWidth).</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Double">
            <summary>Double lines of equal width.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThickThin">
            <summary>Double lines, one thick, one thin.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.ThinThick">
            <summary>Double lines, reverse order.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeLineStyleEnum.Triple">
            <summary>Three lines, thin, thick, thin.</summary>
        </member>
        <member name="T:C1.C1Excel.XLShapeDashedLineStyleEnum">
            <summary>
            Specifies the dash style of borders drawn around <see cref="T:C1.C1Excel.XLShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Solid">
            <summary>Solid (continuous) pen.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dash">
            <summary>Dash style, analogue PS_DASH pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.Dot">
            <summary>Dot style, analogue PS_DOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDot">
            <summary>Dash-dot style, analogue PS_DASHDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.DashDotDot">
            <summary>Dash-dot-dot style, analogue PS_DASHDOTDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.SquareDot">
            <summary>Square dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDash">
            <summary>Short dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDash">
            <summary>Long dash style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.ShortDashDot">
            <summary>Short dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDot">
            <summary>Long dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Excel.XLShapeDashedLineStyleEnum.LongDashDotDot">
            <summary>Long dash-dot-dot style.</summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStorage">
            <summary>
            C1OleStorage
            wrapper for creating and accessing OLE compound files
            </summary>
        </member>
        <member name="T:C1.C1Excel.C1OleStream">
            <summary>
            C1OleStream
            COleStorage files contain C1OleStream
            </summary>
        </member>
        <member name="T:C1.C1Excel.LockByteStream">
            <summary>
            Class that implements the ILockBytes interface on top of a Stream
            (so we can open storages on streams as well as files)
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueCreator">
            <summary>
            Opaque table creator.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueParser">
            <summary>
            Opaque table analyse.
            </summary>
        </member>
        <member name="T:C1.C1Excel.OpaqueRecordList">
            <summary>
            helper class used to store opaque records
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.ViewerDefault">
            <summary>
            Do not specify a layout and use the current viewer default.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageLayoutEnum.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.Automatic">
            <summary>
            Document outline visible if available.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.PageModeEnum.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window controls, or any other window visible.
            </summary>
        </member>
        <member name="T:C1.C1Zip.C1CryptStream">
            <summary>
            C1CryptStream
            reads and decrypts data from an encrypted zip base stream, or
            encrypts and writes data to an encrypted zip base stream
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
            <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
            <returns>True if the checksum values match, false otherwise.</returns>
            <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
            <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry"/> can be read with the currently set password.
            </summary>
            <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
            <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> that can be used to read the data in the entry.</returns>
            <remarks>
            The <see cref="T:System.IO.Stream"/> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader"/>, which 
            decompresses the data as it is read from the entry.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.FileName">
            <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
            <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
            <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
            <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Date">
            <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
            <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Comment">
            <summary>
            Gets or sets a comment associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
            <summary>
            Gets the file attributes associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
            <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
            <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile"/> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <b>ICollection</b>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the entry with the specified name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
            <summary>
            Adds a list of entries to the current zip file.
            </summary>
            <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
            <remarks>
            <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
            <para>The <paramref name="pathLevels"/> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels"/>=1 
            will create an entry called "samples\readme.txt".</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
            <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
            <param name="path">Destination path for the unzipped files.</param>
            <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="index">Index of the entry to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="fileName">Name of the entry to remove (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="indices">Array containing the indices of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="entryNames">Array containing the names of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <b>ICollection</b>.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
            <summary>
            Gets the number of entries in the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> with the given name (returns null if the entry cannot be found).
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and creates or opens
            a zip file associated with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open or create.</param>
            <param name="create">True to create a new zip file, false to open an existing file.</param>
            <remarks>
            <para>If <paramref name="create"/> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
            <para>If <paramref name="create"/> is false and the zip file already exists, the existing file 
            is opened.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip file associated 
            with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open.</param>
            <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
            <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
            <summary>
            Opens an existing zip file.
            </summary>
            <param name="fileName">The name of an existing zip file, including the path.</param>
            <remarks>
            <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
            <summary>
            Creates an empty zip file on disk.
            </summary>
            <param name="fileName">The name of the zip file to create, including the path.</param>
            <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
            <summary>
            Opens an existing zip file stored in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a zip file.</param>
            <remarks>
            <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
            <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
            </remarks>
            <example>
            <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
            <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
            <para>2) Select a zip file to add to the project as an embedded resource.</para>
            <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
            <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (StreamReader sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
            <summary>
            Creates a new zip file in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that will contain the new zip file.</param>
            <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile"/> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Close">
            <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile"/> object.
            </summary>
            <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile"/> class 
            and a physical zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Refresh">
            <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
            <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/>
            collection is up to date.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
            <summary>
            Tests whether a file is a valid zip file.
            </summary>
            <param name="fileName">Name of the file to test.</param>
            <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
            <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to test.</param>
            <returns>True if <paramref name="stream"/> contains a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
            <summary>
            Opens the zip file for multiple operations.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.C1Zip.C1ZipFile"/> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
            <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> methods to keep the zip file open until the entire 
            operation is concluded.</para>
            <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> 
            method is called even if an exception occurs.</para>
            </remarks>
            <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
            <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method.
            </summary>
            <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method for a complete description 
            and a sample.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.FileName">
            <summary>
            Gets the name of the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Password">
            <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
            <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
            <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Comment">
            <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
            <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
            <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression"/>) provides 
            a good trade-off between compression and speed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Entries">
            <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection"/> that contains the entries in the zip file.
            </summary>
            <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
            <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
            <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
            <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
            <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> compresses entries into temporary streams before
            adding them to the zip file.</para>
            <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary memory stream.</para>
            <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
            <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile"/> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile"/> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName"/> method.
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZipEncoding">
            <summary>
            Encoding used for entry names and comments
            
            NOTE: this is culture-dependent, which is a really bad idea, but most zip packers
            use the default OEM code page to encode file names, so we have to go along with it...
            
            Note that Encoding.Default seems like a logical choice but doesn't really work for
            international locales. Instead, we need to create an encoding using the current
            OEMCodePage. That allows accents and international characters to be used in file
            names (like the zip built into Windows, allows names such as "Еland.txt", "Дiti.txt", 
            "Wьrth.txt", etc.).
            
            This has nothing to do with compression, it's just used to encode and decode entry 
            names and comments.
            
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipEntryStreamWriter">
            <summary>
            ZipEntryStreamWriter
            Extends C1ZStreamWriter to provide the following:
            1) Creates a memory or temporary storage stream.
            2) Keeps track of the parent zip file.
            3) Overrides Close to add the compressed stream to the zip file.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonBlankShape">
            <summary>
            Represents a action button blank shape of the shape container.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FilledShape">
            <summary>
            Represents a drawing shape object with filled and text.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DrawingShape">
            <summary>
            Represents a drawing shape object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DrawingShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DrawingShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/>.
            </summary>
            <param name="container">The owner sheet.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DrawingShape.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Id">
            <summary>
            Gets the unique identifier of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Owner">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.StartPoint">
            <summary>
            Gets or sets the start point of the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.EndPoint">
            <summary>
            Gets or sets the end point of the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Rectangle">
            <summary>
            Gets or sets the rectangle that contains the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Left">
            <summary>
            Gets left horizontal coordinate, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Right">
            <summary>
            Gets right horizontal coordinate, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Top">
            <summary>
            Gets top vertical coordinate, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Bottom">
            <summary>
            Gets bottom vertical coordinate, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Width">
            <summary>
            Gets width (horizontal size), in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Height">
            <summary>
            Gets height (vertical size), in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Rotation">
            <summary>
            Gets or sets the rotation of the shape, in degrees.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.IsShadow">
            <summary>
            Gets or sets <b>true</b> if drawing shape has shadow, otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Shadow">
            <summary>
            Gets drawing shadow for the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.IsExtrusion">
            <summary>
            Gets or sets <b>true</b> if drawing shape has extrusion, otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Extrusion">
            <summary>
            Gets drawing extrusion for the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.LineWidth">
            <summary>
            Gets or sets the width of the border around the shape, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.LineColor">
            <summary>
            Gets or sets the color of the border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.LineStyle">
            <summary>
            Gets or sets the style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.DashedLineStyle">
            <summary>
            Gets or sets the dash style of the line or border around the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShape.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with the shape.
            </summary>
            <remarks>
            If you set this property to a URL, clicking the shape in Excel will
            open the browser and navigate to the URL.
            </remarks>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FilledShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.FilledShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FilledShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.FilledShape"/>.
            </summary>
            <param name="container">The owner sheet.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.Content">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Rtf.Object.RtfParagraphContent"/> contained in this <see cref="T:C1.C1Rtf.Canvas.FilledShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.FillColor">
            <summary>
            Gets or sets fill color for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.IsFilled">
            <summary>
            Gets or sets <b>true</b> if drawing shape has shadow, otherwise <b>false</b>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.Fill">
            <summary>
            Gets drawing shadow for the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.IsFitShapeToText">
            <summary>
            Gets or sets fit shape to text or no.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.IsFitTextToShape">
            <summary>
            Gets or sets fit text to shape or no.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.FilledShape.IsWrapText">
            <summary>
            Gets or sets wrap text of the shape or no.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBlankShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBlankShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBlankShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBlankShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBlankShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBlankShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBlankShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBlankShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonHomeShape">
            <summary>
            Represents a action button home shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHomeShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHomeShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHomeShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHomeShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHomeShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHomeShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHomeShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHomeShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonHelpShape">
            <summary>
            Represents a action button help shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHelpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHelpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHelpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHelpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHelpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHelpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonHelpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonHelpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonInformationShape">
            <summary>
            Represents a action button information shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonInformationShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonInformationShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonInformationShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonInformationShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonInformationShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonInformationShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonInformationShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonInformationShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonForwardNextShape">
            <summary>
            Represents a action button forward next shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonForwardNextShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonForwardNextShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonForwardNextShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonForwardNextShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonForwardNextShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonForwardNextShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonForwardNextShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonForwardNextShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape">
            <summary>
            Represents a action button back previous shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBackPreviousShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonEndShape">
            <summary>
            Represents a action button end shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonEndShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonEndShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonEndShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonEndShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonEndShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonEndShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonEndShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonEndShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonBeginningShape">
            <summary>
            Represents a action button beginning shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBeginningShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBeginningShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBeginningShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBeginningShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBeginningShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBeginningShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonBeginningShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonBeginningShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonReturnShape">
            <summary>
            Represents a action button return shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonReturnShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonReturnShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonReturnShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonReturnShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonReturnShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonReturnShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonReturnShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonReturnShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonDocumentShape">
            <summary>
            Represents a action button document shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonDocumentShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonDocumentShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonDocumentShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonDocumentShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonDocumentShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonDocumentShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonDocumentShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonDocumentShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonSoundShape">
            <summary>
            Represents a action button sound shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonSoundShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonSoundShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonSoundShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonSoundShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonSoundShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonSoundShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonSoundShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonSoundShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ActionButtonMovieShape">
            <summary>
            Represents a action button movie shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonMovieShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonMovieShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonMovieShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonMovieShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonMovieShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonMovieShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ActionButtonMovieShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ActionButtonMovieShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftArrowShape">
            <summary>
            Represents a left arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DownArrowShape">
            <summary>
            Represents a down arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UpArrowShape">
            <summary>
            Represents a up arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftRightArrowShape">
            <summary>
            Represents a left right arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UpDownArrowShape">
            <summary>
            Represents a up down arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.QuadArrowShape">
            <summary>
            Represents a quad arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftUpArrowShape">
            <summary>
            Represents a left up arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftUpArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftUpArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftUpArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftUpArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftUpArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftUpArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftUpArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftUpArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentUpArrowShape">
            <summary>
            Represents a bent up arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentUpArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentUpArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentUpArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentUpArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentUpArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentUpArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentUpArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentUpArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentArrowShape">
            <summary>
            Represents a bent arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.StripedRightArrowShape">
            <summary>
            Represents a striped right arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StripedRightArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StripedRightArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StripedRightArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StripedRightArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StripedRightArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StripedRightArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StripedRightArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StripedRightArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.NotchedRightArrowShape">
            <summary>
            Represents a notched right arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedRightArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedRightArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedRightArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedRightArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedRightArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedRightArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedRightArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedRightArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CircularArrowShape">
            <summary>
            Represents a circular arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CircularArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CircularArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CircularArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CircularArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CircularArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CircularArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CircularArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CircularArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.NotchedCircularArrowShape">
            <summary>
            Represents a notched circular arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedCircularArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedCircularArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedCircularArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedCircularArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedCircularArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedCircularArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NotchedCircularArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NotchedCircularArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UturnArrowShape">
            <summary>
            Represents a uturn arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UturnArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UturnArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UturnArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UturnArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UturnArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UturnArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UturnArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UturnArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedRightArrowShape">
            <summary>
            Represents a curved right arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedRightArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedRightArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedRightArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedRightArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedRightArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedRightArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedRightArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedRightArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedLeftArrowShape">
            <summary>
            Represents a curved left arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedLeftArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedLeftArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedLeftArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedLeftArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedLeftArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedLeftArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedLeftArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedLeftArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedUpArrowShape">
            <summary>
            Represents a curved up arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedUpArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedUpArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedUpArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedUpArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedUpArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedUpArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedUpArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedUpArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedDownArrowShape">
            <summary>
            Represents a curved down arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedDownArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedDownArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedDownArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedDownArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedDownArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedDownArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedDownArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedDownArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftRightUpArrowShape">
            <summary>
            Represents a left right up arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightUpArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightUpArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightUpArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightUpArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightUpArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightUpArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightUpArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightUpArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.IShapeContainer">
            <summary>
            Represents a owner object for the shape collection of <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.IShapeContainer.Shapes">
            <summary>
            Gets drawing shape collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ShapeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> objects on an <see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Contains(C1.C1Rtf.Canvas.DrawingShape)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object.
            </summary>
            <param name="shape"><see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Contains(System.Int32)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.IndexOf(C1.C1Rtf.Canvas.DrawingShape)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object in the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.IndexOf(System.Int32)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object in the collection.
            </summary>
            <param name="id">The identifier of the object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Remove(C1.C1Rtf.Canvas.DrawingShape)">
            <summary>
            Removes an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object from the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Remove(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object from the collection.
            </summary>
            <param name="id">The identifier of the object  to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Add(C1.C1Rtf.Canvas.DrawingShape)">
            <summary>
            Appends an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object to the collection.
            </summary>
            <param name="shape"><see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Insert(System.Int32,C1.C1Rtf.Canvas.DrawingShape)">
            <summary>
            Inserts an <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="shape">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ShapeCollection.Clone(C1.C1Rtf.Canvas.IShapeContainer)">
            <summary>
            Gtes clone for this collection.
            </summary>
            <param name="container">The owner object for the shape collection.</param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Rtf.Canvas.ShapeCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.ShapeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.ShapeCollection.Owner">
            <summary>
            Gets the <see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DrawingShadow">
            <summary>
            Represents a drawing shadow object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.ShadowType">
            <summary>
            Gets or sets the shadow type of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Opacity">
            <summary>
            Gets or sets the shadow opacity of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Origin">
            <summary>
            Gets or sets the shadow origin of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Offset">
            <summary>
            Gets or sets the shadow offset of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Color">
            <summary>
            Gets or sets the shadow color of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Highlight">
            <summary>
            Gets or sets the shadow highlight of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.TwoShadow">
            <summary>
            Gets two drawing shadow for the double shadow.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingShadow.Shape">
            <summary>
            Gets the owns drawing shape.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DrawingExtrusion">
            <summary>
            Represents a drawing extrusion object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.Viewpoint">
            <summary>
            Gets or sets the viewpoint of the extrusion of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.ViewpointOrigin">
            <summary>
            Gets or sets the viewpoint origin of the extrusion of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.SkewAngle">
            <summary>
            Gets or sets the skew angle of the extrusion of the shape, in degrees.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.LightPosition">
            <summary>
            Gets or sets the light position of the extrusion of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.LightPosition2">
            <summary>
            Gets or sets the light position two of the extrusion of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingExtrusion.Shape">
            <summary>
            Gets the owns drawing shape.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LinedShape">
            <summary>
            Represents a line drawing shape object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LinedShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.LinedShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LinedShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.LinedShape"/>.
            </summary>
            <param name="container">The owner sheet.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DrawingFill">
            <summary>
            Represents a drawing fill object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.Title">
            <summary>
            Gets or sets the title of the fill image of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.Image">
            <summary>
            Gets or sets the fill image of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.FillType">
            <summary>
            Gets or sets the fill type of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.Color">
            <summary>
            Gets or sets the color of fill of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.Opacity">
            <summary>
            Gets or sets fill opacity for the drawing shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.RecolorFillAsPicture">
            <summary>
            Gets or sets the recolor fill as picture flag of the shape.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.DrawingFill.Shape">
            <summary>
            Gets the owns drawing shape.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.NoneShape">
            <summary>
            Represents a none (polyline) shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoneShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoneShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoneShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoneShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoneShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoneShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoneShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoneShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.NoneShape.Verticies">
            <summary>
            Gets or sets the verticies of this <see cref="T:C1.C1Rtf.Canvas.NoneShape"/> (polyline).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.NoneShape.SegmentInfo">
            <summary>
            Gets or sets the segment info pointer of this <see cref="T:C1.C1Rtf.Canvas.NoneShape"/> (polyline).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Callout1Shape">
            <summary>
            Represents a callout1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Callout2Shape">
            <summary>
            Represents a callout2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Callout3Shape">
            <summary>
            Represents a callout3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentCallout1Shape">
            <summary>
            Represents a accent callout1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentCallout2Shape">
            <summary>
            Represents a accent callout2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentCallout3Shape">
            <summary>
            Represents a accent callout3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BorderCallout1Shape">
            <summary>
            Represents a border callout1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BorderCallout2Shape">
            <summary>
            Represents a border callout2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BorderCallout3Shape">
            <summary>
            Represents a border callout3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentBorderCallout1Shape">
            <summary>
            Represents a accent border callout1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentBorderCallout2Shape">
            <summary>
            Represents a accent border callout2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentBorderCallout3Shape">
            <summary>
            Represents a accent border callout3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.WedgeRectCalloutShape">
            <summary>
            Represents a wedge rect callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRectCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRectCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRectCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRectCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRectCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRectCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRectCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRectCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.WedgeRRectCalloutShape">
            <summary>
            Represents a wedge r rect callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRRectCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRRectCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRRectCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRRectCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRRectCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRRectCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeRRectCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeRRectCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape">
            <summary>
            Represents a wedge ellipse callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WedgeEllipseCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftArrowCalloutShape">
            <summary>
            Represents a left arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RightArrowCalloutShape">
            <summary>
            Represents a right arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UpArrowCalloutShape">
            <summary>
            Represents a up arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DownArrowCalloutShape">
            <summary>
            Represents a down arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DownArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DownArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape">
            <summary>
            Represents a left right arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftRightArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UpDownArrowCalloutShape">
            <summary>
            Represents a up down arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UpDownArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UpDownArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.QuadArrowCalloutShape">
            <summary>
            Represents a quad arrow callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.QuadArrowCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.QuadArrowCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CloudCalloutShape">
            <summary>
            Represents a cloud callout shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CloudCalloutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CloudCalloutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CloudCalloutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CloudCalloutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CloudCalloutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CloudCalloutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CloudCalloutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CloudCalloutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Callout90Shape">
            <summary>
            Represents a callout90 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout90Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout90Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout90Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout90Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout90Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout90Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Callout90Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Callout90Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentCallout90Shape">
            <summary>
            Represents a accent callout90 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout90Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout90Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout90Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout90Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout90Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout90Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentCallout90Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentCallout90Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BorderCallout90Shape">
            <summary>
            Represents a border callout90 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout90Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout90Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout90Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout90Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout90Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout90Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BorderCallout90Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BorderCallout90Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.AccentBorderCallout90Shape">
            <summary>
            Represents a accent border callout90 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout90Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout90Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout90Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout90Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout90Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout90Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.AccentBorderCallout90Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.AccentBorderCallout90Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.StraightConnector1Shape">
            <summary>
            Represents a straight connector1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StraightConnector1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StraightConnector1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StraightConnector1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StraightConnector1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StraightConnector1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StraightConnector1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StraightConnector1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StraightConnector1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentConnector2Shape">
            <summary>
            Represents a bent connector2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentConnector3Shape">
            <summary>
            Represents a bent connector3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentConnector4Shape">
            <summary>
            Represents a bent connector4 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector4Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector4Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector4Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector4Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector4Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector4Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector4Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector4Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BentConnector5Shape">
            <summary>
            Represents a bent connector5 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector5Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector5Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector5Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector5Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector5Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector5Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BentConnector5Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BentConnector5Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedConnector2Shape">
            <summary>
            Represents a curved connector2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedConnector3Shape">
            <summary>
            Represents a curved connector3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedConnector4Shape">
            <summary>
            Represents a curved connector4 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector4Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector4Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector4Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector4Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector4Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector4Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector4Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector4Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CurvedConnector5Shape">
            <summary>
            Represents a curved connector5 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector5Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector5Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector5Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector5Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector5Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector5Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CurvedConnector5Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CurvedConnector5Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartConnectorShape">
            <summary>
            Represents a flow chart connector shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartConnectorShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartConnectorShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartConnectorShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartConnectorShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartConnectorShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartConnectorShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartConnectorShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartConnectorShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape">
            <summary>
            Represents a flow chart offpage connector shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOffpageConnectorShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartProcessShape">
            <summary>
            Represents a flow chart process shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartProcessShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartProcessShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartProcessShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartProcessShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartProcessShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartProcessShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartProcessShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartProcessShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartDecisionShape">
            <summary>
            Represents a flow chart decision shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDecisionShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDecisionShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDecisionShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDecisionShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDecisionShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDecisionShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDecisionShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDecisionShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartInputOutputShape">
            <summary>
            Represents a flow chart input output shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInputOutputShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInputOutputShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInputOutputShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInputOutputShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInputOutputShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInputOutputShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInputOutputShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInputOutputShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape">
            <summary>
            Represents a flow chart predefined process shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPredefinedProcessShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartInternalStorageShape">
            <summary>
            Represents a flow chart internal storage shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInternalStorageShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInternalStorageShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInternalStorageShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInternalStorageShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInternalStorageShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInternalStorageShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartInternalStorageShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartInternalStorageShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartDocumentShape">
            <summary>
            Represents a flow chart document shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDocumentShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDocumentShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDocumentShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDocumentShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDocumentShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDocumentShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDocumentShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDocumentShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartMultidocumentShape">
            <summary>
            Represents a flow chart multidocument shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMultidocumentShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMultidocumentShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMultidocumentShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMultidocumentShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMultidocumentShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMultidocumentShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMultidocumentShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMultidocumentShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartTerminatorShape">
            <summary>
            Represents a flow chart terminator shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartTerminatorShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartTerminatorShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartTerminatorShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartTerminatorShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartTerminatorShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartTerminatorShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartTerminatorShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartTerminatorShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartPreparationShape">
            <summary>
            Represents a flow chart preparation shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPreparationShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPreparationShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPreparationShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPreparationShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPreparationShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPreparationShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPreparationShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPreparationShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartManualInputShape">
            <summary>
            Represents a flow chart manual input shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualInputShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualInputShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualInputShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualInputShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualInputShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualInputShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualInputShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualInputShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartManualOperationShape">
            <summary>
            Represents a flow chart manual operation shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualOperationShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualOperationShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualOperationShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualOperationShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualOperationShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualOperationShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartManualOperationShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartManualOperationShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartPunchedCardShape">
            <summary>
            Represents a flow chart punched card shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedCardShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedCardShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedCardShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedCardShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedCardShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedCardShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedCardShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedCardShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape">
            <summary>
            Represents a flow chart punched tape shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartPunchedTapeShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape">
            <summary>
            Represents a flow chart summing junction shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSummingJunctionShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartOrShape">
            <summary>
            Represents a flow chart or shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOrShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOrShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOrShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOrShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOrShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOrShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOrShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOrShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartCollateShape">
            <summary>
            Represents a flow chart collate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartCollateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartCollateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartCollateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartCollateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartCollateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartCollateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartCollateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartCollateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartSortShape">
            <summary>
            Represents a flow chart sort shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSortShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSortShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSortShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSortShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSortShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSortShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartSortShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartSortShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartExtractShape">
            <summary>
            Represents a flow chart extract shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartExtractShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartExtractShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartExtractShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartExtractShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartExtractShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartExtractShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartExtractShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartExtractShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartMergeShape">
            <summary>
            Represents a flow chart merge shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMergeShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMergeShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMergeShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMergeShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMergeShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMergeShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMergeShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMergeShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape">
            <summary>
            Represents a flow chart offline storage shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOfflineStorageShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape">
            <summary>
            Represents a flow chart online storage shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartOnlineStorageShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape">
            <summary>
            Represents a flow chart magnetic tape shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticTapeShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape">
            <summary>
            Represents a flow chart magnetic disk shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDiskShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape">
            <summary>
            Represents a flow chart magnetic drum shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartMagneticDrumShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartDisplayShape">
            <summary>
            Represents a flow chart display shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDisplayShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDisplayShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDisplayShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDisplayShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDisplayShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDisplayShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDisplayShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDisplayShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartDelayShape">
            <summary>
            Represents a flow chart delay shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDelayShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDelayShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDelayShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDelayShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDelayShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDelayShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartDelayShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartDelayShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape">
            <summary>
            Represents a flow chart alternate process shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FlowChartAlternateProcessShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RectangleShape">
            <summary>
            Represents a rectangle shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RectangleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RectangleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RectangleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RectangleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RectangleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RectangleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RectangleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RectangleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RoundRectangleShape">
            <summary>
            Represents a round rectangle shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RoundRectangleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RoundRectangleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RoundRectangleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RoundRectangleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RoundRectangleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RoundRectangleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RoundRectangleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RoundRectangleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.RoundRectangleShape.ArcSize">
            <summary>
            Gets or sets the arc size of this <see cref="T:C1.C1Rtf.Canvas.RoundRectangleShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.EllipseShape">
            <summary>
            Represents a ellipse shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DiamondShape">
            <summary>
            Represents a diamond shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DiamondShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DiamondShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DiamondShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DiamondShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DiamondShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DiamondShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DiamondShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DiamondShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.IsocelesTriangleShape">
            <summary>
            Represents a isoceles triangle shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IsocelesTriangleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IsocelesTriangleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IsocelesTriangleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IsocelesTriangleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IsocelesTriangleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IsocelesTriangleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IsocelesTriangleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IsocelesTriangleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RightTriangleShape">
            <summary>
            Represents a right triangle shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightTriangleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightTriangleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightTriangleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightTriangleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightTriangleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightTriangleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightTriangleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightTriangleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ParallelogramShape">
            <summary>
            Represents a parallelogram shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ParallelogramShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ParallelogramShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ParallelogramShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ParallelogramShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ParallelogramShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ParallelogramShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ParallelogramShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ParallelogramShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TrapezoidShape">
            <summary>
            Represents a trapezoid shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TrapezoidShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TrapezoidShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TrapezoidShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TrapezoidShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TrapezoidShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TrapezoidShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TrapezoidShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TrapezoidShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.HexagonShape">
            <summary>
            Represents a hexagon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HexagonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HexagonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HexagonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HexagonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HexagonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HexagonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HexagonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HexagonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.OctagonShape">
            <summary>
            Represents a octagon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.OctagonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.OctagonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.OctagonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.OctagonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.OctagonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.OctagonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.OctagonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.OctagonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.PlusShape">
            <summary>
            Represents a plus shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlusShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlusShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlusShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlusShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlusShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlusShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlusShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlusShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PlusShape.Adjust">
            <summary>
            Gets or sets the adjust of this <see cref="T:C1.C1Rtf.Canvas.PlusShape"/> (between 0.0f and 1.0f).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.StarShape">
            <summary>
            Represents a star shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StarShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StarShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StarShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StarShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StarShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StarShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.StarShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.StarShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ArrowShape">
            <summary>
            Represents a arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ThickArrowShape">
            <summary>
            Represents a thick arrow shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ThickArrowShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ThickArrowShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ThickArrowShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ThickArrowShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ThickArrowShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ThickArrowShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ThickArrowShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ThickArrowShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.HomePlateShape">
            <summary>
            Represents a home plate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HomePlateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HomePlateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HomePlateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HomePlateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HomePlateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HomePlateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HomePlateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HomePlateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CubeShape">
            <summary>
            Represents a cube shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CubeShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CubeShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CubeShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CubeShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CubeShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CubeShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CubeShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CubeShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BalloonShape">
            <summary>
            Represents a balloon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BalloonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BalloonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BalloonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BalloonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BalloonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BalloonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BalloonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BalloonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.SealShape">
            <summary>
            Represents a seal shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SealShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SealShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SealShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SealShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SealShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SealShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SealShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SealShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ArcShape">
            <summary>
            Represents a arc shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArcShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArcShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArcShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArcShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArcShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArcShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ArcShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ArcShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.ArcShape.Adjust">
            <summary>
            Gets or sets the adjust of this <see cref="T:C1.C1Rtf.Canvas.ArcShape"/> (between 0.0f and 1.0f).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.ArcShape.Verticies">
            <summary>
            Gets or sets the verticies of this <see cref="T:C1.C1Rtf.Canvas.ArcShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LineShape">
            <summary>
            Represents a line shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LineShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LineShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LineShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LineShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LineShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LineShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LineShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LineShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.PlaqueShape">
            <summary>
            Represents a plaque shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlaqueShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlaqueShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlaqueShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlaqueShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlaqueShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlaqueShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PlaqueShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PlaqueShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.CanShape">
            <summary>
            Represents a can shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CanShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CanShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CanShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CanShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CanShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CanShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.CanShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.CanShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DonutShape">
            <summary>
            Represents a donut shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DonutShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DonutShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DonutShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DonutShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DonutShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DonutShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DonutShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DonutShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ChevronShape">
            <summary>
            Represents a chevron shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ChevronShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ChevronShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ChevronShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ChevronShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ChevronShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ChevronShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.ChevronShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.ChevronShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.PentagonShape">
            <summary>
            Represents a pentagon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PentagonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PentagonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PentagonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PentagonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PentagonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PentagonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PentagonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.PentagonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.NoSmokingShape">
            <summary>
            Represents a no smoking shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoSmokingShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoSmokingShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoSmokingShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoSmokingShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoSmokingShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoSmokingShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.NoSmokingShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.NoSmokingShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Seal8Shape">
            <summary>
            Represents a seal8 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal8Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal8Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal8Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal8Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal8Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal8Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal8Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal8Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Seal16Shape">
            <summary>
            Represents a seal16 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal16Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal16Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal16Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal16Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal16Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal16Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal16Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal16Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Seal32Shape">
            <summary>
            Represents a seal32 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal32Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal32Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal32Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal32Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal32Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal32Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal32Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal32Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.WaveShape">
            <summary>
            Represents a wave shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WaveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WaveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WaveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WaveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WaveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WaveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.WaveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.WaveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FoldedCornerShape">
            <summary>
            Represents a folded corner shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FoldedCornerShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FoldedCornerShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FoldedCornerShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FoldedCornerShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FoldedCornerShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FoldedCornerShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.FoldedCornerShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.FoldedCornerShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.IrregularSeal1Shape">
            <summary>
            Represents a irregular seal1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.IrregularSeal2Shape">
            <summary>
            Represents a irregular seal2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.IrregularSeal2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.IrregularSeal2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LightningBoltShape">
            <summary>
            Represents a lightning bolt shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LightningBoltShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LightningBoltShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LightningBoltShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LightningBoltShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LightningBoltShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LightningBoltShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LightningBoltShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LightningBoltShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.HeartShape">
            <summary>
            Represents a heart shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HeartShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HeartShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HeartShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HeartShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HeartShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HeartShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HeartShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HeartShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BevelShape">
            <summary>
            Represents a bevel shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BevelShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BevelShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BevelShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BevelShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BevelShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BevelShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BevelShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BevelShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftBracketShape">
            <summary>
            Represents a left bracket shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBracketShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBracketShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBracketShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBracketShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBracketShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBracketShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBracketShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBracketShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RightBracketShape">
            <summary>
            Represents a right bracket shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBracketShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBracketShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBracketShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBracketShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBracketShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBracketShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBracketShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBracketShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.LeftBraceShape">
            <summary>
            Represents a left brace shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBraceShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBraceShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBraceShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBraceShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBraceShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBraceShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.LeftBraceShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.LeftBraceShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RightBraceShape">
            <summary>
            Represents a right brace shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBraceShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBraceShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBraceShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBraceShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBraceShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBraceShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RightBraceShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RightBraceShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Seal24Shape">
            <summary>
            Represents a seal24 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal24Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal24Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal24Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal24Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal24Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal24Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal24Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal24Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BlockArcShape">
            <summary>
            Represents a block arc shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BlockArcShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BlockArcShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BlockArcShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BlockArcShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BlockArcShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BlockArcShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BlockArcShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BlockArcShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.SmileyFaceShape">
            <summary>
            Represents a smiley face shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SmileyFaceShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SmileyFaceShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SmileyFaceShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SmileyFaceShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SmileyFaceShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SmileyFaceShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SmileyFaceShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SmileyFaceShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.VerticalScrollShape">
            <summary>
            Represents a vertical scroll shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.VerticalScrollShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.VerticalScrollShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.VerticalScrollShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.VerticalScrollShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.VerticalScrollShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.VerticalScrollShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.VerticalScrollShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.VerticalScrollShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.HorizontalScrollShape">
            <summary>
            Represents a horizontal scroll shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HorizontalScrollShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HorizontalScrollShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HorizontalScrollShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HorizontalScrollShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HorizontalScrollShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HorizontalScrollShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.HorizontalScrollShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.HorizontalScrollShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.SunShape">
            <summary>
            Represents a sun shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SunShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SunShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SunShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SunShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SunShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SunShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.SunShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.SunShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.MoonShape">
            <summary>
            Represents a moon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.MoonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.MoonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.MoonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.MoonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.MoonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.MoonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.MoonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.MoonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BracketPairShape">
            <summary>
            Represents a bracket pair shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracketPairShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracketPairShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracketPairShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracketPairShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracketPairShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracketPairShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracketPairShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracketPairShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.BracePairShape">
            <summary>
            Represents a brace pair shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracePairShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracePairShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracePairShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracePairShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracePairShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracePairShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.BracePairShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.BracePairShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Seal4Shape">
            <summary>
            Represents a seal4 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal4Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal4Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal4Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal4Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal4Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal4Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Seal4Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Seal4Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.DoubleWaveShape">
            <summary>
            Represents a double wave shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DoubleWaveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DoubleWaveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DoubleWaveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DoubleWaveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DoubleWaveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DoubleWaveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.DoubleWaveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.DoubleWaveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.UnknownShape">
            <summary>
            Represents a unknown shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UnknownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UnknownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UnknownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UnknownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UnknownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UnknownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.UnknownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.UnknownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.PictureShape">
            <summary>
            Represents an <see cref="P:C1.C1Rtf.Canvas.PictureShape.Image"/> embedded in a shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="img">The image contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
            <param name="rc"><see cref="T:System.Drawing.Rectangle"/>that specifies the image size and position 
            with respect to the cell, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(System.Drawing.Image,System.Drawing.Size,System.Drawing.ContentAlignment,C1.C1Rtf.Canvas.ImageScaling)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="img">The <see cref="P:C1.C1Rtf.Canvas.PictureShape.Image"/> contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
            <param name="cellSize">The size of the cell that will contain the image, in pixels (used for aligning the image).</param>
            <param name="align">A <see cref="T:System.Drawing.ContentAlignment"/> value that specifies the position of the image in the cell.</param>
            <param name="scale">An <see cref="T:C1.C1Rtf.Canvas.ImageScaling"/> value that specifies the image scaling within the cell.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.PictureShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="img">The image contained in the new <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the sheet, in twips.</param>
            <param name="y">The vertical position of the image with respect to the sheet, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.Image">
            <summary>
            Gets a reference to the <see cref="P:C1.C1Rtf.Canvas.PictureShape.Image"/> contained in this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.ViewType">
            <summary>
            Gets or sets wheether this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/> should be displayed in color, grayscale, or black and white.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.Brightness">
            <summary>
            Gets or sets the brightness of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.Contrast">
            <summary>
            Gets or sets the contrast of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/> (between 0 and 1).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.LeftClip">
            <summary>
            Gets or sets the left clipping area of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.RightClip">
            <summary>
            Gets or sets the right clipping area of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.TopClip">
            <summary>
            Gets or sets the top clipping area of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.BottomClip">
            <summary>
            Gets or sets the bottom clipping area of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>, in twips.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Canvas.PictureShape.FileName">
            <summary>
            Gets or sets the file name of this <see cref="T:C1.C1Rtf.Canvas.PictureShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.RibbonShape">
            <summary>
            Represents a ribbon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RibbonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RibbonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RibbonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RibbonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RibbonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RibbonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.RibbonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.RibbonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.Ribbon2Shape">
            <summary>
            Represents a ribbon2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Ribbon2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Ribbon2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Ribbon2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Ribbon2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Ribbon2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Ribbon2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.Ribbon2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.Ribbon2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.EllipseRibbonShape">
            <summary>
            Represents a ellipse ribbon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.EllipseRibbon2Shape">
            <summary>
            Represents a ellipse ribbon2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbon2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbon2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbon2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbon2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbon2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbon2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.EllipseRibbon2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.EllipseRibbon2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.PictureViewType">
            <summary>
            Specifies how images should be displayed (color, grayscale, or black and white).
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.PictureViewType.Auto">
            <summary>Display the image using the image's own color information.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.PictureViewType.GrayScale">
            <summary>Display the image in a grayscale.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.PictureViewType.BlackAndWhite">
            <summary>Display the image in black and white.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ShapeLineStyle">
            <summary>
            Specifies the style of borders drawn around <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeLineStyle.Simple">
            <summary>Single line (of width LineWidth).</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeLineStyle.Double">
            <summary>Double lines of equal width.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeLineStyle.ThickThin">
            <summary>Double lines, one thick, one thin.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeLineStyle.ThinThick">
            <summary>Double lines, reverse order.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeLineStyle.Triple">
            <summary>Three lines, thin, thick, thin.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ShapeDashedLineStyle">
            <summary>
            Specifies the dash style of borders drawn around <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/> objects.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.Solid">
            <summary>Solid (continuous) pen.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.Dash">
            <summary>Dash style, analogue PS_DASH pen of system.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.Dot">
            <summary>Dot style, analogue PS_DOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.DashDot">
            <summary>Dash-dot style, analogue PS_DASHDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.DashDotDot">
            <summary>Dash-dot-dot style, analogue PS_DASHDOTDOT pen of system.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.SquareDot">
            <summary>Square dot style.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.ShortDash">
            <summary>Short dash style.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.LongDash">
            <summary>Long dash style.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.ShortDashDot">
            <summary>Short dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.LongDashDot">
            <summary>Long dash-dot style.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShapeDashedLineStyle.LongDashDotDot">
            <summary>Long dash-dot-dot style.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ShadowType">
            <summary>
            Specifies shadows for <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/>.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShadowType.Default">
            <summary>Without shadow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShadowType.Double">
            <summary>The double shadow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShadowType.Perspective">
            <summary>The perspective shadow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ShadowType.Emboss">
            <summary>The emboss shadow.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.FillType">
            <summary>
            Specifies fills for <see cref="T:C1.C1Rtf.Canvas.DrawingShape"/>.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.FillType.Default">
            <summary>Without fill.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.FillType.Pattern">
            <summary>The pattern fill.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.FillType.Tile">
            <summary>The tile fill.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.FillType.Frame">
            <summary>The frame fill.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ImageScaling">
            <summary>
            Specifies how images are aligned scaled within spreadsheet cells.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ImageScaling.None">
            <summary>Images are rendered in their original size, regardless of cell size.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ImageScaling.Clip">
            <summary>Images are clipped to fit within the cell.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ImageScaling.Scale">
            <summary>Images are scaled to fill the cell while preservind their original aspect ratio.</summary>
        </member>
        <member name="F:C1.C1Rtf.Canvas.ImageScaling.Stretch">
            <summary>Images are stretched to fill the cell.</summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.ShapeType">
            <summary>
            Types of the graphic shape.
            </summary>
            <remarks>
            Polyline =            0,
            Rectangle =           1,
            RoundRectangle =      2,
            Ellipse =             3,
            Arc =                19,
            Line =               20,
            PictureFrame =       75,
            Text =              202,
            </remarks>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextBoxShape">
            <summary>
            Represents an text embedded in a shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextBoxShape.#ctor">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextBoxShape.#ctor(System.String)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextBoxShape.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.</param>
            <param name="x">The horizontal position of the new shape with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the new shape with respect to the cell, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextBoxShape.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
            <param name="text">The text contained in the new <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the cell, in twips.</param>
            <param name="y">The vertical position of the image with respect to the cell, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextBoxShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of an <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="text">The text contained in the new <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.</param>
            <param name="x">The horizontal position of the image with respect to the sheet, in twips.</param>
            <param name="y">The vertical position of the image with respect to the sheet, in twips.</param>
            <param name="width">The width of the image, in twips.</param>
            <param name="height">The height of the image, in twips.</param>
        </member>
        <member name="P:C1.C1Rtf.Canvas.TextBoxShape.NextTextBox">
            <summary>
            Gets or sets next linked <see cref="T:C1.C1Rtf.Canvas.TextBoxShape"/>.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextSimpleShape">
            <summary>
            Represents a text simple shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSimpleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSimpleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSimpleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSimpleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSimpleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSimpleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSimpleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSimpleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextOctagonShape">
            <summary>
            Represents a text octagon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOctagonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOctagonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOctagonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOctagonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOctagonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOctagonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOctagonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOctagonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextHexagonShape">
            <summary>
            Represents a text hexagon shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextHexagonShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextHexagonShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextHexagonShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextHexagonShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextHexagonShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextHexagonShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextHexagonShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextHexagonShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCurveShape">
            <summary>
            Represents a text curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextWaveShape">
            <summary>
            Represents a text wave shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWaveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWaveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWaveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWaveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWaveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWaveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWaveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWaveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextRingShape">
            <summary>
            Represents a text ring shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextOnCurveShape">
            <summary>
            Represents a text on curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextOnRingShape">
            <summary>
            Represents a text on ring shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnRingShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnRingShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnRingShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnRingShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnRingShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnRingShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextOnRingShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextOnRingShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextPlainTextShape">
            <summary>
            Represents a text plain text shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextPlainTextShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextPlainTextShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextPlainTextShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextPlainTextShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextPlainTextShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextPlainTextShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextPlainTextShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextPlainTextShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextStopShape">
            <summary>
            Represents a text stop shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextStopShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextStopShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextStopShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextStopShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextStopShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextStopShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextStopShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextStopShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextTriangleShape">
            <summary>
            Represents a text triangle shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextTriangleInvertedShape">
            <summary>
            Represents a text triangle inverted shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleInvertedShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleInvertedShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleInvertedShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleInvertedShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleInvertedShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleInvertedShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextTriangleInvertedShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextTriangleInvertedShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextChevronShape">
            <summary>
            Represents a text chevron shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextChevronInvertedShape">
            <summary>
            Represents a text chevron inverted shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronInvertedShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronInvertedShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronInvertedShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronInvertedShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronInvertedShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronInvertedShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextChevronInvertedShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextChevronInvertedShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextRingInsideShape">
            <summary>
            Represents a text ring inside shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingInsideShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingInsideShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingInsideShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingInsideShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingInsideShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingInsideShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingInsideShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingInsideShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextRingOutsideShape">
            <summary>
            Represents a text ring outside shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingOutsideShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingOutsideShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingOutsideShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingOutsideShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingOutsideShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingOutsideShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextRingOutsideShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextRingOutsideShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextArchUpCurveShape">
            <summary>
            Represents a text arch up curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextArchDownCurveShape">
            <summary>
            Represents a text arch down curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCircleCurveShape">
            <summary>
            Represents a text circle curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCircleCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCircleCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCircleCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCircleCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCircleCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCircleCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCircleCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCircleCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextButtonCurveShape">
            <summary>
            Represents a text button curve shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonCurveShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonCurveShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonCurveShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonCurveShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonCurveShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonCurveShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonCurveShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonCurveShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextArchUpPourShape">
            <summary>
            Represents a text arch up pour shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpPourShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpPourShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpPourShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpPourShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpPourShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpPourShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchUpPourShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchUpPourShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextArchDownPourShape">
            <summary>
            Represents a text arch down pour shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownPourShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownPourShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownPourShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownPourShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownPourShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownPourShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextArchDownPourShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextArchDownPourShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCirclePourShape">
            <summary>
            Represents a text circle pour shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCirclePourShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCirclePourShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCirclePourShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCirclePourShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCirclePourShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCirclePourShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCirclePourShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCirclePourShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextButtonPourShape">
            <summary>
            Represents a text button pour shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonPourShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonPourShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonPourShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonPourShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonPourShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonPourShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextButtonPourShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextButtonPourShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCurveUpShape">
            <summary>
            Represents a text curve up shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveUpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveUpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveUpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveUpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveUpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveUpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveUpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveUpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCurveDownShape">
            <summary>
            Represents a text curve down shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveDownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveDownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveDownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveDownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveDownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveDownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCurveDownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCurveDownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCascadeUpShape">
            <summary>
            Represents a text cascade up shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeUpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeUpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeUpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeUpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeUpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeUpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeUpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeUpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCascadeDownShape">
            <summary>
            Represents a text cascade down shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeDownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeDownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeDownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeDownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeDownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeDownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCascadeDownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCascadeDownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextWave1Shape">
            <summary>
            Represents a text wave1 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave1Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave1Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave1Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave1Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave1Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave1Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave1Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave1Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextWave2Shape">
            <summary>
            Represents a text wave2 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave2Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave2Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave2Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave2Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave2Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave2Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave2Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave2Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextWave3Shape">
            <summary>
            Represents a text wave3 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave3Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave3Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave3Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave3Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave3Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave3Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave3Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave3Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextWave4Shape">
            <summary>
            Represents a text wave4 shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave4Shape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave4Shape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave4Shape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave4Shape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave4Shape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave4Shape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextWave4Shape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextWave4Shape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextInflateShape">
            <summary>
            Represents a text inflate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextDeflateShape">
            <summary>
            Represents a text deflate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextInflateBottomShape">
            <summary>
            Represents a text inflate bottom shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateBottomShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateBottomShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateBottomShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateBottomShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateBottomShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateBottomShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateBottomShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateBottomShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextDeflateBottomShape">
            <summary>
            Represents a text deflate bottom shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateBottomShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateBottomShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateBottomShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateBottomShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateBottomShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateBottomShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateBottomShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateBottomShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextInflateTopShape">
            <summary>
            Represents a text inflate top shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateTopShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateTopShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateTopShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateTopShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateTopShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateTopShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextInflateTopShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextInflateTopShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextDeflateTopShape">
            <summary>
            Represents a text deflate top shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateTopShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateTopShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateTopShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateTopShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateTopShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateTopShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateTopShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateTopShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextDeflateInflateShape">
            <summary>
            Represents a text deflate inflate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape">
            <summary>
            Represents a text deflate inflate deflate shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextDeflateInflateDeflateShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextFadeRightShape">
            <summary>
            Represents a text fade right shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeRightShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeRightShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeRightShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeRightShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeRightShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeRightShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeRightShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeRightShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextFadeLeftShape">
            <summary>
            Represents a text fade left shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeLeftShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeLeftShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeLeftShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeLeftShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeLeftShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeLeftShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeLeftShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeLeftShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextFadeUpShape">
            <summary>
            Represents a text fade up shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeUpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeUpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeUpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeUpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeUpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeUpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeUpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeUpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextFadeDownShape">
            <summary>
            Represents a text fade down shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeDownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeDownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeDownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeDownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeDownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeDownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextFadeDownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextFadeDownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextSlantUpShape">
            <summary>
            Represents a text slant up shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantUpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantUpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantUpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantUpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantUpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantUpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantUpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantUpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextSlantDownShape">
            <summary>
            Represents a text slant down shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantDownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantDownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantDownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantDownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantDownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantDownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextSlantDownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextSlantDownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCanUpShape">
            <summary>
            Represents a text can up shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanUpShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanUpShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanUpShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanUpShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanUpShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanUpShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanUpShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanUpShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.C1Rtf.Canvas.TextCanDownShape">
            <summary>
            Represents a text can down shape of the shape container.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanDownShape.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanDownShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanDownShape.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanDownShape"/>.
            </summary>
            <param name="pt1">The start point of the line, coordinates in twips.</param>
            <param name="pt2">The end point of the line, coordinates in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanDownShape.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanDownShape"/>.
            </summary>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="M:C1.C1Rtf.Canvas.TextCanDownShape.#ctor(C1.C1Rtf.Canvas.IShapeContainer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.C1Rtf.Canvas.TextCanDownShape"/>.
            </summary>
            <param name="container"><see cref="T:C1.C1Rtf.Canvas.IShapeContainer"/> object that owns the shape container.</param>
            <param name="x1">The horizontal position of the begin line, in twips.</param>
            <param name="y1">The vertical position of the begin line, in twips.</param>
            <param name="x2">The horizontal position of the end line, in twips.</param>
            <param name="y2">The vertical position of the end line, in twips.</param>
        </member>
        <member name="T:C1.Util.FlagsEnumEditorControl.EnumValueDesc">
            <summary>
            Represents the one value in the enumeration.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.Owner">
            <summary>
            Gets the EnumValueDescCollection collection containing this object.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.EnumType">
            <summary>
            Gets the enumeration's type.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.BitCount">
            <summary>
            Gets the count of significant bits in EnumValue.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.EnumValue">
            <summary>
            Gets the enumeration's value.
            </summary>
        </member>
        <member name="P:C1.Util.FlagsEnumEditorControl.EnumValueDesc.Value">
            <summary>
            Gets the enumeration's value as long unsigned integer.
            </summary>
        </member>
        <member name="T:C1.Util.FlagsEnumEditorControl.EnumValueDescCollection">
            <summary>
            Collection of the EnumValueDesc objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.FlagsEnumEditor">
            <summary>
            Represents the editor of enum properties with FlagsAttribute attribute.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:C1.C1Preview.Design.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"/> method.
            The override for <see cref="T:C1.C1Preview.Design.FlagsEnumEditor"/> returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/>.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style 
            indicated by the <see cref="M:C1.C1Preview.Design.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"/> method. 
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Preview.Design.FlagsEnumEditor.IsDropDownResizable">
            <summary>
            Gets a value indicating whether drop-down editors should be resizable by the user. 
            The override for <see cref="T:C1.C1Preview.Design.FlagsEnumEditor"/> returns true;
            </summary>
        </member>
        <member name="M:C1.Win.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.Win.LicensingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            ------------------------------------------------------------------------
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            ------------------------------------------------------------------------
            C1Localizer contains static methods to load and look up resources
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase">
            <summary>
            Abstract class to enumerate metafiles and interpret commands into simpler calls.
            Used as a base class for converting metafiles into pdf, xls, rtf, etc.
            </summary>
        </member>
        <member name="T:C1.Util.MetafileConverterBase.MetaFont">
            data wrapper for LOGFONT
        </member>
        <member name="M:C1.Util.MetafileConverterBase.MetaFont.op_Implicit(C1.Util.MetafileConverterBase.MetaFont)~System.Drawing.Font">
            <summary>
            Convert implicitly to GDI+ font.
            </summary>
            <param name="mf">The mate font object.</param>
            <returns>GDI+ approximate font for meta font.</returns>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.Font">
            <summary>
            Get GDI+ aproximate font for this meta font. 
            </summary>
        </member>
        <member name="P:C1.Util.MetafileConverterBase.MetaFont.FontAngle">
            <summary>
            Get angle for this meta font.
            </summary>
        </member>
        <member name="T:C1.Util.ReferenceDC">
            <summary>
            Summary description for ReferenceDC.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffReader">
            <summary>
            Reads a biff record into a memory stream, exposes the record code
            and provides methods like a binary reader so callers can get the
            data, plus methods for reading Excel-specific elements like
            RK numbers and biff strings.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffWriter">
            <summary>
            Writes biff records. call the Open method to start the record,
            then BinaryWriter-like commands to write the record data, which 
            gets cached in a memory stream. call the Close method to write
            the record header (code and data size) plus the actual record 
            data.
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordBOF">
            <summary>
            First record in the biff file
            </summary>
        </member>
        <member name="T:C1.C1Excel.BiffRecordStyle">
            <summary>
            These are the 6 main Excel styles (Normal, etc), not to be confused with the XF records
            which we call styles and excel calls eXtended Format.
            </summary>
        </member>
        <member name="T:C1.C1Excel.FileFormat">
            <summary>
            Specifies the file format to use when loading or saving work books.
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.Biff8">
            <summary>
            Excel 97/2003 format (Binary Interchange File Format revision 8).
            </summary>
        </member>
        <member name="F:C1.C1Excel.FileFormat.OpenXml">
            <summary>
            Office 2007 format. (Compressed Xml format).
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.C1XLBook"/> class. The 
            new workbook contains a single empty <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Clear">
            <summary>
            Clears the <see cref="T:C1.C1Excel.C1XLBook"/>, restoring the initial state with a single
            <see cref="T:C1.C1Excel.XLSheet"/> called "Sheet1".
            </summary>
            <remarks>
            The <see cref="M:C1.C1Excel.C1XLBook.Clear"/> method restores the <see cref="T:C1.C1Excel.C1XLBook"/> object
            to its initial state, with a single empty sheet called "Sheet1" and the 
            <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> set to 10pt Arial.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <remarks>
            <para><see cref="N:C1.C1Excel"/>infers the file format automatically based on the 
            file name extension. "Xlsx" and "zip" files are loaded as OpenXml; all 
            others are loaded as Biff8 files ("xls").</para>
            <para>If the file doesn't exist, is locked, or is not a valid Excel 
            file, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="fillSheets">Whether to fill the worksheets with data.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,C1.C1Excel.FileFormat)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the file format.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.String,C1.C1Excel.FileFormat,System.Boolean)">
            <summary>
            Loads an Excel worksheet from a file.
            </summary>
            <param name="fileName">Name of the file that contains the worksheet.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets">Whether to fill the worksheets with data.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <remarks>
            <para>The format used to save the file is automatically determined by the 
            file name extension. "Xlsx" and "zip" files are saved as OpenXml; all others 
            are saved as Biff8 files ("xls").</para>
            <para>If the file can't be created, an exception is thrown. 
            This typically indicates that the file is currently open by another 
            application (such as Microsoft Excel).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.String,C1.C1Excel.FileFormat)">
            <summary>
            Saves the worksheet to a file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the type of file to save.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="fillSheets">True to load data into the sheets, false to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,C1.C1Excel.FileFormat)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the file format.</param>
            <remarks>
            Loading the worksheets without their data is much faster than loading the entire workbook.
            This is useful in situations where you want to examine the contents of the file (for example, 
            to ensure that you will not overwrite an existing sheet).
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Load(System.IO.Stream,C1.C1Excel.FileFormat,System.Boolean)">
            <summary>
            Loads the worksheet from a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the worksheet.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the file format.</param>
            <param name="fillSheets">True to load data into the sheets, false to read the sheet names only.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.IO.Stream)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <remarks>
            This method allows saving the workbook directly into streams without using 
            temporary files. Typical uses include saving books to web page response streams
            or mail attachment streams.
            </remarks>
            <example>
            The code below saves a <see cref="T:C1.C1Excel.C1XLBook"/> into a <see cref="T:System.IO.MemoryStream"/>, clears
            the book, then loads it back from the same stream.
            <code>
            // save book into new MemoryStream
            MemoryStream ms = new MemoryStream();
            _book.Save(ms);
            
            // clear book
            _book.Clear();
            
            // load it back from the MemoryStream
            ms.Position = 0;
            _book.Load(ms);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.Save(System.IO.Stream,C1.C1Excel.FileFormat)">
            <summary>
            Saves the worksheet into a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> where the worksheet is saved.</param>
            <param name="format"><see cref="T:C1.C1Excel.FileFormat"/> value that specifies the format to save the workheet in.</param>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)">
            <summary>
            Converts a pixel measurement into twips (1/20th of a point).
            </summary>
            <param name="pix">Measurement in screen pixels.</param>
            <returns>Measurement in twips.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), a 
            resolution-independent unit. .NET controls, on the other hand, usually 
            express measurements in pixels. This method provides an easy way to 
            convert pixel measurements into twips using the current screen resolution.</para>
            <seealso cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)">
            <summary>
            Converts a twip measurement into screen pixels.
            </summary>
            <param name="twip">Measurement in twips.</param>
            <returns>Measurement in screen pixels.</returns>
            <remarks>
            <para>Excel stores measurements in twips (1/20th of a point), 
            a resolution-independent unit. .NET controls, on the other hand, 
            usually express measurements in pixels. This method provides an 
            easy way to convert pixel measurements into twips using the 
            current screen resolution.</para>
            <para><see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/></para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.Sheets">
            <summary>
            Gets a collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent
            the worksheets in the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            The <see cref="T:C1.C1Excel.XLSheetCollection"/> returned has methods for counting, 
            enumerating, adding and removing sheets from the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.DefaultFont">
            <summary>
            Gets or sets the default <see cref="T:System.Drawing.Font"/> for the <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            <para>You can assign any font to any cell using <see cref="T:C1.C1Excel.XLStyle"/> objects. Cells
            that have no associated custom styles or have styles that do not define
            a custom font are displayed using the book's default font.</para>
            <para>The <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property is initially set to 10 pt Arial.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.C1XLBook.KeepFormulas">
            <summary>
            Specifies whether the component should store formulas read from Xls files
            and write them back when saving the file.
            </summary>
            <remarks>
            <para>Setting this property to true allows you to load existing XLS files, modify the values 
            in some cells, and save the file preserving the formulas. This is the default setting.</para>
            <para>Setting this property to false causes the component to remove the formulas in the book 
            when it is loaded. Saving the file in this case will retain the last calculated values but 
            will remove the formulas.</para>
            <para>The component does not provide any support for creating or editing formulas. 
            Formulas must be created in Excel.</para>
            <para>Assigning any value to a cell will clear the formula in the cell.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.BuiltInFormats">
            <summary>
            Summary description for BuiltInFormats.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLCell">
            <summary>
            Represents individual cells in a <see cref="T:C1.C1Excel.XLSheet"/>, and provides
            properties for getting and setting the cell <see cref="P:C1.C1Excel.XLCell.Value"/>,
            <see cref="P:C1.C1Excel.XLCell.Style"/>, and <see cref="P:C1.C1Excel.XLCell.Hyperlink"/>.
            </summary>
            <remarks>
            <para>To create cells, use the <see cref="T:C1.C1Excel.XLSheet"/> indexer (Item property). 
            If the cell already exists, the reference will be returned as usual. 
            If not, the sheet will create the cell (as well as rows and columns if 
            necessary) and will return a reference to the new cell.</para>
            <para>Because it creates cells automatically, the indexer is especially 
            useful when creating and populating sheets.</para>
            </remarks>
            <example>
            For example, the code below creates a new <see cref="T:C1.C1Excel.C1XLBook"/>, then 
            populates the first sheet with a 10 by 10 multiplication table:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            for (int r = 0; r &lt; 10; r++)
            {
              for (int c = 0; c &lt; 10; c++)
              {
                XLCell cell = sheet[r, c];
            	cell.Value = (r+1) * (c+1);
              }
            }
            book.Save(@"c:\temp\test.xls");
            </code>
            Note how the code simply accesses the cells using the indexer. There's no 
            need to create any rows, columns, or cells. The indexer takes care of all 
            that automatically.
            </example>
        </member>
        <member name="M:C1.C1Excel.XLCell.SetValue(System.Object,C1.C1Excel.XLStyle)">
            <summary>
            Sets the <see cref="P:C1.C1Excel.XLCell.Value"/> and <see cref="P:C1.C1Excel.XLCell.Style"/> properties of a cell.
            </summary>
            <param name="value">New cell value.</param>
            <param name="style">New cell style.</param>
            <remarks>
            This method allows you to set the Value and Style properties of a cell
            simultaneously. This can make your code more compact and easier to maintain.
            For example:
            <code>
            // set cell value and style (short version)
            sheet[0,0].SetValue("Hello", styleBold);
            
            // set cell value and style (longer version)
            sheet[0,0].Value = "Hello";
            sheet[0,0].Style = styleBold;
            </code>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Value">
            <summary>
            Gets or sets the value stored in the cell.
            </summary>
            <remarks>
            <para>The value may contain strings, numeric, boolean, <see cref="T:System.DateTime"/>, or 
            null objects. Other types of object can't be saved into Excel files.</para>
            <para>DateTime values are internally converted into doubles, 
            and stored in the sheet as such. The only way to tell the difference 
            between a DateTime value and a double in Excel is by way of the 
            format associated with the cell (<see cref="P:C1.C1Excel.XLStyle.Format"/> property).
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLCell.Hyperlink">
            <summary>
            Gets or sets a string that specifies an action to take when the cell
            is clicked.
            </summary>
            <remarks>
            <para>Hyperlinks may contain URLs that when clicked open a browser window and
            navigate to the specified site (for example, "http://www.componentone.com"). They
            may also contain references to files that are launched by the application
            associated with the file type (for example, "readme.doc"). Finally, hyperlinks
            can be used to send e-mails (for example, "mailto:joe@foo.com").</para>
            <para>Each cell may contain a hyperlink and a value. However, if you assign
            a hyperlink to a cell that has no value (<see cref="P:C1.C1Excel.XLCell.Value"/> == null), then
            the hyperlink text is automatically assigned to the cell value as well.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLCell.XLFormula">
            <summary>
            Rudimentary formula support. 
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLCellRangeCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLCellRange"/> objects on 
            an <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Clear">
            <summary>
            Removes all <see cref="T:C1.C1Excel.XLCellRange"/> objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Contains(C1.C1Excel.XLCellRange)">
            <summary>
            Checks whether the collection contains a specific <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>True if the collection contains the range, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.IndexOf(C1.C1Excel.XLCellRange)">
            <summary>
            Gets the position of an <see cref="T:C1.C1Excel.XLCellRange"/> object in the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to look for.</param>
            <returns>The position of the object in the collection, or -1 if the object is not a member of the collection</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Remove(C1.C1Excel.XLCellRange)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object from the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(C1.C1Excel.XLCellRange)">
            <summary>
            Appends an <see cref="T:C1.C1Excel.XLCellRange"/> object to the collection.
            </summary>
            <param name="cr"><see cref="T:C1.C1Excel.XLCellRange"/> object to add to the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:C1.C1Excel.XLCellRange"/> object and appends it to the collection.
            </summary>
            <param name="rowIndex">Index of the top row in the cell range.</param>
            <param name="colIndex">Index of the left column in the cell range.</param>
            <param name="rowCount">Number of rows in the cell range.</param>
            <param name="colCount">Number of columns in the cell range.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="M:C1.C1Excel.XLCellRangeCollection.Insert(System.Int32,C1.C1Excel.XLCellRange)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLCellRange"/> object at a specific position in the 
            collection.
            </summary>
            <param name="index">Position where the object will be inserted.</param>
            <param name="cr">Object to insert in the collection.</param>
            <returns>A reference to the object if it was successfully added to the collection, 
            or null if the object could not be added to the collection (usually because it 
            overlaps another cell range already in the collection).</returns>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLCellRange"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLCellRange"/> object at the specified position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRangeCollection.Sheet">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> object that owns the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            an empty range.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:C1.C1Excel.XLCellRange"/> object containing
            a specified range.
            </summary>
            <param name="rowFrom">Top row in the range.</param>
            <param name="rowTo">Bottom row in the range.</param>
            <param name="colFrom">Left column in the range.</param>
            <param name="colTo">Bottom column in the range.</param>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the range contains a specific cell.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLCellRange.Intersects(C1.C1Excel.XLCellRange)">
            <summary>
            Determines whether the range intersects another range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.IsEmpty">
            <summary>
            Determines whether the range is empty.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowFrom">
            <summary>
            Gets the index of the top row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnFrom">
            <summary>
            Gets index of the left column in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowCount">
            <summary>
            Gets the number of rows in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnCount">
            <summary>
            Gets the number of columns in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.RowTo">
            <summary>
            Gets or sets the index of the last row in the range.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLCellRange.ColumnTo">
            <summary>
            Gets or sets the index of the last column in the range.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLFont">
            <summary>
            XLFont
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPrintSettings">
            <summary>
            Provides options and settings for printing <see cref="T:C1.C1Excel.XLSheet"/> objects.
            </summary>
            <remarks>
            <para>The settings are applied to each sheet, and are accessible through the
            sheet's <see cref="P:C1.C1Excel.XLSheet.PrintSettings"/> property.</para>
            <para>Note that <see cref="T:C1.C1Excel.C1XLBook"/> does not provide any printing
            services. The settings are used when printing the sheet from Excel.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLPrintSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLPrintSettings"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Header">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            <para>The header string may contain special commands, i.e. placeholders for the page number, 
            current date, or text formatting attributes. Most of these fields are represented by single 
            letters with a leading ampersand ("&amp;").</para>
            <para>The page header is divided into 3 sections: left, center, and right. Each section is 
            introduced by a special command ("&amp;L", "&amp;C", and "&amp;R"). All text and all commands following 
            are part of the selected section.</para>
            <para>The following commands are available:</para>
            <para>&amp;L Start of the left section</para>
            <para>&amp;C Start of the centered section</para>
            <para>&amp;R Start of the right section</para>
            <para>&amp;P Current page number</para>
            <para>&amp;N Page count</para>
            <para>&amp;D Current date</para>
            <para>&amp;T Current time</para>
            <para>&amp;A Sheet name</para>
            <para>&amp;F File name without path</para>
            <para>&amp;Z File path without file name</para>
            <para>&amp;G Picture (file name)</para>
            <para>&amp;B Bold toggle</para>
            <para>&amp;I Italic toggle</para>
            <para>&amp;U Underline toggle</para>
            <para>&amp;E Double underline toggle</para>
            <para>&amp;S Strikeout toggle</para>
            <para>&amp;X Superscript toggle</para>
            <para>&amp;Y Subscript toggle</para>
            <para>&amp;"[fontname]" Set new font</para>
            <para>&amp;"[fontname,fontstyle]" Set new font with specified style. The style is in most cases 
            "Regular", "Bold", "Italic", or "Bold Italic".</para>
            &amp;[fontheight] Set font height in points.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Footer">
            <summary>
            Gets or sets the string to be displayed as a page header when the sheet is printed.
            </summary>
            <remarks>
            The footer string has the same structure and embedded commands as the header string. 
            See the <see cref="P:C1.C1Excel.XLPrintSettings.Header"/> property for details.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterHorizontal">
            <summary>
            Gets or sets whether the sheet should be centered horizontally on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.CenterVertical">
            <summary>
            Gets or sets whether the sheet should be centered vertically on the page when printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginLeft">
            <summary>
            Gets or sets the left margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginRight">
            <summary>
            Gets or sets the right margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginTop">
            <summary>
            Gets or sets the top margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginBottom">
            <summary>
            Gets or sets the bottom margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginHeader">
            <summary>
            Gets or sets the header margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.MarginFooter">
            <summary>
            Gets or sets the footer margin, in inches. Set to a negative value to use the default margin.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintHeaders">
            <summary>
            Gets or sets whether row and column headers (the areas with row numbers and column letters) will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintGridlines">
            <summary>
            Gets or sets whether the gridlines will be printed.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PaperKind">
            <summary>
            Gets or sets the paper size to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.ScalingFactor">
            <summary>
            Gets or sets the scaling factor (in percent) to use when printing the sheet.
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property automatically sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/>
            property to false, causing C1Excel to use the selected scaling factor and to ignore the
            value of the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.AutoScale">
            <summary>
            Gets or sets the scaling mode used for printed output.
            </summary>
            <remarks>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to true, then the printed sheet will be 
            automatically scaled to fit the number of pages specified by the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> 
            and <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties.</para>
            <para>If <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> is set to false, then the printed sheet will be 
            scaled according to the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.StartPage">
            <summary>
            Gets or sets the initial page number to use when printing the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesAcross">
            <summary>
            Fit the sheet to this number of pages across (0 means use as many as needed).
            </summary>
            <remarks>
            Causes C1Excel to select "fit to page" print mode, ignoring the value of the 
            <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/> property.
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.FitPagesDown">
            <summary>
            Fit the sheet to this number of pages down (0 means use as many as needed).
            </summary>
            <remarks>
            Setting the <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesAcross"/> or <see cref="P:C1.C1Excel.XLPrintSettings.FitPagesDown"/> properties automatically 
            sets the <see cref="P:C1.C1Excel.XLPrintSettings.AutoScale"/> property to true, causing C1Excel to calculate the scaling factor 
            based on the given number of pages and to ignore the value of the <see cref="P:C1.C1Excel.XLPrintSettings.ScalingFactor"/>
            property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Copies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.PrintPagesInRows">
            <summary>
            Gets or sets whether to print the pages in rows (across first) or in columns (down first).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.Landscape">
            <summary>
            Gets or sets whether to print the sheet in landscape mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.BlackAndWhite">
            <summary>
            Gets or sets whether to print the sheet in monochrome mode.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLPrintSettings.DraftQuality">
            <summary>
            Gets or sets whether to print the sheet in draft quality mode.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLRowCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLRow"/> objects that represent the 
            individual rows in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            The collection has methods for counting, enumerating, adding, and removing 
            rows from the collection.
            </remarks>
            <example>
            Note that you can create rows automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book = new C1XLBook();
            sheet = book.Sheets[0];
            XLCell cell   = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLRow"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Add(C1.C1Excel.XLRow)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLRow"/> object to the collection.
            </summary>
            <param name="row">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="row"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLRow"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Contains(C1.C1Excel.XLRow)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLRow"/> is a member of the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.IndexOf(C1.C1Excel.XLRow)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="row">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLRow"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Insert(System.Int32,C1.C1Excel.XLRow)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLRow"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="row">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLRow"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 65,536. This is a limitation imposed by Excel.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLRowCollection.Remove(C1.C1Excel.XLRow)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLRow"/> object from the collection.
            </summary>
            <param name="row">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLRow"/> object at the specified index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLRow"/> object at the
            specified position if necessary. It never returns null.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRowCollection.Frozen">
            <summary>
            Gets or sets the number of frozen rows in the collection.
            </summary>
            <remarks>
            Frozen rows are displayed on the top of the sheet and do not scroll vertically.
            They are useful for displaying column headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLColumnCollection">
            <summary>
            Represents a collection of <see cref="T:C1.C1Excel.XLColumn"/> objects that represent the 
            individual columns in each <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>The collection has methods for counting, enumerating, adding, and removing 
            columns from the collection.</para>
            <para>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.</para>
            </remarks>
            <example>
            Note that you can create columns automatically by using the sheet's indexer. 
            For example, the following code retrieves the cell at coordinates (3,3) 
            and in doing so automatically creates four rows and four columns automatically:
            <code>
            C1XLBook book  = new C1XLBook();
            XLSheet  sheet = book.Sheets[0];
            XLCell   cell  = sheet[3,3]; // creates 4 rows and 4 columns
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and adds it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLColumn"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Add(C1.C1Excel.XLColumn)">
            <summary>
            Adds an <see cref="T:C1.C1Excel.XLColumn"/> object to the collection.
            </summary>
            <param name="col">The item to add to the collection.</param>
            <returns>A reference to the item that was added to the collection 
            (in this case, always the <paramref name="col"/> parameter.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLColumn"/> object and inserts it at a 
            specific position in the collection.
            </summary>
            <param name="index">Position where the new item will be inserted.</param>
            <returns>A reference to the new item.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Contains(C1.C1Excel.XLColumn)">
            <summary>
            Determines whether an <see cref="T:C1.C1Excel.XLColumn"/> is a member of the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>True if the collection contains the item, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.IndexOf(C1.C1Excel.XLColumn)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLRow"/> object in the collection.
            </summary>
            <param name="col">Item to look for.</param>
            <returns>The position of the item in the collection, or -1 if
            the item is not a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLColumn"/> object at a given position from the collection.
            </summary>
            <param name="index">Index of the item to remove from the collection.</param>
            <returns>A reference to the item that was removed from the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Insert(System.Int32,C1.C1Excel.XLColumn)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLColumn"/> object at a specific position in the collection.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="col">Item that will be inserted.</param>
            <returns>A reference to the item that was added to the collection.</returns>
            <remarks>
            The maximum number of <see cref="T:C1.C1Excel.XLColumn"/> objects in a <see cref="T:C1.C1Excel.XLSheet"/> 
            is 256. This is a limitation imposed by Excel.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumnCollection.Remove(C1.C1Excel.XLColumn)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLColumn"/> object from the collection.
            </summary>
            <param name="col">Item to be removed from the collection.</param>
            <returns>A reference to the item that was removed.</returns>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Item(System.Int32)">
            <summary>
            Returns a reference to the <see cref="T:C1.C1Excel.XLColumn"/> object at the specified
            index.
            </summary>
            <remarks>
            The indexer will create a new <see cref="T:C1.C1Excel.XLColumn"/> object at the
            specified position if necessary. It never returns null.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumnCollection.Frozen">
            <summary>
            Gets or sets the number of frozen columns in the collection.
            </summary>
            <remarks>
            Frozen columns are displayed on the right side of the sheet and do not scroll horizontally. 
            They are useful for displaying row headers.
            </remarks>
        </member>
        <member name="T:C1.C1Excel.XLRow">
            <summary>
            Represents a row in a worksheet, provides properties for setting 
            the row's height, style, and visibility.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLRow.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLRow"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Visible">
            <summary>
            Gets or sets whether the row is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this row.
            </summary>
            <example>
            The code below inserts forced page breaks at every 10th row on a sheet, and
            clears the breaks at all other rows.
            <code>
            C1.C1Excel.XLSheet sheet = c1XLBook1.Sheets[0];
            for (int r = 0; r &lt; sheet.Rows.Count; r++)
            {
                sheet.Rows[r].PageBreak = (r &gt; 0 &amp;&amp; r % 10 == 0);
            }
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLRow.Height">
            <summary>
            Gets or sets the height of the row, in twips.
            </summary>
            <remarks>
            <para>A value of -1 causes the row to be displayed using the sheet's 
            <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLRow.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the row.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLRow.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLColumn">
            <summary>
            Represents a column in a worksheet, provides properties for setting 
            the column's width, style, and visibility.
            </summary>
            <remarks>The <see cref="T:C1.C1Excel.XLColumn"/> objects do not contain any data. If you remove 
            a column from the collection, the data will be lost. If you later re-insert that 
            same column back into the collection, the column will be blank.
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLColumn.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Excel.XLColumn"/> class.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Visible">
            <summary>
            Gets or sets whether the column is visible.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.PageBreak">
            <summary>
            Gets or sets whether there will be a forced page break after this column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Width">
            <summary>
            Gets or sets the width of the column, in twips.
            </summary>
            <remarks>
            <para>A value of -1 indicates that the column should be displayed using
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>To convert between pixels and twips, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            and <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> methods.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Style">
            <summary>
            Gets or sets the <see cref="T:C1.C1Excel.XLStyle"/> object that determines the appearance
            of the column.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Sheet">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLColumn.Book">
            <summary>
            Gets a reference to the parent <see cref="T:C1.C1Excel.C1XLBook"/> object.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheetCollection">
            <summary>
            Collection of <see cref="T:C1.C1Excel.XLSheet"/> objects that represent the individual 
            worksheets in a <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <remarks>
            Provides methods and properties for counting, enumerating, adding, and removing sheets from 
            the workbook.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> property to get the 
            book's sheet collection. For example, the code below gets a reference 
            to the first sheet on the book, then prints the sheet's name:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine(sheet.Name);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and appends it to the collection.
            </summary>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(C1.C1Excel.XLSheet)">
            <summary>
            Appends an existing <see cref="T:C1.C1Excel.XLSheet"/> to the collection.
            </summary>
            <param name="sheet">The object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> and inserts it at a specific 
            position in the collection.
            </summary>
            <param name="index">Index where the new <see cref="T:C1.C1Excel.XLSheet"/> will be added.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(C1.C1Excel.XLSheet)">
            <summary>
            Determines whether the collection contains a specific <see cref="T:C1.C1Excel.XLSheet"/> object.
            </summary>
            <param name="sheet">The object to look for in the collection.</param>
            <returns>True if the collection contains the object, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an <see cref="T:C1.C1Excel.XLSheet"/> object
            with a given name.
            </summary>
            <param name="sheetName">The name of the sheet to look for (case-insensitive).</param>
            <returns>True if the collection contains an <see cref="T:C1.C1Excel.XLSheet"/>, with the
            given <paramref name="sheetName"/>, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(C1.C1Excel.XLSheet)">
            <summary>
            Gets the index of a given <see cref="T:C1.C1Excel.XLSheet"/> in the collection.
            </summary>
            <param name="sheet">The object to look for.</param>
            <returns>The index of the object in the collection, or -1 if the object is not
            a member of the collection.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(C1.C1Excel.XLSheet)">
            <summary>
            Removes an <see cref="T:C1.C1Excel.XLSheet"/> from the collection.
            </summary>
            <param name="sheet">The <see cref="T:C1.C1Excel.XLSheet"/> object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> at a specific index from the collection.
            </summary>
            <param name="index">Index of the object to remove from the collection.</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLSheet"/> with a given name and appends it to the collection.
            </summary>
            <param name="name">The name of the new <see cref="T:C1.C1Excel.XLSheet"/>.</param>
            <returns>A reference to the new <see cref="T:C1.C1Excel.XLSheet"/> object.</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:C1.C1Excel.XLSheet"/> with the specified name from the collection.
            </summary>
            <param name="name">Name of the sheet to remove from the collection (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.Insert(System.Int32,C1.C1Excel.XLSheet)">
            <summary>
            Inserts an <see cref="T:C1.C1Excel.XLSheet"/> object into the collection at the specified position.
            </summary>
            <param name="index">Position where the item will be inserted.</param>
            <param name="sheet"><see cref="T:C1.C1Excel.XLSheet"/> object to add to the collection.</param>
            <returns>A reference to the object that was added to the collection
            (in this case, always the <paramref name="sheet"/> parameter).</returns>
        </member>
        <member name="M:C1.C1Excel.XLSheetCollection.IndexOf(System.String)">
            <summary>
            Gets the position of the sheet with the specified name in the collection.
            </summary>
            <param name="name">Name of the object to look for (case-insensitive).</param>
            <returns>The index of the sheet in the collection, or -1 if the sheet can't be 
            found in the collection.</returns>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Count">
            <summary>
            Gets the number of <see cref="T:C1.C1Excel.XLSheet"/> objects in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the sheet that is selected when the <see cref="T:C1.C1Excel.C1XLBook"/> 
            file is loaded into Excel.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> at a given position in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheetCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Excel.XLSheet"/> with the given name (case-insensitive).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLSheet">
            <summary>
            Represents individual worksheets in an Excel workbook (<see cref="T:C1.C1Excel.C1XLBook"/>).
            </summary>
            <remarks>
            Provides indexers to get or set the value of individual cells (<see cref="T:C1.C1Excel.XLCell"/>) 
            and to access the <see cref="P:C1.C1Excel.XLSheet.Rows"/> and <see cref="P:C1.C1Excel.XLSheet.Columns"/> on the sheet.
            </remarks>
            <example>
            Use the <see cref="T:C1.C1Excel.C1XLBook"/> <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer to get an individual 
            sheet. For example, the code below gets a reference to the first sheet on the book, then 
            prints the number of rows and columns on the sheet:
            <code>
            C1XLBook book = new C1XLBook();
            XLSheet sheet = book.Sheets[0];
            Debug.WriteLine("Sheet has {0} rows and {1} columns",
              sheet.Rows.Count, sheet.Columns.Count);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Gets a reference to a cell at the specified coordinates, or null of the cell doesn't exist.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the column.</param>
            <returns>A reference to the <see cref="T:C1.C1Excel.XLCell"/> object at the specified coordinates, or null if there
            is no cell at the specified position.</returns>
            <remarks>
            <para>To populate new sheets, use the <see cref="P:C1.C1Excel.C1XLBook.Sheets"/> indexer instead.</para>
            <para>The indexer will automatically create new rows, columns, and cells as needed, and will never return null.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLSheet.Clone">
            <summary>
            Creates a copy of this sheet.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLSheet"/> object with the same contents and formatting as this sheet.</returns>
            <remarks>
            <para>After cloning a sheet, you must rename it and then add it to the book (duplicate names are not
            allowed).</para>
            <para>This method is useful for applications that generate books with a large number of similar sheets.</para>
            </remarks>
            <example>
            The code below loads a book that contains a template sheet, creates 12 copies of that sheet, removes the
            template sheet, then saves the file with a new name.
            <code>
            // load book with template sheet
            _c1xl.Load(@"c:\temp\template.xls");
            
            // create 12 copies of the template sheet
            XLSheet templateSheet = _c1xl.Sheets["Template"];
            for (int month = 1; month &lt;= 12; month++)
            {
              XLSheet newSheet = templateSheet.Clone();
              newSheet.Name = month.ToString(); // rename clone
              newSheet[0,0].Value = month;      // make changes
              _c1xl.Sheets.Add(newSheet);       // add clone to book
            }
            
            // remove the template sheet and save with new name
            _c1xl.Sheets.Remove("Template");
            _c1xl.Save(@"C:\temp\expense_report.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Book">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.C1XLBook"/> that owns the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:C1.C1Excel.XLSheet"/>.
            </summary>
            <remarks>
            <para>When you open a workbook in Excel, the sheet names appear in the tabs 
            below the work area.</para>
            <para>Sheet names can be used as indexers, so they should be unique.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Rows">
            <summary>
            Gets a reference to sheet's row collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Columns">
            <summary>
            Gets a reference to sheet's column collection.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.MergedCells">
            <summary>
            Gets a <see cref="T:C1.C1Excel.XLCellRangeCollection"/> that contains the
            collection of cells that are merged on the sheet.
            </summary>
            <remarks>
            The collection has methods for inspecting, adding, or clearing merged ranges in a sheet. 
            Each merged range is represented by a <see cref="T:C1.C1Excel.XLCellRange"/> object.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the height of individual rows using the <see cref="T:C1.C1Excel.XLRow"/> class. 
            Any rows that do not have a custom height assigned to them will be displayed using 
            the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultRowHeight"/> property is expressed in twips (1/20th of a point), 
            rather than pixels. This allows sheets to maintain their aspect regardless of the resolution 
            of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/> method 
            in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> 
            method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default row height for the sheet (in twips).
            </summary>
            <remarks>
            <para>You can set the width of individual rows using the <see cref="T:C1.C1Excel.XLColumn"/>
            class. Any columns that do not have a custom width assigned to them will 
            be displayed using the sheet's <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/>.</para>
            <para>The <see cref="P:C1.C1Excel.XLSheet.DefaultColumnWidth"/> property is expressed in twips 
            (1/20th of a point), rather than pixels. This allows sheets to maintain 
            their aspect regardless of the resolution of the display.</para>
            <para>To convert twips into pixels, use the <see cref="M:C1.C1Excel.C1XLBook.TwipsToPixels(System.Double)"/>
            method in <see cref="T:C1.C1Excel.C1XLBook"/>. To convert pixels into twips, use the
            <see cref="M:C1.C1Excel.C1XLBook.PixelsToTwips(System.Double)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell at a specified position on the sheet, 
            creating a new cell if necessary.
            </summary>
            <remarks>
            <para>If the specified cell doesn't exist when the indexer is invoked, the sheet will be expanded and 
            a new cell will be created, then returned. This makes it easy to create and populate sheets.</para>
            <para>If you want to determine whether a specific cell has been defined, use the <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method instead.</para>
            <para>The indexer is generally more useful when creating and populating sheets. The <see cref="M:C1.C1Excel.XLSheet.GetCell(System.Int32,System.Int32)"/> 
            method is more useful when loading existing sheets.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Locked">
            <summary>
            Gets or sets a value that determines if the sheet is locked for editing.
            </summary>
            <remarks>
            <para>Sheets and styles can be locked. By default, sheets are unlocked and styles are locked. 
            This combination allows users to edit the cells in Excel.</para>
            <para>To protect a cell against editing in Excel, both the sheet and the cell style must have the 
            <see cref="P:C1.C1Excel.XLSheet.Locked"/> property set to true.</para>
            <para>To lock most cells on a sheet and allow editing of only a few cells, lock the sheet, then 
            create an unlocked style and assign it to the cells that should be editable.</para>
            </remarks>
            <example>
            The code below creates a data entry sheet. Most cells are locked, except for the ones where the user 
            is supposed to enter data.
            <code>
            // start with a single locked sheet
            _c1xl.Clear();
            XLSheet sheet = _c1xl.Sheets[0];
            sheet.Locked = true;
            
            // create an unlocked style
            XLStyle dataEntry = new XLStyle(_c1xl);
            dataEntry.Locked = false;
            dataEntry.BackColor = Color.Beige;
            
            // create data entry titles
            sheet[0,0].Value = "Name:";
            sheet[1,0].Value = "Address:";
            sheet[2,0].Value = "Phone #:";
            
            create data entry cells (unlocked)
            sheet[0,1].Style = dataEntry;
            sheet[1,1].Style = dataEntry;
            sheet[2,1].Style = dataEntry;
            
            // save the book
            _c1xl.Save(@"c:\temp\Protected.xls");
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Visible">
            <summary>
            Gets or sets the sheet's visibility.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowGridLines">
            <summary>
            Gets or sets whether Excel should show the grid lines when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.ShowHeaders">
            <summary>
            Gets or sets whether Excel should show the row and column headers when displaying the sheet.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLSheet.GridColor">
            <summary>
            Gets or sets the color used to display gridlines.
            </summary>
            <remarks>
            <para>Set this property to <b>Color.Transparent</b> to display the grid lines using the default color.</para>
            <para>To hide the grid lines, set the <see cref="P:C1.C1Excel.XLSheet.ShowGridLines"/> property to false.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLSheet.PrintSettings">
            <summary>
            Gets or sets an <see cref="T:C1.C1Excel.XLPrintSettings"/> object that controls how the
            sheet is printed.
            </summary>
            <example>
            The code below creates a header for the sheet and sets the orientation to landscape:
            <code>
            XLPrintSettings pp = sheet.PrintSettings();
            pp.Landscape = true;
            pp.Header = "&amp;LLeft Header&amp;CCenter Header&amp;RRight Header";
            </code>
            </example>
        </member>
        <member name="P:C1.C1Excel.XLSheet.Shapes">
            <summary>
            Gets a reference to the <see cref="T:C1.C1Excel.ShapeCollection"/> for the sheet.
            </summary>
        </member>
        <member name="T:C1.C1Excel.SharedStringTable">
            <summary>
            SharedStringTable is an ArrayList that contains a Hashtable helper.
            
            The Hashtable contains pairs (string, index) and is used for two purposes:
            
            1) To prevent the addition of duplicate values to the list. The Add method
               looks up values in the hashtable and only adds new values.
            
            2) To provide a quick IndexOf override. The index is retrieved from the
               Hashtable instead of using the slow default linear search.
               
            This new implementation reduces the time needed to save a 10,000 x 20 sheet
            from 650 seconds down to 16, essentially the same amount of time needed
            to save numbers.
            
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignHorzEnum">
            <summary>
            Specifies how to align cell content horizontally within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.General">
            <summary>
            Align strings to the left, numbers to the right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Left">
            <summary>
            Align to cell left.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Right">
            <summary>
            Align to cell right.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Fill">
            <summary>
            Fill cell, repeating content as necessary.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Justify">
            <summary>
            Justify content horizontally to span the whole cell width.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignHorzEnum.Selection">
            <summary>
            Align to selection center (may span multiple cells).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLAlignVertEnum">
            <summary>
            Specifies how to align cell content vertically within a cell.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Undefined">
            <summary>
            Not specified (use default).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Top">
            <summary>
            Align to cell top.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Center">
            <summary>
            Align to cell center.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Bottom">
            <summary>
            Align to cell bottom.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLAlignVertEnum.Justify">
            <summary>
            Justify content vertically to span the whole cell height.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLDiagonalFlags">
            <summary>
            Specifies the type of diagonal line to draw across the cells.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.None">
            <summary>
            No diagonal.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Forward">
            <summary>
            Forward diagonal (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLDiagonalFlags.Backward">
            <summary>
            Backward diagonal (\).
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLLineStyleEnum">
            <summary>
            Specifies the line style used for the cell borders.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.None">
            <summary>
            No line.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thin">
            <summary>
            Thin.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Medium">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dashed">
            <summary>
            Dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Dotted">
            <summary>
            Dotted.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Thick">
            <summary>
            Thick.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.Hair">
            <summary>
            Hair (one pixel).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashed">
            <summary>
            Medium dashed.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotted">
            <summary>
            Thin dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotted">
            <summary>
            Medium dash-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.ThinDashDotDotted">
            <summary>
            Thin dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.MediumDashDotDotted">
            <summary>
            Medium dash-dot-dot.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLLineStyleEnum.SlantedMediumDashDotted">
            <summary>
            Slanted dash-dot.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLPatternEnum">
            <summary>
            Specifies the pattern used for To fill the cell background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.None">
            <summary>
            No pattern (transparent).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Solid">
            <summary>
            Solid background.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray50">
            <summary>
            50% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray75">
            <summary>
            75% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray25">
            <summary>
            25% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.HorizontalStripe">
            <summary>
            Horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.VerticalStripe">
            <summary>
            Vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalStripe">
            <summary>
            Diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinVerticalStripe">
            <summary>
            Thin vertical stripe pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe pattern (\).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe pattern (/).
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray12">
            <summary>
            12% dotted pattern.
            </summary>
        </member>
        <member name="F:C1.C1Excel.XLPatternEnum.Gray06">
            <summary>
            6% dotted pattern.
            </summary>
        </member>
        <member name="T:C1.C1Excel.XLStyle">
            <summary>
            Contains style elements used to define the appearance of the cells.
            </summary>
            <remarks>
            <para>Each <see cref="T:C1.C1Excel.XLStyle"/> object may define one or more of the following 
            elements: font, format, background color, background pattern, foreground color, 
            alignment, text direction, and word wrapping.</para>
            <para>When displaying a cell, Excel combines the row, column, and cell styles 
            and merges the style elements defined in each one in order to determine how 
            the cell should be displayed. The precedence of the styles is: (1) cell, 
            (2) row, (3) column, (4) default style.</para>
            <para>Every <see cref="T:C1.C1Excel.XLStyle"/> belongs to a <see cref="T:C1.C1Excel.C1XLBook"/>, and may 
            be assigned to one or more <see cref="T:C1.C1Excel.XLRow"/>, <see cref="T:C1.C1Excel.XLColumn"/>, and 
            <see cref="T:C1.C1Excel.XLCell"/> objects through their <see cref="P:C1.C1Excel.XLCell.Style"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.#ctor(C1.C1Excel.C1XLBook)">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Excel.XLStyle"/> and adds it to the
            specified <see cref="T:C1.C1Excel.C1XLBook"/>.
            </summary>
            <param name="book">Parent <see cref="T:C1.C1Excel.C1XLBook"/>.</param>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Excel.XLStyle"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)">
            <summary>
            Sets the border style for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="style">Line style used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)">
            <summary>
            Sets the border color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <param name="color">Color used to draw the border.</param>
            <remarks>This method applies the setting to all four borders.</remarks>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String,System.Type)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <param name="dataType">Data type to be formatted.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)">
            <summary>
            Converts a .NET-style format string into an Excel format string.
            </summary>
            <param name="fmt">.NET-style format to convert.</param>
            <returns>An Excel-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)">
            <summary>
            Converts a Excel-style format string into a .NET-style format string.
            </summary>
            <param name="fmt">Excel-style format to convert.</param>
            <returns>A .NET-style format string.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:C1.C1Excel.XLStyle"/> objects are equivalent.
            </summary>
            <param name="obj"><see cref="T:C1.C1Excel.XLStyle"/> object to compare to the current instance.</param>
            <returns>True if the styles are equivalent, False otherwise.</returns>
        </member>
        <member name="M:C1.C1Excel.XLStyle.GetHashCode">
            <summary>
            Serves as a hash function suitable for use in hashing algorithms and 
            data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:C1.C1Excel.XLStyle"/>.</returns>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Font">
            <summary>
            Gets or sets the font for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.Font"/> property to null in order to suppress 
            this style element and use the default font instead. The default font is 
            determined by the book's <see cref="P:C1.C1Excel.C1XLBook.DefaultFont"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.ForeColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default foreground color instead (black).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackColor">
            <summary>
            Gets or sets the background color for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Set the <see cref="P:C1.C1Excel.XLStyle.BackColor"/> property to <b>Color.Transparent</b> to
            suppress this style element and use the default background color instead (white).</para>
            <para>All colors on the <see cref="T:C1.C1Excel.C1XLBook"/> are mapped onto a palette. This 
            means that is you assign colors to styles, save the book, and then load it back, 
            you probably won't get exactly the same colors used when the book was created. 
            You will get a fairly close approximation though.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BackPattern">
            <summary>
            Gets or sets the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.PatternColor">
            <summary>
            Gets or sets the color of the background pattern for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Format">
            <summary>
            Gets or sets the format associated with this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            <para>Excel uses formats similar, but not identical to .NET. Refer
            to the Excel documentation for details on how to create format strings.</para>
            <para>You can use the <see cref="M:C1.C1Excel.XLStyle.FormatXLToDotNet(System.String)"/> and <see cref="M:C1.C1Excel.XLStyle.FormatDotNetToXL(System.String)"/>
            methods to convert common Excel format strings to and from .NET format strings.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignHorz">
            <summary>
            Gets or sets the horizontal alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignHorz"/> property to <see cref="F:C1.C1Excel.XLAlignHorzEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignHorzEnum.General"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.AlignVert">
            <summary>
            Gets or sets the vertical alignment for this <see cref="T:C1.C1Excel.XLStyle"/>.
            </summary>
            <remarks>
            Set the <see cref="P:C1.C1Excel.XLStyle.AlignVert"/> property to <see cref="F:C1.C1Excel.XLAlignVertEnum.Undefined"/> to suppress
            this style element and use the default horizontal alignment instead (<see cref="F:C1.C1Excel.XLAlignVertEnum.Bottom"/>).
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.WordWrap">
            <summary>
            Gets or sets whether this <see cref="T:C1.C1Excel.XLStyle"/> causes cell contents to wrap.
            </summary>
            <remarks>
            Cells that do not wrap will spill onto adjacent cells, and will be kept on 
            a single line even if they contain line-break characters.
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Rotation">
            <summary>
            Gets or sets the rotation for this <see cref="T:C1.C1Excel.XLStyle"/>, in degrees.
            </summary>
            <remarks>
            <para>This property should be set to values between 0 and 180, or 255, 
            as explained below:</para>
            <para>Zero means no rotation.</para>
            <para>1-90 means 1 to 90 degrees counter-clockwise (90 causes text to be 
            displayed in the vertical direction going up the cell).</para>
            <para>91-180 means 1 to 90 degrees clockwise (180 causes text to be 
            displayed in the vertical direction going down the cell).</para>
            <para>255 causes letters are stacked top to bottom and not rotated.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Locked">
            <summary>
            Gets or sets whether the cell should be locked for editing when the <see cref="T:C1.C1Excel.XLSheet"/>
            is protected.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderLeft">
            <summary>
            Gets or sets the line style used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderRight">
            <summary>
            Gets or sets the line style used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderTop">
            <summary>
            Gets or sets the line style used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderBottom">
            <summary>
            Gets or sets the line style used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderStyle(C1.C1Excel.XLLineStyleEnum)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorLeft">
            <summary>
            Gets or sets the color used to draw the left border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorRight">
            <summary>
            Gets or sets the color used to draw the right border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorTop">
            <summary>
            Gets or sets the color used to draw the top border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.BorderColorBottom">
            <summary>
            Gets or sets the color used to draw the bottom border.
            </summary>
            <remarks>Use the <see cref="M:C1.C1Excel.XLStyle.SetBorderColor(System.Drawing.Color)"/> method to set all borders at once.</remarks>
        </member>
        <member name="P:C1.C1Excel.XLStyle.Diagonal">
            <summary>
            Gets or sets which diagonal lines to display (none, forward, backward).
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalStyle">
            <summary>
            Gets or sets the line style used to draw the diagonal lines.
            </summary>
        </member>
        <member name="P:C1.C1Excel.XLStyle.DiagonalColor">
            <summary>
            Gets or sets the color used to draw the diagonal lines.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.FontSubSet">
            <summary>
            Summary description for FontSubSet.
            </summary>
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.OutputBuffer">
            get output font buffer for used glyphs only.
        </member>
        <member name="P:C1.C1Pdf.FontSubSet.IsBold">
            get or set used glyphs for this font.
        </member>
        <member name="T:C1.C1Pdf.FontSubSet.BigEndianBinaryReader">
            <summary>
            TTF files are stored in big-endian format, we need special 
            readers and writers
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotationCollection">
            <summary>
            PdfAnnotationCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAnnotation">
            <summary>
            PdfAnnotation
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfArabic">
            <summary>
            Class for support Arabic character shaping.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Paperclip">
            <summary>
            Paper Clip attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.PushPin">
            <summary>
            Pushpin attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Tag">
            <summary>
            Tag attachment icon.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.AttachmentIconEnum.Graph">
            <summary>
            Graph attachment icon.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfAttachment">
            <summary>
            Summary description for PdfAttachment.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmarkCollection">
            <summary>
            PdfBookmarkCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfBookmark">
            <summary>
            PdfBookmark
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Clip">
            <summary>
            Image is clipped to the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Stretch">
            <summary>
            Image is stretched to fill the rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageSizeModeEnum.Scale">
            <summary>
            Image is scaled to fill as much of the rectangle as possible,
            while keeping the original aspect ratio.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Low">
            <summary>
            Low quality, small file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Medium">
            <summary>
            Medium quality, medium file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.Default">
            <summary>
            High quality, medium/large file size.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.ImageQualityEnum.High">
            <summary>
            Highest quality, largest file size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocumentBase"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Clear">
            <summary>
            Restores the document to its initial state.
            </summary>
            <remarks>
            All current content and security settings are discarded, a single empty page is created, and 
            the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property is set to zero.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.NewPage">
            <summary>
            Starts a new page.
            </summary>
            <remarks>
            Adds a blank page to the document and sets the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.CurrentPage"/> property 
            to make it the currently active page.
            <para>The size of the new page is defined by the value of the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            <para>If you want the new page to have a different size than the rest of the document, 
            create the new page first, then set the <see cref="P:C1.C1Pdf.C1PdfDocumentBase.PageSize"/> property.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.String)">
            <summary>
            Saves the Pdf document to a file.
            </summary>
            <param name="fileName">Name of the Pdf file to create.</param>
            <remarks>
            Saving the Pdf document to a file requires that the file be available 
            for writing. If the file already exists and is in use by an application 
            (such as the Adobe Acrobat Reader), the method will throw an exception.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Save(System.IO.Stream)">
            <summary>
            Saves the Pdf document to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> object to use for saving the document.</param>
            <remarks>
            Saving the Pdf document to a <see cref="T:System.IO.Stream"/> object is often used in Web 
            scenarios, when you are creating a Response object or storing the document in the 
            a cache, and don't want to create temporary files.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.BeginPathInternal">
            <summary>
            For internal use only. Starts a new path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPathInternal">
            <summary>
            For internal use only. Ends the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPathInternal">
            <summary>
            For internal use only. Starts adding elements to the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RestartPathInternal">
            <summary>
            For internal use only. Begin a new sub-path by moving the current point to coordinates (x, y).
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CloseFigureInternal">
            <summary>
            For internal use only. Fills/strokes the current path at closed figure.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.FillStrokeInternal(System.Boolean,System.Boolean,System.Boolean,System.Drawing.Drawing2D.FillMode)">
            <summary>
            For internal use only. Fills/strokes the current path.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.UpdateResources(System.Object)">
            <summary>
            For internal use only. Updates resources of specified type.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.EndPage">
            <summary>
            For internal use only. Closes page stream, clears page pointer.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartPage">
            <summary>
            For internal use only. Adds a page to the page collection, opens stream writer on the new page.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.StartOverlay(System.Int32)">
            <summary>
            For internal use only. Reopens a page for additional output.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font)">
            <summary>
            For internal use only. Sets the current font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetFont(System.Drawing.Font,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            For internal use only. Sets the current font, check text for special characters.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize">
            <summary>
            For internal use only. Gets the current font size.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontSize(System.Drawing.Font)">
            <summary>
            For internal use only. Gets the size of a given font.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetPen(System.Drawing.Pen)">
            <summary>
            For internal use only. Sets the current pen.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.SetBrush(System.Drawing.Brush)">
            <summary>
            For internal use only. Sets the current brush.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetAlternativeFont(C1.C1Pdf.PdfFont,System.String)">
            <summary>
            Find best alternative font for font and text. 
            </summary>
            <param name="pdfFont"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetFontBlocks(System.String,System.Int32[])">
            <summary>
            Get array (part of text, font, kerns of part of text).
            </summary>
            <param name="text"></param>
            <param name="kerns"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean)">
            <summary>
            For internal use only. Output text to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.TextOut(System.String,System.Drawing.PointF,System.Drawing.StringAlignment,System.Boolean,System.Int32[],System.Single)">
            <summary>
            For internal use only. Output text with kerning information to current Pdf stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MoveTo(System.Single,System.Single)">
            <summary>
            For internal use only. Moves cursor to a specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.LineTo(System.Single,System.Single)">
            <summary>
            For internal use only. Draws a line from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.CurveTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            For internal use only. Draws a curve from the cursor to the specified position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Rectangle(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws a rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.PieArc(System.Drawing.RectangleF,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            For internal use only. Draws a pie slice or an arc.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.RoundRect(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            For internal use only. Draws a rounded rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Ellipse(System.Drawing.RectangleF)">
            <summary>
            For internal use only. Draws an ellipse.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Polygon(System.Drawing.PointF[])">
            <summary>
            For internal use only. Draws a polygon.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetStreamPosition">
            <summary>
            For internal use only. Gets the Position on the page stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetCurrentID">
            <summary>
            For internal use only. Gets the ID of the last object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.GetNewID">
            <summary>
            For internal use only. Increments the ID for the next object.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Write(System.String,System.Object[])">
            <summary>
            Writes raw content into the Pdf stream for the current page.
            </summary>
            <param name="format">Format string, as in <see cref="M:System.String.Format(System.String,System.Object)"/>.</param>
            <param name="args">Array of objects to write using <paramref name="format"/>.</param>
            <remarks>
            This is a low-level method that allows you to insert Pdf commands directly 
            into the page stream. It is intended for use by derived classes and requires 
            knowledge of the Pdf document structure and syntax.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.Normalize(System.Drawing.RectangleF)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocumentBase.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <remarks>The new document contains a single empty page, and the
            default page size is set to Letter (8.5 x 11 inches).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.Printing.PaperKind,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="paperKind">The default paper size for the document.</param>
            <param name="landscape">The default paper orientation for the document.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>paperKind</paramref>
            and <paramref>landscape</paramref> parameters.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.#ctor(System.Drawing.SizeF)">
            <summary>
            Creates a new instance of the <see cref="T:C1.C1Pdf.C1PdfDocument"/> class.
            </summary>
            <param name="pageSizeInPoints">The default paper size for the document, in points.</param>
            <remarks>The new document contains a single empty page, and the
            default page size is set to the value of the <paramref>pageSizeInPoints</paramref>
            parameter.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to draw.</param>
            <param name="width">Width of the rectangle to draw.</param>
            <param name="height">Height of the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of a rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="x">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="y">x-coordinate of the upper-left corner of the rectangle to fill.</param>
            <param name="width">Width of the rectangle to fill.</param>
            <param name="height">Height of the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of a rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draws a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to draw.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fills the interior of a rounded rectangle specified by <see cref="T:System.Drawing.RectangleF"/> and <see cref="T:System.Drawing.SizeF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the rectangle.</param>
            <param name="rc">A <see cref="T:System.Drawing.RectangleF"/> structure that represents the rectangle to fill.</param>
            <param name="corners">A <see cref="T:System.Drawing.SizeF"/> structure that contains the radius of the rectangle corners.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="x1">x-coordinate of the first point.</param>
            <param name="y1">y-coordinate of the first point.</param>
            <param name="x2">x-coordinate of the second point.</param>
            <param name="y2">y-coordinate of the second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a line connecting two <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line.</param>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of line segments that connect an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the line segments.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points to connect.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Fills a polygon defined by an array of <see cref="T:System.Drawing.PointF"/> structures using the specified fill mode.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the polygon.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the vertices of the polygon.</param>
            <param name="fillMode"><see cref="T:System.Drawing.Drawing2D.FillMode"/> parameter that determines how to handle overlapping areas within the polygon.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws a Bezier spline defined by four <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bezier spline.</param>
            <param name="start"><see cref="T:System.Drawing.PointF"/> structure that represents the starting point of the curve.</param>
            <param name="ctl1"><see cref="T:System.Drawing.PointF"/> structure that represents the first control point for the curve.</param>
            <param name="ctl2"><see cref="T:System.Drawing.PointF"/> structure that represents the second control point for the curve.</param>
            <param name="end"><see cref="T:System.Drawing.PointF"/> structure that represents the ending point of the curve.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws a series of Bezier splines from an array of <see cref="T:System.Drawing.PointF"/> structures.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the Bezier splines.</param>
            <param name="points">Array of <see cref="T:System.Drawing.PointF"/> structures that represent the points that determine the curve.</param>
            <remarks>
            <para>The first spline requires four points, and each additional spline requires
            three additional points (it starts from the last point in the previous spline). 
            Therefore, the <paramref name="points"/> array must contain at least four points,
            and the total length minus one must be a multiple of three.</para>
            <para>All coordinates are expressed in points, measured from the upper-left corner of the page.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the rectangle.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a coordinate pair, a width, and a height.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="x">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="y">x-coordinate of the upper-left corner of the bounding rectangle.</param>
            <param name="width">Width of the bounding rectangle.</param>
            <param name="height">Height of the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills the interior of an ellipse defined by a bounding rectangle specified by a <see cref="T:System.Drawing.RectangleF"/> structure.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the ellipse.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the bounding rectangle.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills a pie shape defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the pie shape.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="pen"><see cref="T:System.Drawing.Pen"/> object that determines the color, width, and style of the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the arc.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fills an arc defined by an ellipse specified by a <see cref="T:System.Drawing.RectangleF"/> structure and two radial lines.
            </summary>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that determines the color used to fill the arc.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that represents the bounding rectangle of the ellipse that contains the pie shape.</param>
            <param name="startAngle">Angle measured in degrees clockwise from the x-axis to the first side of the pie shape.</param>
            <param name="sweepAngle">Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.</param>
            <remarks>All coordinates are expressed in points, measured from the upper-left corner of the page.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measures the specified string when drawn with the specified <see cref="T:System.Drawing.Font"/> 
            object and formatted with the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <param name="sf">A <see cref="T:System.Drawing.StringFormat"/> object that determines whether word wrapping is allowed.</param>
            <returns>The size of the string expressed in points.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload wraps the string to prevent any lines from getting
            wider than the <paramref name="width"/> parameter. The value returned contains
            the given width and the height needed to render the entire string.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measures the specified string when drawn with a given <see cref="T:System.Drawing.Font"/> object. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>This overload returns the width and height of the string without wrapping.
            Unless the <paramref name="text"/> parameter contains line break characters, the 
            height returned corresponds to the font height.</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <param name="firstChar">Index of the first character that will be rendered.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle.</returns>
            <remarks>
            <para>The <paramref name="sf"/> contains properties that specify formatting options. Use the
            <see cref="P:System.Drawing.StringFormat.Alignment"/> property to specify horizontal alignment and the
            <see cref="P:System.Drawing.StringFormat.LineAlignment"/> property to specify vertical alignment.</para>
            <para>Use the <see cref="P:System.Drawing.StringFormat.FormatFlags"/> property to specify clipping and wrapping.</para>
            <para>To render text in the vertical direction, use the <see cref="F:System.Drawing.StringFormatFlags.DirectionVertical"/>.
            By itself, this flag will cause text to render from the bottom to the top of the rectangle.
            Combined with the <see cref="F:System.Drawing.StringFormatFlags.DirectionRightToLeft"/> flags, it will cause text to render from
            the top to the bottom of the rectangle.</para>
            <para>The <b>DrawString</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page.</para>
            </remarks>
            <example>
            The code below renders a long string into several pages, using the return value
            from the <b>DrawString</b> method to determine where to continue printing.
            <code>
            // render string spanning multiple pages
            for (int start = 0; start &lt; int.MaxValue;)
            {
            	// render as much as will fit into the rectangle
            	start = _c1pdf.DrawString(text, font, Brushes.Black, rcPage, start);
            		
            	// move on to the next page
            	_c1pdf.NewPage();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws the specified text string in the specified rectangle with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="firstChar">Index of the first character that will be rendered.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws the specified text string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, 
            in points from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <remarks>
            This overload renders strings aligned to the top left corner of the specified rectangle,
            wrapping text as needed within the rectangle, without clipping, and in the horizontal
            direction. To change any of these defaults, use the overload that allows you to specify
            a <see cref="T:System.Drawing.StringFormat"/> parameter.
            </remarks>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects using the 
            formatting attributes of the specified <see cref="T:System.Drawing.StringFormat"/> object.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points</param>
            <param name="sf"><see cref="T:System.Drawing.StringFormat"/> object that specifies formatting attributes applied to the drawn text.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Draws the specified text string at the specified point with the 
            specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">String to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="pt"><see cref="T:System.Drawing.PointF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or int.MaxValue if the whole string was rendered.</returns>
            <seealso cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32,System.Drawing.StringFormat)"/>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.ContentAlignment,C1.C1Pdf.ImageSizeModeEnum)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            adjusting the image size as specified by the <paramref name="align"/> and 
            <paramref name="mode"/> parameters.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="align"><see cref="T:System.Drawing.ContentAlignment"/> value that specifies how the image should be aligned within the rectangle.</param>
            <param name="mode"><see cref="T:C1.C1Pdf.ImageSizeModeEnum"/> value that specifies how the image should be sized to fit the rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            stretching it to fit the destination rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <remarks>
            The <b>DrawImage</b> method can be used to render bitmaps and metafiles. When used with
            metafiles, it enumerates the drawing commands in the metafile and translates them into low-level
            drawing primitives. This results in resolution-independent images.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the specified <see cref="T:System.Drawing.Image"/> object at the specified location,
            clipping the output to the given clipping rectangle.
            </summary>
            <param name="img"><see cref="T:System.Drawing.Image"/> object to draw.</param>
            <param name="rcImage"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn image, in points from the top left corner of the page.</param>
            <param name="rcClip"><see cref="T:System.Drawing.RectangleF"/> structure that specifies a clipping rectangle on the page. No part of the image is drawn outside the clipping rectangle.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font"/> object
            into a rectangle with the specified width. 
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <param name="width">Maximum width of the string.</param>
            <returns>The size of the string expressed in points.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes
            Rtf (Rich Text Format) strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>For details, see the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.MeasureStringRtf(System.String,System.Drawing.Font)">
            <summary>
            Measures an Rtf string when drawn with a given <see cref="T:System.Drawing.Font"/> object.
            </summary>
            <param name="text">String to measure.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the text.</param>
            <returns>The size of the string expressed in points.</returns>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects.
            </summary>
            <param name="text">Rtf string to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left 
            corner of the page.</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>There are two types of Rtf strings:</para>
            <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox"/> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are not used.</para>
            <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are used
            to build the Rtf header automatically.</para>
            <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. To do this, use the overload that
            takes the starting character in the text as a parameter.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.DrawStringRtf(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Int32)">
            <summary>
            Draws an Rtf string in the specified rectangle with the specified <see cref="T:System.Drawing.Brush"/> and <see cref="T:System.Drawing.Font"/> objects,
            starting at a given offset within the string.
            </summary>
            <param name="text">Rtf string to draw.</param>
            <param name="font"><see cref="T:System.Drawing.Font"/> object that defines the appearance and size of the drawn text.</param>
            <param name="brush"><see cref="T:System.Drawing.Brush"/> object that defines the color of the drawn text.</param>
            <param name="rc"><see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text, in points from the top left corner of the page.</param>
            <param name="firstChar">Index of the first character to draw (usually the return value of a previous call to <b>DrawStringRtf</b>).</param>
            <returns>The index of first character that was not printed because it did not fit in the specified rectangle, or the value of 
            <see>int.MaxValue</see> if the entire string was rendered.</returns>
            <remarks>
            <para>This method is similar to <see cref="M:C1.C1Pdf.C1PdfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)"/>, except it recognizes Rtf (Rich Text Format) 
            strings like those used in the <see cref="T:System.Windows.Forms.RichTextBox"/> control.</para>
            <para>There are two types of Rtf strings:</para>
            <para>1) Complete Rtf strings contain an Rtf header that specifies the fonts and colors
            used within the string. These strings can be obtained from a <see cref="T:System.Windows.Forms.RichTextBox"/> control
            using the <see cref="P:System.Windows.Forms.RichTextBox.Rtf"/> property, or from Rtf files saved to disk.
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are not used.</para>
            <para>2) Partial Rtf strings contain embedded Rtf tags but no Rtf header. These strings
            are easy to build in code and can be used to render text with special attributes such as 
            bold and italics (for example: "this text contains {\b BOLD} and {\i ITALICS}".
            In this case, the <paramref name="font"/> and <paramref name="brush"/> parameters are used
            to build the Rtf header automatically.</para>
            <para>The <b>DrawStringRtf</b> method returns the index of the first character that was not 
            printed because it did not fit the output rectangle. You can use this value make text flow from 
            page to page, or from one frame to another within a page. Note that this value is not an index 
            into the raw Rtf input, but into the text represented by the Rtf. See example below.</para>
            </remarks>
            <example>
            The code below renders a long string into several pages, using the return value
            from the <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/> method to determine where to continue printing.
            <code>
            // calculate page rectangle
            RectangleF rcPage = _c1pdf.PageRectangle;
            rcPage.Inflate(-72, -72);
            
            // get Rtf to render
            string text = richTextBox1.Rtf;
            
            // print the Rtf string spanning multiple pages
            _c1pdf.Clear();
            for (int start = 0; start &lt; int.MaxValue; )
            {
                if (start &gt; 0) _c1pdf.NewPage();
                start = _c1pdf.DrawStringRtf(text, Font, 
                       Brushes.Black, rcPage, start);
            }
            
            // show the result
            string fn = @"c:\temp\test\rtf.pdf";
            _c1pdf.Save(fn);
            System.Diagnostics.Process.Start(fn);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the current page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="y">Position on the current page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddBookmark(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a bookmark to the specified page.
            </summary>
            <param name="text">Text that appears on the outline tree.</param>
            <param name="level">Outline level (zero is the top level).</param>
            <param name="page">Index of the page that contains the bookmark.</param>
            <param name="y">Position on the specified page where the outline entry is located (in points).</param>
            <remarks>
            Most long Pdf documents contain an outline structure that is displayed on a pane 
            on the left of the reader. The outline makes it easy to browse through a 
            document's structure and find specific topics. The <b>AddBookmark</b>
            method allows you to build this outline structure by adding outline entries
            (bookmarks).</remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the current page.
            </summary>
            <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink to the document.
            </summary>
            <param name="url">Link destination (can be a Url, a file name, or a local link destination).</param>
            <param name="page">Index of the page that contains the hyperlink</param>
            <param name="rc">Area on the page that will behave as a link (expressed in points, from the top-left corner of the page).</param>
            <remarks>
            <para>Hyperlinks can be external (Urls and file names) or local (other locations within the same document).</para>
            <para>Local links are useful when you want to implement some type of cross-referencing within the document, such 
            as a table of contents or an index. Local links are identical to regular hyperlinks, except for two things:</para>
            <para>1) The <paramref name="url"/> parameter must start with a "#", and </para>
            <para>2) You must specify the target location for the link using the <see cref="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)"/> method.</para>
            <para>Note that the <b>AddLink</b> method does not add any visible content to the page, so you will 
            usually need another command along with <b>AddLink</b> to specify some text or an image that the user 
            can see, as the example below demonstrates.</para>
            </remarks>
            <example>
            The code below adds a string that says "Visit ComponentOne" and a link that takes the user to the ComponentOne home page:
            <code>
            RectangleF rc = new RectangleF(50, 50, 100, 15);
            Font font = new Font("Arial", 10, FontStyle.Underline);
            _c1pdf.AddLink("http://www.componentone.com", rc);
            _c1pdf.DrawString("Visit ComponentOne", font, Brushes.Blue, rc);
            </code>
            </example>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the current page.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddTarget(System.String,System.Int32,System.Drawing.RectangleF)">
            <summary>
            Adds a hyperlink target to the document.
            </summary>
            <param name="name">Name of the target (used in the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method).</param>
            <param name="page">Index of the page that will contain the hyperlink target.</param>
            <param name="rc">Area on the page that will behave as a target (in points from the top-left corner of the page).</param>
            <remarks>
            This method is used to add targets for local hyperlinks. See the <see cref="M:C1.C1Pdf.C1PdfDocument.AddLink(System.String,System.Drawing.RectangleF)"/> method for details and an example.
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the current page.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
        </member>
        <member name="M:C1.C1Pdf.C1PdfDocument.AddAttachment(System.String,System.Drawing.RectangleF,System.Int32,C1.C1Pdf.AttachmentIconEnum,System.Drawing.Color)">
            <summary>
            Adds a file attachment to the document.
            </summary>
            <param name="fileName">Name of the file that will be included as an attachment.</param>
            <param name="rc">Area of the page that will contain the attachment (in points measured from the top-left corner of the page).</param>
            <param name="page">Index of the page that contains the attachment.</param>
            <param name="icon"><see cref="T:C1.C1Pdf.AttachmentIconEnum"/> value that determines the appearance of the attachment icon.</param>
            <param name="iconColor"><see cref="T:System.Drawing.Color"/> of the attachment icon.</param>
            <remarks>
            When the user moves the mouse over an area of the page that contains an attachment, 
            the mouse pointer and tool tip change to indicate that the user can retrieve the attachment. 
            The user can right-click the attachment area to open or save the attachment.
            </remarks>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.PageSize">
            <summary>
            Gets or sets the default page size for the document (in points).
            </summary>
        </member>
        <member name="P:C1.C1Pdf.C1PdfDocument.CurrentPage">
            <summary>
            Gets or sets the index of the current page within the document.
            </summary>
            <remarks>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property determines which page of the document should 
            receive the output from the methods that generate content (e.g. <see cref="M:C1.C1Pdf.C1PdfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)"/>).</para>
            <para>The value is an integer ranging from -1 (no active page) to <see cref="P:C1.C1Pdf.C1PdfDocumentBase.Pages"/>.<see cref="P:System.Collections.ArrayList.Count"/>-1.</para>
            <para>You rarely have to use the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property while creating a document. 
            When a <see cref="T:C1.C1Pdf.C1PdfDocument"/> object is created, a blank page is automatically added 
            and becomes the current page, so you can immediately start adding content to it.
            When the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method is invoked, a new page is added to the document 
            and becomes the current page.</para>
            <para>The <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property is useful when you want to reopen pages that 
            have already been generated and add content to them (for example, page headers and footers).</para>
            </remarks>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.None">
            <summary>
            No compression (useful for debugging).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestSpeed">
            <summary>
            Low compression, fastest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.BestCompression">
            <summary>
            Highest compression, slowest save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.CompressionEnum.Default">
            <summary>
            High compression, fast save.
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Standard">
            <summary>
            Use only standard Pdf fonts (Helvetica, Times, Symbol).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.TrueType">
            <summary>
            Use TrueType fonts, no embedding (viewer must have fonts installed).
            </summary>
        </member>
        <member name="F:C1.C1Pdf.FontTypeEnum.Embedded">
            <summary>
            Use embedded TrueType fonts.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.CurrentEncoding">
            <summary>
            CurrentEncoding
            get encoding used for entry names and comments
            NOTE: this is culture-dependent, which seems like a terrible idea
            but that is apparently what works for the Japanese...
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfDocumentInfo.CreationDate">
            <summary>
            Gets or sets the creation date and time of the Pdf document.
            </summary>
            <remarks>
            <para>The default value for this property is the <b>DateTime.MinValue</b>, which
            causes <see cref="T:C1.C1Pdf.C1PdfDocument"/> to use the date and time when the document
            is saved as the creation date.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Pdf.PdfFontCollection">
            <summary>
            PdfFontCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFont">
            <summary>
            PdfFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfFontEUDC">
            <summary>
            PdfEUDCFont
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageCollection">
            <summary>
            PdfImageCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImage">
            <summary>
            PdfImage
            store an image to allow reuse, write it out to Pdf format
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB">
            <summary>
            Summary description for PdfImageDIB.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfImageDIB.BitmapInfo">
            <summary>
            BitmapInfo
            reads a BITMAPINFOHEADER structure, provides a few utilities
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfLink">
            <summary>
            PdfLink
            a link to an external document (URI) or to a location within
            this document (PdfTarget).
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfTarget">
            <summary>
            PdfTarget
            target areas for internal links.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter">
            <summary>
            Summary description for PdfMetafile.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfMetafileConverter.IsCJK(System.String)">
            <summary>
            Is CJK (Chinese, Japanese, and Korean) of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is CJK, otherwise false.</returns>
        </member>
        <member name="T:C1.C1Pdf.PdfMetafileConverter.Clipper">
            <summary>
            Clipper
            Relies on owner's _clipRect. Implements IDisposable to allow this pattern:
            using (new Clipper(this))		// ctor starts clipping
            {
            	// draw clipped stuff
            }								// implicit Dispose ends clipping
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObjectCollection">
            <summary>
            PdfObjectCollection
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfObject">
            <summary>
            PdfObject
            simple class used to manage unique object IDs and the position
            of each object in the output stream.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(C1.C1Pdf.PdfPage)">
            <summary>
            Adds a page to the document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <returns>The index of the new page in the document.</returns>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,C1.C1Pdf.PdfPage)">
            <summary>
            Inserts a page at a specific position in the document.
            </summary>
            <param name="index">Position where the new page will be inserted in the document.</param>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove an existing page from the document 
            first, then add that page back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(C1.C1Pdf.PdfPage)">
            <summary>
            Removes a page from a document.
            </summary>
            <param name="page"><see cref="T:C1.C1Pdf.PdfPage"/> to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page at a specific position from the document.
            </summary>
            <param name="index">Index of the page to be removed from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection"/> to the end of the document.
            </summary>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the elements of an <see cref="T:System.Collections.ICollection"/> at a specified position 
            in the document.
            </summary>
            <param name="index">Position where the new pages will be inserted.</param>
            <param name="c">Collection of <see cref="T:C1.C1Pdf.PdfPage"/> objects to add to the document.</param>
            <remarks>
            <para>Since the <see cref="T:C1.C1Pdf.PdfPage"/> class has no public constructors, the only 
            way to use this overload is to remove existing pages from the document 
            first, then add them back into the document.</para>
            <para>Each page can appear only once in the document. Trying to add the same 
            page twice will throw an exception.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of pages from the document.
            </summary>
            <param name="index">Index of the first page to remove.</param>
            <param name="count">Number of pages to remove from the document.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> and adds it to the end of the document.
            </summary>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> 
            property of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the 
            <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the 
            <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.SizeF)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="pageSize">The size of the new page, in points.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new <see cref="T:C1.C1Pdf.PdfPage"/> with the specified size and adds it to 
            the end of the document.
            </summary>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
            <returns>The index of the new page.</returns>
            <remarks>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            <para>You can also add pages to a <see cref="T:C1.C1Pdf.C1PdfDocument"/> by calling the <see cref="M:C1.C1Pdf.C1PdfDocumentBase.NewPage"/> method.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32)">
            <summary>
            Creates a new page and inserts it at a specific position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <remarks>
            <para>The size of the new page is determined by the <see cref="P:C1.C1Pdf.C1PdfDocument.PageSize"/> property 
            of the parent document.</para>
            <para>The new page becomes current after it is added to the document (see the <see cref="P:C1.C1Pdf.C1PdfDocument.CurrentPage"/> property).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.SizeF)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="pageSize">The size of the new page, expressed in points.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Drawing.Printing.PaperKind)">
            <summary>
            Creates a new page with the specified size and inserts it at a specific 
            position in the document.
            </summary>
            <param name="index">The position where the new page will be inserted.</param>
            <param name="paperKind">The size of the new page, expressed as a <see cref="T:System.Drawing.Printing.PaperKind"/>.</param>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Clear">
            <summary>
            Removes all pages from the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Add(System.Object)">
            <summary>
            Adds a new page to the document.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a new page to the document at a specific position.
            </summary>
        </member>
        <member name="M:C1.C1Pdf.PdfPageCollection.Remove(System.Object)">
            <summary>
            Removes a page from the document.
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:C1.C1Pdf.PdfPage"/> at a specific position in the document.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfPage">
            <summary>
            PdfPage
            </summary>
        </member>
        <member name="P:C1.C1Pdf.PdfPage.Tag">
            <summary>
            Gets or sets an object associated with the page that contains data
            useful to the application.
            </summary>
        </member>
        <member name="T:C1.C1Pdf.PdfRtf">
            <summary>
            Summary description for PdfRtf.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buff"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buff"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            ZStreamException
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBookmarkCollection">
            <summary>
            RTF fonts table object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Add(C1.C1Rtf.Object.RtfBookmark)">
            <summary>
            Adds the RTF bookmark to the collection.
            </summary>
            <param name="obj">RTF bookmark for the RTF bookmark.</param>
            <returns>Index from the collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Clear">
            <summary>
            Removes all RTF bookmarks from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Contains(C1.C1Rtf.Object.RtfBookmark)">
            <summary>
            Determines whether the RTF bookmark is located within the collection.
            </summary>
            <param name="obj">RTF bookmark for the RTF bookmark.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Contains(System.String)">
            <summary>
            Determines whether the bookmark with name is located within the collection.
            </summary>
            <param name="name">The text name of the bookmark.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.IndexOf(C1.C1Rtf.Object.RtfBookmark)">
            <summary>
            Returns the index within the collection of the element.
            </summary>
            <param name="obj">The RTF bookmark for the RTF document.</param>
            <returns>The zero-based index of the first occurrence of element, if found, otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.IndexOf(System.String)">
            <summary>
            Returns the index within the collection of the element.
            </summary>
            <param name="name">The text name of the bookmark.</param>
            <returns>The zero-based index of the first occurrence of element, if found, otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Insert(System.Int32,C1.C1Rtf.Object.RtfBookmark)">
            <summary>
            Inserts an item into the RTF bookmark collection of the RTF bookmark at the specified index.
            </summary>
            <param name="index">The specified index of the RTF bookmark.</param>
            <param name="obj">RTF bookmark for the RTF bookmark.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.Remove(C1.C1Rtf.Object.RtfBookmark)">
            <summary>
            Removes the specified RTF bookmark from the collection.
            </summary>
            <param name="obj">RTF bookmark for the RTF bookmark.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index within the collection.
            </summary>
            <param name="index">The specified index of the RTF bookmark.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmarkCollection.Count">
            <summary>
            Gets the number of RTF bookmark in the collection.
            </summary>
            <value>The number of bookmarks.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmarkCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF bookmark at the specified index within the collection.
            </summary>
            <value>The RTF bookmark.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmarkCollection.Item(System.String)">
            <summary>
            Gets the RTF bookmark at the specified name within the collection.
            </summary>
            <value>The RTF bookmark.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBookmark">
            <summary>
            Summary description for RtfBookmark.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfObject">
            <summary>
            The base RTF object.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfObject._owner">
            <summary>The owner RTF object for this object.</summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfObject.#ctor">
            <summary>
            RTF object default constructor.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfObject.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Rtf.Object.RtfObject"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Rtf.Object.RtfObject"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfObject.ToString">
            <summary>
            Gets RTF format string value for this object.
            </summary>
            <returns>The RTF format string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfObject.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.IDocumentContent">
            <summary>
            The RTF object for document content.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.IContent">
            <summary>
            The RTF object for document content.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.IParagraphContent">
            <summary>
            The RTF object for paragraph content.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmark.Name">
            <summary>
            Gets name of the RTF bookmark.
            </summary>
            <value>The text name of the bookmark.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmark.Pair">
            <summary>
            Gets pair start for end or end for start bookmark.
            </summary>
            <value>The pair bookmark.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBookmark.IsEmpty">
            <summary>
            Gets is empty this bookmark.
            </summary>
            <value><b>true</b> if this bookmark is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBookmarkStart">
            <summary>
            Summary description for RtfBookmark.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkStart.#ctor(System.String)">
            <summary>
            The bookmark start object (must be pair - bookmark end).
            </summary>
            <param name="name">The name of the bookmark.</param>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBookmarkEnd">
            <summary>
            Summary description for RtfBookmark.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBookmarkEnd.#ctor(System.String)">
            <summary>
            The bookmark end object (must be pair - bookmark start).
            </summary>
            <param name="name">The name of the bookmark.</param>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBreak">
            <summary>
            Summary description for RtfBreak.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfPageBreak">
            <summary>
            Summary description for RtfPage.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfPageBreak.#ctor">
            <summary>
            Rtf page break.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfLineBreak">
            <summary>
            Represents new line break into <see cref="T:C1.C1Rtf.Object.RtfSection"/> or <see cref="T:C1.C1Rtf.C1RtfDocument"/>.
            </summary>
            <example>
            Use line break for new paragraph into RTF:
            <code>
            RtfSection section = new RtfSection();
            section.Add(new RtfLineBreak());
            </code>
            </example>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfLineBreak.#ctor">
            <summary>
            The <see cref="T:C1.C1Rtf.Object.RtfLineBreak"/> object cunstructor.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfColumnBreak">
            <summary>
            Summary description for RtfColumn.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfColumnBreak.#ctor">
            <summary>
            The <see cref="T:C1.C1Rtf.Object.RtfColumnBreak"/> object cunstructor.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCellCollection">
            <summary>
            The collection of cells for the RTF table.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCollection">
            <summary>
            The collection base object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Contains(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Determines whether the RTF object is located within the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.IndexOf(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Returns the index within the collection of the element.
            </summary>
            <param name="obj">The RTF object for the RTF document.</param>
            <returns>The zero-based index of the first occurrence of element, if found, otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Insert(System.Int32,C1.C1Rtf.Object.RtfObject)">
            <summary>
            Inserts an item into the RTF object collection of the RTF object at the specified index.
            </summary>
            <param name="index">The specified index of the RTF object.</param>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Remove(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Removes the specified RTF object from the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index within the collection.
            </summary>
            <param name="index">The specified index of the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCollection.Clone(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Creates a new <see cref="T:C1.C1Rtf.Object.RtfCollection"/> that is a copy of the current collection.
            </summary>
            <param name="owner">The owner object.</param>
            <returns>A new <see cref="T:C1.C1Rtf.Object.RtfCollection"/> that is a copy of the current collection.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCollection.Count">
            <summary>
            Gets the number of RTF object in the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCollection.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF object at the specified index within the collection.
            </summary>
            <value>The RTF object.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCollection.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCellCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF cell at the specified index within the collection.
            </summary>
            <value>The RTF cell.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCell">
            <summary>
            Summary description for RtfCell.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfTableObject">
            <summary>
            Summary description for RtfTableObject.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfBorderObject">
            <summary>
            Summary description for RtfCell.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfBorderObject.#ctor(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Rtf table.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.TopBorderWidth">
            <summary>
            Gets or sets top border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.LeftBorderWidth">
            <summary>
            Gets or sets left border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.RightBorderWidth">
            <summary>
            Gets or sets right border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.BottomBorderWidth">
            <summary>
            Gets or sets bottom border width from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.TopBorderColor">
            <summary>
            Gets or sets top border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.LeftBorderColor">
            <summary>
            Gets or sets left border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.RightBorderColor">
            <summary>
            Gets or sets right border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.BottomBorderColor">
            <summary>
            Gets or sets bottom border color from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.TopBorderStyle">
            <summary>
            Gets or sets top border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.LeftBorderStyle">
            <summary>
            Gets or sets left border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.RightBorderStyle">
            <summary>
            Gets or sets rigth border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.BottomBorderStyle">
            <summary>
            Gets or sets bottom border style from the table element.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.ForeFilling">
            <summary>
            Gets or sets the foreground fillig color.
            </summary>
            <value>The foreground filling color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.BackFilling">
            <summary>
            Gets or sets the background fillig color.
            </summary>
            <value>The background filling color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfBorderObject.Pattern">
            <summary>
            Gets or sets the RTF pattern type.
            </summary>
            <value>The filling pattern type.</value>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfTableObject.#ctor(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Rtf table.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTableObject.Alignment">
            <summary>
            Gets or sets content of the table element alignment.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCell.#ctor(C1.C1Rtf.Object.RtfCellCollection)">
            <summary>
            Rtf cell.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCell.SetMerged(System.Int32,System.Int32)">
            <summary>
            Set merged for this cell.
            </summary>
            <param name="rows">The rows merged.</param>
            <param name="cols">The columns merged.</param>
            <returns><b>true</b> if it possible merged, otherwise <b>false</b>.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Index">
            <summary>
            Gets index of the cell collection for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Content">
            <summary>
            Gets or sets RTF item content for this cell.
            </summary>
            <value>The RTF item content collection.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Height">
            <summary>
            Gets height for this cell.
            </summary>
            <value>The height of the cell.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Width">
            <summary>
            Gets or sets width for this cell.
            </summary>
            <value>The width of the cell.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Right">
            <summary>
            Gets right position for this cell.
            </summary>
            <value>The right position of the cell.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.LeftPadding">
            <summary>
            Gets or sets left padding of this cell.
            </summary>
            <value>The left padding.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.TopPadding">
            <summary>
            Gets or sets top padding of this cell.
            </summary>
            <value>The top padding.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.RightPadding">
            <summary>
            Gets or sets right padding of this cell.
            </summary>
            <value>The right padding.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.BottomPadding">
            <summary>
            Gets or sets bottom padding of this cell.
            </summary>
            <value>The bottom padding.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.TextFlow">
            <summary>
            Gets or sets text flow (direct) of this cell.
            </summary>
            <value>The text flow.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Merge">
            <summary>
            Gets merge type for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.MergedCell">
            <summary>
            Gets merged cell for this cell or null.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.IsVisible">
            <summary>
            Gets visible or not this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.IsMerged">
            <summary>
            Gets merged or not this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.MergedRows">
            <summary>
            Gets merged rows for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.MergedColumns">
            <summary>
            Gets merged columns for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.ForeFilling">
            <summary>
            Gets or sets the foreground fillig color.
            </summary>
            <value>The foreground filling color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.BackFilling">
            <summary>
            Gets or sets the background fillig color.
            </summary>
            <value>The background filling color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCell.Pattern">
            <summary>
            Gets or sets the RTF pattern type.
            </summary>
            <value>The filling pattern type.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfColorCollection">
            <summary>
            RTF colors table object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColorCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF color at the specified index within the collection.
            </summary>
            <value>The RTF color.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfColor">
            <summary>
            The RTF color object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfColor.#ctor(System.Drawing.Color)">
            <summary>
            The RTF color constructor.
            </summary>
            <param name="clr">The drawing color.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfColor.op_Implicit(C1.C1Rtf.Object.RtfColor)~System.Drawing.Color">
            <summary>
            Convert implicitly to drawing color.
            </summary>
            <param name="color">The mate color object.</param>
            <returns>Aproximate color for RTF color.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColor.Color">
            <summary>
            Gets drawing aproximate color for this RTF color.
            </summary>
            <value>The aproximate color for this RTF color.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfContent">
            <summary>
            Summary description for RtfContent.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.IRtfContent">
            <summary>
            IRtfContent interface.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.IRtfContent.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.IRtfContent.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.IRtfContent.Count">
            <summary>
            Gets current count PTF objects in collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfInnerContent">
            <summary>
            Summary description for RtfUnknownContent.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInnerContent.CopyTo(C1.C1Rtf.Object.RtfParagraph)">
            <summary>
            Copy to content the RTF paragraph object.
            </summary>
            <param name="paragraph">The paragraph object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInnerContent.CopyTo(C1.C1Rtf.Object.IRtfContent)">
            <summary>
            Copy to content other content.
            </summary>
            <param name="content">The RTF content.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInnerContent.IsParagraph">
            <summary>
            Gets paragraph or no this content.
            </summary>
            <value><b>true</b> if is paragraph content, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfDateTime">
            <summary>
            The RTF date and time object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfDateTime.#ctor(System.DateTime)">
            <summary>
            The RTF date time object constructor.
            </summary>
            <param name="value">The DateTime object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfDateTime.op_Implicit(C1.C1Rtf.Object.RtfDateTime)~System.DateTime">
            <summary>
            Convert implicitly to DateTime.
            </summary>
            <param name="dt">The mate date and time object.</param>
            <returns>Aproximate DateTime for RTF date and time.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfDateTime.DateTime">
            <summary>
            Gets date and time for this RTF date and time.
            </summary>
            <value>The RTF date and time.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfField.ToString">
            <summary>
            Every object in C# inherits the ToString method,
            which returns a string representation of that object.
            </summary>
            <returns>The string representation of that object.</returns>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfSimpleField">
            <summary>
            Simple field class for automatic macro value RTF fields.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSimpleField.ToString">
            <summary>
            Every object in C# inherits the ToString method,
            which returns a string representation of that object.
            </summary>
            <returns>The string representation of that object.</returns>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfPageField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfNumPagesField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfNumWordsField">
            <summary>
            Nummeric words class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfDateField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfTimeField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfFileNameField">
            <summary>
            Base class for RTF fields.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfFontCollection">
            <summary>
            RTF fonts table object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFontCollection.GetFontByNumber(System.Int32)">
            <summary>
            Gets the RTF font at the specified number within the font collection.
            </summary>
            <param name="number">The font number.</param>
            <returns>The RTF font if found, otherwise null.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFontCollection.GetNumberByFont(System.Drawing.Font)">
            <summary>
            Gets the specified number at the RTF font within the font collection.
            </summary>
            <param name="font">The drawing font.</param>
            <returns>The font number.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFontCollection.Contains(System.Drawing.Font)">
            <summary>
            Determines whether the drawing font is located within the collection.
            </summary>
            <param name="font">The drawing font.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFontCollection.IndexOf(System.Drawing.Font)">
            <summary>
            Returns the index within the collection of the element.
            </summary>
            <param name="font">The drawing font.</param>
            <returns>The zero-based index of the first occurrence of element, if found, otherwise, -1.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfFontCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF font at the specified index within the collection.
            </summary>
            <value>The RTF font.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfFont">
            <summary>
            The RTF font object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFont.#ctor(System.Drawing.Font)">
            <summary>
            The RTF font constructor.
            </summary>
            <param name="font">The drawing font.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFont.GetAproximateFont(System.Single,System.Drawing.FontStyle)">
            <summary>
            Gets drawing aproximate font for this RTF font.
            </summary>
            <param name="fontSize">The font size of drawing font.</param>
            <param name="style">The .NET drawing font style.</param>
            <returns>The .NET drawing font.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfFont.op_Implicit(C1.C1Rtf.Object.RtfFont)~System.Drawing.Font">
            <summary>
            Convert implicitly to drawing font.
            </summary>
            <param name="rtfFont">The mate font object.</param>
            <returns>Aproximate font for RTF font.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfFont.Number">
            <summary>
            Gets font's number at order into font table.
            </summary>
            <value>The RTF font's number.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfFont.CharSet">
            <summary>
            Gets font's char set.
            </summary>
            <value>The RTF font's char set.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfHeaderFooter">
            <summary>
            Summary description for RtfHeaderFooter.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHeaderFooter.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHeaderFooter.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHeaderFooter.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHeaderFooter.Count">
            <summary>
            Gets current count PTF objects in collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHeaderFooter.Content">
            <summary>
            Gets RTF header or footer content for this object.
            </summary>
            <value>The RTF header or footer content collection.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfHeader">
            <summary>
            Summary description for RtfHeader.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfFooter">
            <summary>
            Summary description for RtfFooter.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfHyperlink">
            <summary>
            Summary description for RtfHyperlink.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHyperlink.#ctor(System.String)">
            <summary>
            The RTF hyperlink constructor.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHyperlink.#ctor(System.String,System.Drawing.Color,C1.C1Rtf.RtfUnderlineEnum)">
            <summary>
            The RTF hyperlink constructor.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="color">The text color of the hyperlink.</param>
            <param name="underline">The underline type of the hyperlink.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHyperlink.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfHyperlink.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.Target">
            <summary>
            Gets target object (URL, bookmark ...) as string.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.Count">
            <summary>
            Gets current count PTF objects in collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.ForeColor">
            <summary>
            Gets or sets hyperlink foreground color.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.BackColor">
            <summary>
            Gets or sets hyperlink foreground color.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.Underline">
            <summary>
            Gets or sets hyperlink underline.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfHyperlink.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfInfo">
            <summary>
            The RTF info group.
            </summary>
            <example>
            {\info{\title Hello}{\author Cornetov}{\operator C1Rtf}{\creatim\yr2003\mo11\dy9\hr12\min2}{\revtim\yr2003\mo11\dy9\hr12\min2}{\version2}{\edmins0}{\nofpages1}{\nofwords1}{\nofchars12}{\*\company C1}{\nofcharsws12}{\vern16437}}
            </example>
        </member>
        <member name="T:C1.C1Rtf.IC1RtfInfo">
            <summary>
            The RTF document information.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Title">
            <summary>
            Gets or sets title of the RTF document.
            </summary>
            <value>The title string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Author">
            <summary>
            Gets or sets author name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Operator">
            <summary>
            Gets or sets operator of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.CreationTime">
            <summary>
            Gets or sets creation time of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.RevisionTime">
            <summary>
            Gets or sets modified date of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Subject">
            <summary>
            Get or set subject of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Keywords">
            <summary>
            Get or set keywords array of the RTF document.
            </summary>
            <value>The text strings array.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Company">
            <summary>
            Get or set company name of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Manager">
            <summary>
            Get or set manager name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.IC1RtfInfo.Comment">
            <summary>
            Get or set comment name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInfo.#ctor(C1.C1Rtf.Object.RtfInnerDocument)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Title">
            <summary>
            Gets or sets the title of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Author">
            <summary>
            Gets or sets the author name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Operator">
            <summary>
            Gets or sets the operator name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.RevisionTime">
            <summary>
            Gets or sets the modified time of the RTF document.
            </summary>
            <value>The DateTime value.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Subject">
            <summary>
            Gets or sets the subject of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Keywords">
            <summary>
            Gets or sets the keywords array of the RTF document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Company">
            <summary>
            Gets or sets the company name of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Manager">
            <summary>
            Gets or sets the manager name of the author.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Comment">
            <summary>
            Gets or sets the comment of the RTF document.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInfo.Version">
            <summary>
            Gets or sets the version number of the RTF document.
            </summary>
            <value>The  version number number.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfInnerDocument">
            <summary>
            Represents a RTF document.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfSection">
            <summary>
            Summary description for RtfSection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSection.#ctor">
            <summary>
            Rtf paragraph.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSection.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSection.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSection.Contains(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Determines whether the RTF object is located within the section.
            </summary>
            <param name="obj">The RTF object.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfSection.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.Current">
            <summary>
            Gets current RTF object for this section.
            </summary>
            <value>The current <see cref="T:C1.C1Rtf.Object.RtfObject"/> of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.Count">
            <summary>
            Gets current count RTF objects in collection.
            </summary>
            <value>The count of objects of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.Columns">
            <summary>
            Gets the colunms collection of this section.
            </summary>
            <value>The <see cref="T:C1.C1Rtf.Object.RtfColumnCollection"/> of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.ClientRectangle">
            <summary>
            Gets client rectangle for this document.
            </summary>
            <value>The client rectangle of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.PageSize">
            <summary>
            Gets or sets page size for this section.
            </summary>
            <value>The page size of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
            <value>The left margin of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
            <value>The right margin of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
            <value>The top margin of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
            <value>The bottom margin of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.AutoNewPage">
            <summary>
            Gets or sets automatic new page before the section.
            </summary>
            <value><b>true</b> if added new page object (<see cref="T:C1.C1Rtf.Object.RtfPageBreak"/>) before the section, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.SectionBreak">
            <summary>
            Gets or sets break attribute for the section.
            </summary>
            <value>The break value <see cref="T:C1.C1Rtf.Object.RtfSectionBreakEnum"/> of the RTF section.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfSection.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfInnerDocument._document">
            <summary>The owner RTF document for this object.</summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInnerDocument.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInnerDocument.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfInnerDocument.Read(System.IO.BinaryReader)">
            <summary>
            Read this RTF object from binary reader.
            </summary>
            <param name="br">The RTF binary reader.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInnerDocument.CurrentPageIndex">
            <summary>
            Gets or sets current page number for this document.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInnerDocument.Version">
            <summary>
            Gets or sets RTF version number.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfInnerDocument.CodePage">
            <summary>
            Gets or sets code page.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.IRtfList">
            <summary>
            Summary description for IRtfList.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.IRtfList.Id">
            <summary>
            Gets identifier of this list.
            </summary>
            <value>The interger identifier.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListTable">
            <summary>
            Summary description for RtfListTable.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfListTable.Item(System.Int32)">
            <summary>
            Gets or sets the RTF list table item at the specified index within the collection.
            </summary>
            <value>The RTF list table item.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListTemplate">
            <summary>
            Summary description for RtfListTemplate (LSTF structure).
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfListTemplate.#ctor(C1.C1Rtf.Object.RtfListTable)">
            <summary>
            Rtf list.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfListTemplate.Id">
            <summary>
            Gets identifier of this list.
            </summary>
            <value>The interger identifier.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfListTemplate.Item(System.Int32)">
            <summary>
            Gets or sets the RTF list level at the specified index within the collection.
            </summary>
            <value>The RTF list level.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListLevel">
            <summary>
            Summary description for RtfListLevel (LVLF structure).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListOverrideTable">
            <summary>
            Summary description for RtfListOverrideTable (LFO structure).
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfListOverrideTable.#ctor(C1.C1Rtf.Object.RtfListTable)">
            <summary>
            Rtf override table of the override lists.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfListOverrideTable.Id">
            <summary>
            Gets identifier of this list.
            </summary>
            <value>The interger identifier.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfListOverrideTable.Item(System.Int32)">
            <summary>
            Gets or sets the RTF list override at the specified index within the collection.
            </summary>
            <value>The RTF list override.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListOverride">
            <summary>
            Summary description for RtfListOverride (LFOLVL structure).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListText">
            <summary>
            Summary description for RtfListLevel (LVLF structure).
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfEmpty">
            <summary>
            The empty RTF object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfEmpty.ToString">
            <summary>
            Gets RTF format string value for this object.
            </summary>
            <returns>The RTF format string value.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfEmpty.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfParagraphContent">
            <summary>
            Summary description for RtfParagraphContent.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfParagraph">
            <summary>
            Summary description for RtfParagraph.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfParagraph.DefaultSpaceBetweenLines">
            <summary>The default space between lines value for RTF paragraphs.</summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParagraph.#ctor">
            <summary>
            Rtf paragraph.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParagraph.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Adds the RTF object to the collection.
            </summary>
            <param name="obj">RTF object for the RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParagraph.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParagraph.Clone">
            <summary>
            Creates a new <see cref="T:C1.C1Rtf.Object.RtfObject"/> object that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:C1.C1Rtf.Object.RtfObject"/> object that is a copy of the current instance.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.FirstLineIndent">
            <summary>
            Gets or sets the first line left indent value of this paragraph.
            </summary>
            <value>The first line left indent of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.LeftIndent">
            <summary>
            Gets or sets the left indent value of this paragraph.
            </summary>
            <value>The left indent of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.RightIndent">
            <summary>
            Gets or sets the right indent value of this paragraph.
            </summary>
            <value>The right indent of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.SpacesBefore">
            <summary>
            Gets or sets the spaces before value of this paragraph.
            </summary>
            <value>The spaces before of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.SpacesAfter">
            <summary>
            Gets or sets the spaces after value of this paragraph.
            </summary>
            <value>The spaces after of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.SpaceBetweenLines">
            <summary>
            Gets or sets the space between lines value of this paragraph.
            </summary>
            <value>The space between lines of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Content">
            <summary>
            Gets RTF paragraph content for this paragraph.
            </summary>
            <value>The RTF paragraph content collection.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Style">
            <summary>
            Gets or sets the RTF style for this paragraph.
            </summary>
            <value>The RTF style of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Font">
            <summary>
            Gets or sets the RTF font for this paragraph.
            </summary>
            <value>The RTF font of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Alignment">
            <summary>
            Gets or sets the horizontal alignment for this paragraph.
            </summary>
            <value>The RTF horizontal alignment of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Leading">
            <summary>
            Gets or sets the leading value relatively by parent of this paragraph.
            </summary>
            <value>The leading relatively by parent of the paragraph.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Clipped">
            <summary>
            Gets or sets the clip of the text of this paragraph.
            </summary>
            <value><b>true</b> if clip of text, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.WordWrap">
            <summary>
            Gets or sets the word wrap of the text of this paragraph.
            </summary>
            <value><b>true</b> if word wrap of text, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.PageBreakBefore">
            <summary>
            Gets or sets the page break before of this paragraph.
            </summary>
            <value><b>true</b> if page break before, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Vertical">
            <summary>
            Gets or sets the vertical text direct value of this paragraph.
            </summary>
            <value><b>true</b> if text is vertical, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Height">
            <summary>
            Gets or sets the approximate height value of this paragraph.
            </summary>
            <value>The approximate height.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Current">
            <summary>
            Gets current RTF object for set (group, collection).
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.Count">
            <summary>
            Gets current count PTF objects in collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraph.IsEmpty">
            <summary>
            Gets true if this object is empty, otherwise false.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfParamCollection">
            <summary>
            The collection of shape parameters for the RTF shape.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParamCollection.Clear">
            <summary>
            Removes all RTF objects from the collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParamCollection.Contains(System.String)">
            <summary>
            Determines whether the RTF object is located within the collection.
            </summary>
            <param name="name">The name of the RTF param.</param>
            <returns>True if contains, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParamCollection.IndexOf(System.String)">
            <summary>
            Returns the index within the collection of the RTF object.
            </summary>
            <param name="name">The name of the RTF param.</param>
            <returns>The index of the clee into this collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParamCollection.Remove(System.String)">
            <summary>
            Removes the specified RTF object from the collection.
            </summary>
            <param name="name">The name of the RTF param.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParamCollection.Count">
            <summary>
            Gets the number of paremeters of the collection.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParamCollection.Item(System.Int32)">
            <summary>
            Gets name of the RTF shape parameter.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParamCollection.Item(System.String)">
            <summary>
            Gets or sets the RTF shape parameters.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfPictureShape">
            <summary>
            The RTF picture shape object.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfShape">
            <summary>
            The RTF wrapper for <see cref="P:C1.C1Rtf.Object.RtfShape.DrawingShape"/>.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfPictureShape.#ctor(System.Drawing.Image)">
            <summary>
            The RTF picture shape.
            </summary>
            <param name="img">The <see cref="T:System.Drawing.Image"/> object.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfPictureShape.Read(C1.C1Rtf.RtfReader)">
            <summary>
            Gets or sets inner RTF picture.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfPictureShape.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfPicture">
            <summary>
            The RTF picture.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfPicture.#ctor(System.Drawing.Image)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfPicture.Image">
            <summary>
            Get drawing aproximate font for this RTF font.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfPicture.Alignment">
            <summary>
            Gets or sets the horizontal alignment for this picture.
            </summary>
            <value>The RTF horizontal alignment of the picture.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfPicture.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfRowCollection">
            <summary>
            The collection of rows for the RTF table.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRowCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF row at the specified index within the collection.
            </summary>
            <value>The RTF row.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfRow">
            <summary>
            Summary description for RtfRow.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfRow.#ctor(C1.C1Rtf.Object.RtfRowCollection)">
            <summary>
            Rtf row.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.Index">
            <summary>
            Gets index of the cell collection for this cell.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.Height">
            <summary>
            Gets or sets height of this row of a point.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.Left">
            <summary>
            Gets or sets left indent of this row of a point.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.WidthPercent">
            <summary>
            Gets or sets width in percent of the page.
            </summary>
            <value>The width in percent.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.Cells">
            <summary>
            Get cell collection for this row.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.LeftCellSpacing">
            <summary>
            Gets or sets left spacing of cells for thos row.
            </summary>
            <value>The left cell spacing.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.TopCellSpacing">
            <summary>
            Gets or sets top spacing of cells for this row.
            </summary>
            <value>The top cell spacing.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.RightCellSpacing">
            <summary>
            Gets or sets right spacing of cells for this row.
            </summary>
            <value>The right cell spacing.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.BottomCellSpacing">
            <summary>
            Gets or sets bottom spacing of cells for this row.
            </summary>
            <value>The bottom cell spacing.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.LeftCellPadding">
            <summary>
            Gets or sets left padding of the first cell for this row.
            </summary>
            <value>The left cell padding.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfRow.RightCellPadding">
            <summary>
            Gets or sets right padding of the last cell for this row.
            </summary>
            <value>The right cell padding.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfSectionBreakEnum">
            <summary>
            RTF section break values.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfSectionBreakEnum.Default">
            <summary>The default break for begin section.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfSectionBreakEnum.Odd">
            <summary>The break for begin section at the odd page.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfSectionBreakEnum.Even">
            <summary>The break for begin section at the even page.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfSectionBreakEnum.None">
            <summary>None break for begin section.</summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfColumnCollection">
            <summary>
            RTF colors table object.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColumnCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF column at the specified index within the collection.
            </summary>
            <value>The RTF column.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColumnCollection.AutoSpacing">
            <summary>
            Gets or sets the automatic spacing for RTF columns of the collection.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfColumn">
            <summary>
            The RTF column object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfColumn.#ctor">
            <summary>
            The RTF column constructor with automatic width.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfColumn.#ctor(System.Single)">
            <summary>
            The RTF column constructor.
            </summary>
            <param name="width">The width of the column.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColumn.IsAutoWidth">
            <summary>
            Gets or sets is automatic width for this column.
            </summary>
            <value><b>true</b> if automatic width, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColumn.Width">
            <summary>
            Gets or sets width for this column.
            </summary>
            <value>The width of the RTF column.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfColumn.RightSpacing">
            <summary>
            Gets or sets right spacing for this column.
            </summary>
            <value>The right spacing of the RTF column.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfShapeCollection">
            <summary>
            The collection of rows for the RTF table.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfShapeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF shape at the specified index within the collection.
            </summary>
            <value>The RTF shape.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCanvasFlowEnum">
            <summary>
            Summary description for RtfCanvasFlow.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasFlowEnum.Default">
            <summary>The drawing canvas without flow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasFlowEnum.InText">
            <summary>The drawing canvas in text flow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasFlowEnum.AroundFrame">
            <summary>The drawing canvas in around frame flow.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasFlowEnum.AroundContour">
            <summary>The drawing canvas in around contour flow.</summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCanvasRelationEnum">
            <summary>
            Summary description for RtfCanvasRelation.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasRelationEnum.Margin">
            <summary>The drawing canvas x or y relation from margin.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasRelationEnum.Page">
            <summary>The drawing canvas x or y relation from page.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasRelationEnum.Para">
            <summary>The drawing canvas x or y relation from paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.Object.RtfCanvasRelationEnum.Column">
            <summary>The drawing canvas x or y relation from column.</summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfDrawingCanvas">
            <summary>
            The RTF drawing canvas.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfDrawingCanvas.ToMetafile">
            <summary>
            Create metafile for thi shape field.
            </summary>
            <returns>The aproximate metafile.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfDrawingCanvas.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfString">
            <summary>
            The collection of elements for the table row
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.#ctor(System.String)">
            <summary>
            Create RTF string with character formatting.
            </summary>
            <param name="text">The text string.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.#ctor(System.String,System.Drawing.Font)">
            <summary>
            Create RTF string with character formatting.
            </summary>
            <param name="text">The text string.</param>
            <param name="font">Used drawing font for this string.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.#ctor(System.String,System.Drawing.Font,C1.C1Rtf.RtfUnderlineEnum)">
            <summary>
            Create RTF string with character formatting.
            </summary>
            <param name="text">The text string.</param>
            <param name="font">Used drawing font for this string.</param>
            <param name="underline">Used underline for this string if font underline.</param>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.IsEqualAttributes(C1.C1Rtf.Object.RtfString)">
            <summary>
            Gets true if this attributes equal with other RTF string attributes.
            </summary>
            <param name="other">The other RTF string.</param>
            <returns><b>true</b> if attributes equal with other attributes, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.IsUnicode(System.String)">
            <summary>
            Is Unicode of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is Unicode, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.IsCJK(System.String)">
            <summary>
            Is CJK (Chinese, Japanese, and Korean) of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is CJK, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.IsRightToLeft(System.String)">
            <summary>
            Is right to left text (such as Arabic or Hebrew).
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is right to left, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.IsPunctuation(System.String)">
            <summary>
            Is punctuation or white space of the text string.
            </summary>
            <param name="text">The text string.</param>
            <returns>True if the text string is punctuation or white space, otherwise false.</returns>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfString.op_Implicit(C1.C1Rtf.Object.RtfString)~System.String">
            <summary>
            Convert implicitly to string.
            </summary>
            <param name="str">The mate RTF string object.</param>
            <returns>Aproximate string value for RTF string.</returns>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Text">
            <summary>
            Gets or sets the RTF text for this string.
            </summary>
            <value>The text string.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Font">
            <summary>
            Gets or sets the RTF font for this string.
            </summary>
            <value>The RTF font of the text.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Culture">
            <summary>
            Gets or sets culture information (language) for this string.
            </summary>
            <value>The culture information.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Underline">
            <summary>
            Gets or sets underline type for this string.
            </summary>
            <value>The underline type of the text.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.IsOutline">
            <summary>
            Gets or sets outline font for this string.
            </summary>
            <value><b>true</b> if outline of the text, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.IsInvisible">
            <summary>
            Gets or sets invisible for this string.
            </summary>
            <value><b>true</b> if invisible of the text, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Expand">
            <summary>
            Gets or sets expand (+) or parket (-) value for this string.
            </summary>
            <value>The expand value for the text.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Superscript">
            <summary>
            Gets or sets superscript value for this string.
            </summary>
            <value>The superscript value for the text.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.Subscript">
            <summary>
            Gets or sets subscript value for this string.
            </summary>
            <value>The subscript value for the text.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.ForeColor">
            <summary>
            Gets or sets foreground (text) color value for this string.
            </summary>
            <value>The foreground color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.BackColor">
            <summary>
            Gets or sets background (text) color value for this string.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.BorderWidth">
            <summary>
            Gets or sets border width for this text.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.BorderColor">
            <summary>
            Gets or sets border color for this text.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfString.BorderStyle">
            <summary>
            Gets or sets border style for this text.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfStyleCollection">
            <summary>
            The RTF style collection.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfStyleCollection.#ctor(C1.C1Rtf.Object.RtfInnerDocument)">
            <summary>
            The RTF specific constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfStyleCollection.Item(System.String)">
            <summary>
            Gets or sets the RTF style at the specified index within the collection.
            </summary>
            <value>The RTF style object.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfStyleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the RTF style at the specified index within the collection.
            </summary>
            <value>The RTF style object.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfStyle">
            <summary>
            The RTF style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfStyle.#ctor">
            <summary>
            The RTF style constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfStyle.Name">
            <summary>
            Gets or sets name for this RTF style.
            </summary>
            <value>The RTF style text name.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfStyle.Culture">
            <summary>
            Gets or sets culture information (language) for this string.
            </summary>
            <value>The culture information.</value>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfParagraphStyle">
            <summary>
            The RTF paragraph style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfParagraphStyle.#ctor">
            <summary>
            The RTF style constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfParagraphStyle.Paragraph">
            <summary>
            Gets RTF paragraph of this paragraph style.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfCharacterStyle">
            <summary>
            The RTF table style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfCharacterStyle.#ctor">
            <summary>
            The RTF style constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfCharacterStyle.Character">
            <summary>
            Gets RTF table of this table style.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfTableStyle">
            <summary>
            The RTF table style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfTableStyle.#ctor">
            <summary>
            The RTF style constructor.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTableStyle.Table">
            <summary>
            Gets RTF table of this table style.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfListStyle">
            <summary>
            The RTF list style object.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfListStyle.#ctor">
            <summary>
            The RTF list style constructor.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.Object.RtfTable">
            <summary>
            Summary description for RtfTable.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.Object.RtfTable.#ctor(System.Int32,System.Int32)">
            <summary>
            RTF table constructor with definite rows and columns.
            </summary>
            <param name="rows">The rows number for this RTF table.</param>
            <param name="cols">The columns number for this RTF table.</param>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.IsCellsFitPage">
            <summary>
            Gets or sets cells fit to the page.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.IsContentMerge">
            <summary>
            Gets or sets content of cells merge or no.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.LastHeaderRow">
            <summary>
            Gets or sets the number of the last row of the table headers.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.ColumnCount">
            <summary>
            Gets maximum count of columns for all rows.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.Rows">
            <summary>
            Gets cell collection for this row.
            </summary>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.Item(System.Int32,System.Int32)">
            <summary>
            Gets the RTF cell at the specified row index and column index.
            </summary>
            <value>The RTF cell object.</value>
        </member>
        <member name="P:C1.C1Rtf.Object.RtfTable.IsEmpty">
            <summary>
            Gets is empty this object.
            </summary>
            <value><b>true</b> if this object is empty, otherwise <b>false</b>.</value>
        </member>
        <member name="T:C1.C1Rtf.RtfPageSize">
            <summary>
            Page sizes for text document.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Note">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Legal">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Letter">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A0">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A1">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A2">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A3">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A4">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A5">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A6">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A7">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A8">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A9">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.A10">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B0">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B1">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B2">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B3">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B4">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.B5">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchA">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchB">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchC">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchD">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.ArchE">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.FLSA">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.FLSE">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.HalfLetter">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageSize.Ledger">
            <summary>The page size of the RTF documnet.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPageAddedArgs.Content">
            <summary>
            The RTF content.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.RtfPageAddedArgs.#ctor(C1.C1Rtf.Object.IRtfContent)">
            <summary>
            Class constructor.
            </summary>
            <param name="content">The RTF content.</param>
        </member>
        <member name="T:C1.C1Rtf.C1RtfDocument">
            <summary>
            Represents a RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.#ctor">
            <summary>
            Create new ComponentOne RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ParseRtfText(System.String)">
            <summary>
            Parse RTF text and added to RTF document content.
            </summary>
            <param name="text">The RTF formated text.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ToRtfText">
            <summary>
            Gets RTF text for RTF document content.
            </summary>
            <returns>The RTF formated text.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Load(System.String)">
            <summary>
            Load this document from the file with file name.
            </summary>
            <param name="fileName">The file name for load of a file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.LoadFromOpenXml(System.String)">
            <summary>
            Load this document from the file in Open XML format.
            </summary>
            <param name="fileName">The file name of Word Open XML file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.LoadFromXml(System.IO.Stream)">
            <summary>
            Load this document from the readable XLM stream.
            </summary>
            <param name="stream">The readable XLM stream.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.LoadFromRtf(System.IO.Stream)">
            <summary>
            Load this document from the readable RTF stream.
            </summary>
            <param name="stream">The readable RTF stream.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Save(System.String)">
            <summary>
            Save this document to the file with file name.
            </summary>
            <param name="fileName">The file name for creation or replacement of a file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.SaveToOpenXml(System.String)">
            <summary>
            Save this document to the writable XML stream.
            </summary>
            <param name="fileName">The file name for creation or replacement of a file.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.SaveToXml(System.IO.Stream)">
            <summary>
            Save this document to the writable XML stream.
            </summary>
            <param name="stream">The writable XML stream.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.SaveToRtf(System.IO.Stream)">
            <summary>
            Save this document to the writable RTF stream.
            </summary>
            <param name="stream">The writable RTF stream.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Clear">
            <summary>
            Clear this Rtf document, reset content.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetEnumerator">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a non-generic collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Merging(C1.C1Rtf.C1RtfDocument)">
            <summary>
            The merging of this RTF document and other.
            </summary>
            <param name="other">The other RTF document.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.Add(C1.C1Rtf.Object.RtfObject)">
            <summary>
            Add RTF object for this document.
            </summary>
            <param name="obj">THe RTF object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font,System.Drawing.Brush)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddParagraph(System.String,System.Drawing.Font,System.Drawing.Brush,C1.C1Rtf.RtfAlignmentEnum)">
            <summary>
            Add paragraph into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="align">The paragraph alignment.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddPicture(System.Drawing.Image)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddPicture(System.Drawing.Image,C1.C1Rtf.RtfAlignmentEnum)">
            <summary>
            Add (draw) image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="align">The paragraph alignment.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmark(System.String)">
            <summary>
            Add bookmark (start and end) into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkStart(System.String)">
            <summary>
            Add start bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddBookmarkEnd(System.String)">
            <summary>
            Add end bookmark into this document in next position.
            </summary>
            <param name="name">The bookmark name.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String)">
            <summary>
            Add hyperlink into this document in next position.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String,C1.C1Rtf.Object.IRtfContent)">
            <summary>
            Add hyperlink into this document in next position.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="content">The drawing content (paragraph) object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.AddLink(System.String,C1.C1Rtf.Object.RtfShape)">
            <summary>
            Add hyperlink into this document for RTF shape object.
            </summary>
            <param name="target">The target object (URL, bookmark ...) as string.</param>
            <param name="shape">The shape for add link.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeRotation(System.Single)">
            <summary>
            Set rotation for current RTF shape.
            </summary>
            <param name="rotation">The rotation angle in degrees.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeFillOpacity(System.Int32)">
            <summary>
            Set opacity for current RTF shape.
            </summary>
            <param name="opacity">The opacity in persents.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ShapeHyperlink(System.String)">
            <summary>
            Set hyperlink source for current RTF shape.
            </summary>
            <param name="source">THe hyperlink source string.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="pt1">The first point of the line.</param>
            <param name="pt2">The second point of the line.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x1">The x first coordinate.</param>
            <param name="y1">The y first coordinate.</param>
            <param name="x2">The x second coordinate.</param>
            <param name="y2">The y second coordinate.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPolyline(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw lines from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the polyline.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw poligon from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill poligon from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw Bezier curve from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillBeziers(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill Bezier curve from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draw round rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fill round rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw pie from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill pie from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw arc from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String,System.Drawing.StringFormat)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.GetParagraph(System.String,System.Drawing.StringFormat,System.Single)">
            <summary>
            Get paragraph for the text and string format for this document.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="sf">The drawing string format.</param>
            <param name="expand">The value in points for expand (+) or packed (-).</param>
            <returns>The paragraph for this document</returns>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="sf">The drawing string format.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawParagraph(System.Drawing.RectangleF,C1.C1Rtf.Object.RtfParagraph)">
            <summary>
            Draw paragraph into this document in next position.
            </summary>
            <param name="rc">The drawing rectangle.</param>
            <param name="paragraph">The drawing paragraph object.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rcImage">The drawing image rectangle.</param>
            <param name="rcClip">The drawing clip for image rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="szImage">The image size in points.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="sz">The direct size in points.</param>
            <param name="szImage">The image size in points.</param>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.PageBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.LineBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.ColumnBreak">
            <summary>
            Add new page to this RTF document.
            </summary>
        </member>
        <member name="M:C1.C1Rtf.C1RtfDocument.SetPageSettings(System.Drawing.SizeF,System.Drawing.Printing.Margins)">
            <summary>
            Set current page settings from this RTF document.
            </summary>
            <param name="pageSize">The size of the current page.</param>
            <param name="margins">The print margins for the current page.</param>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.PageSize">
            <summary>
            Gets or sets page size for this document.
            </summary>
            <value>The page size of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Landscape">
            <summary>
            Gets or sets landscape of the page for this document.
            </summary>
            <value><b>true</b> if RTF document is landscape, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.CurrentPageIndex">
            <summary>
            Gets current page number for this document.
            </summary>
            <value>The current page number of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Version">
            <summary>
            Gets or sets RTF version number.
            </summary>
            <value>The version number of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Info">
            <summary>
            Gets info interface for this RTF document.
            </summary>
            <value>The information interface of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Hyperlink">
            <summary>
            Gets or sets current hyperlink for all adds objects for this document.
            </summary>
            <value>The current added hyperlink of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Creator">
            <summary>
            Gets or sets creator (generator) name of the RTF document.
            </summary>
            <value>The creator (generator) name of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.FitShapesToText">
            <summary>
            Gets or sets fit shapes with text value.
            </summary>
            <value><b>true</b> if fit shapes with text value, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.LeftIndent">
            <summary>
            Gets or sets the current left indent.
            </summary>
            <value>The left indent of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.RightIndent">
            <summary>
            Gets or sets the current right indent.
            </summary>
            <value>The right indent of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
            <value>The left margin of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
            <value>The right margin of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.TopMargin">
            <summary>
            Gets or sets the top margin.
            </summary>
            <value>The top margin of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.BottomMargin">
            <summary>
            Gets or sets the bottom margin.
            </summary>
            <value>The bottom margin of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.ClientRectangle">
            <summary>
            Gets client rectangle for this document.
            </summary>
            <value>The client rectangle of the RTF document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Current">
            <summary>
            Gets current of the content RTF object.
            </summary>
            <value>The current RTF object of the document.</value>
        </member>
        <member name="P:C1.C1Rtf.C1RtfDocument.Count">
            <summary>
            Gets current count PTF objects in collection.
            </summary>
            <value>The current count of RTF objects of the main section of the RTF document.</value>
        </member>
        <member name="E:C1.C1Rtf.C1RtfDocument.RtfPageAdded">
            <summary>The added pade for RTF document event.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfElementType">
            <summary>
            Types of RTF elements.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.Unknown">
            <summary>Debug assert false for real type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.NewLine">
            <summary>The new line element '\x0d', '\x0a'.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.Semicolon">
            <summary>The semicolon ';' separator for lists.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.OrdinaryGroup">
            <summary>The ordinary group, start '{', end '}'.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.SpecificGroup">
            <summary>The specific group, start "{\*", end '}'.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.NameAttribure">
            <summary>The name attribure, for example "\name".</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.NumberAttribure">
            <summary>The number name attribure, for example "\name123".</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfElementType.TextAttribute">
            <summary>The text attribure, for example " text".</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfElement">
            <summary>
            Abstract RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfNewLineElement">
            <summary>
            New line RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfSemicolonElement">
            <summary>
            Semicolon RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfGroupElement">
            <summary>
            Group RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfSpecificGroupElement">
            <summary>
            Specific group RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfAttributeElement">
            <summary>
            Name RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfTextElement">
            <summary>
            Text value RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfNameElement">
            <summary>
            Name RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfNumberElement">
            <summary>
            Number name RTF element.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfElementFormater">
            <summary>
            Base formater of RTF element for readers and writers.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfAlignmentEnum">
            <summary>
            RTF paragraph, picture and others alignment.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfAlignmentEnum.Left">
            <summary>Left alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfAlignmentEnum.Right">
            <summary>Right alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfAlignmentEnum.Center">
            <summary>Center alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfAlignmentEnum.Justify">
            <summary>Justify alignment of the paragraph.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfAlignmentEnum.Undefined">
            <summary>Undefined alignment of the paragraph.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfUnderlineEnum">
            <summary>
            RTF underline type.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.None">
            <summary>None underline (by default).</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Single">
            <summary>Single line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.ByWord">
            <summary>Only by word underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Double">
            <summary>Double line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Dotted">
            <summary>Dotted line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DottedHeavy">
            <summary>Heavy dotted line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Hidden">
            <summary>Hidden underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Thick">
            <summary>Thick line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Dash">
            <summary>Dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DashedHeavy">
            <summary>Heavy dashed line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Dot">
            <summary>Dot (not used) underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DotDash">
            <summary>Dot dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DotDashHeavy">
            <summary>Heavy dot dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DotDotDash">
            <summary>Dot dot dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DotDotDashHeavy">
            <summary>Heavy dot dot dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.Wave">
            <summary>Wave underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.WavyHeavy">
            <summary>Heavy wave underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.WavyDouble">
            <summary>Double wave underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DashLong">
            <summary>Long dash line underline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfUnderlineEnum.DashLongHeavy">
            <summary>Heavy long dash line underline.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfTextFlowEnum">
            <summary>
            Text flow (direct).
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.LeftToRigth">
            <summary>Left to rigth text direct.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.TopToBottom">
            <summary>Top to bottom text direct.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfTextFlowEnum.BottomToTop">
            <summary>Bottom to top text direct.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfBorderStyleEnum">
            <summary>
            Table border styles.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Undefined">
            <summary>Table border solid line (probably).</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Single">
            <summary>Table border solid line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DoubleThick">
            <summary>Table border double thickness line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Shadowed">
            <summary>Table border shadowed.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Dotted">
            <summary>Table border dotted line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Dashed">
            <summary>Table border dashed line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DashSmall">
            <summary>Table border dashed small gap line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Hairline">
            <summary> Table border hairline.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Double">
            <summary>Table border double line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DotDash">
            <summary>Table border dot dash line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DotDotDash">
            <summary>Table border dot dot dash line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Triple">
            <summary>Table border triple line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThin">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThick">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThin">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThinMedium">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickMedium">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThinMedium">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThickThinLarge">
            <summary>Table border thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickLarge">
            <summary>Table border thin thick line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.ThinThickThinLarge">
            <summary>Table border thin thick thin line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Wavy">
            <summary>Table border wavy line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DoubleWavy">
            <summary>Table border double wavy line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.DashDotStroked">
            <summary>Table border dash dot stroked line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Emboss">
            <summary>Table border emboss line.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfBorderStyleEnum.Engrave">
            <summary>Table border engrave line.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfMergeCellEnum">
            <summary>
            RTF merge type for the <code>RtfCell</code>.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.None">
            <summary>The cell is not merge.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.HorizontalFirst">
            <summary>The cell is merge horizontal first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.VerticalFirst">
            <summary>The cell is merge vertical first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.BothFirst">
            <summary>The cell is merge horizontal and vertical first.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.HorizontalPrevious">
            <summary>The cell is merge horizontal previous.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.VerticalPrevious">
            <summary>The cell is merge vertical previous.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfMergeCellEnum.BothPrevious">
            <summary>The cell is merge horizontal and vertical previous.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfPatternTypeEnum">
            <summary>
            RTF merge type for the <code>RtfCell</code>.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Automatic">
            <summary>The automatic (none) pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Solid">
            <summary>The solid pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent5">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent10">
            <summary>The 10 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent20">
            <summary>The 20 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent25">
            <summary>The 25 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent30">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent40">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent50">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent60">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent70">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent75">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent80">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent90">
            <summary>The 5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkHorizontal">
            <summary>The dark horizontal pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkVertical">
            <summary>The dark vertical pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkForwardDiagonal">
            <summary>The pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkBackwardDiagonal">
            <summary>The pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkCross">
            <summary>The pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DarkDiagonalCross">
            <summary>The pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Horizontal">
            <summary>The horizontal pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Vertical">
            <summary>The vertical pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.ForwardDiagonal">
            <summary>The forward diagonal pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.BackwardDiagonal">
            <summary>The backward diagonal pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Cross">
            <summary>The cross pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.DiagonalCross">
            <summary>The diagonal cross pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent2_5">
            <summary>The 2.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent7_5">
            <summary>The 7.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent12_5">
            <summary>The 12.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent15">
            <summary>The 15 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent17_5">
            <summary>The 17.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent22_5">
            <summary>The 22.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent27_5">
            <summary>The 27.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent32_5">
            <summary>The 32.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent35">
            <summary>The 35 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent37_5">
            <summary>The 37.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent42_5">
            <summary>The 42.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent45">
            <summary>The 45 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent47_5">
            <summary>The 47.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent52_5">
            <summary>The 52.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent55">
            <summary>The 55 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent57_5">
            <summary>The 57.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent62_5">
            <summary>The 62.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent65">
            <summary>The 65 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent67_5">
            <summary>The 67.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent72_5">
            <summary>The 72.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent77_5">
            <summary>The 77.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent82_5">
            <summary>The 82.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent85">
            <summary>The 85 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent87_5">
            <summary>The 87.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent92_5">
            <summary>The 92.5 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent95">
            <summary>The 95 persent pattern type.</summary>
        </member>
        <member name="F:C1.C1Rtf.RtfPatternTypeEnum.Percent97_5">
            <summary>The 97.5 persent pattern type.</summary>
        </member>
        <member name="T:C1.C1Rtf.RtfLanguageEnum">
            <summary>
            The RTF languages.
            </summary>
        </member>
        <member name="F:C1.C1Rtf.RtfLanguageEnum.NoLanguage">
            <summary>No language or language is default.</summary>
        </member>
        <member name="T:C1.C1Rtf.BitmapInfo">
            <summary>
            BitmapInfo
            reads a BITMAPINFOHEADER structure, provides a few utilities
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfMetafileConverter">
            <summary>
            The metafile convertor to RTF content.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfReader">
            <summary>
            Reader of the RTF format.
            </summary>
        </member>
        <member name="T:C1.C1Rtf.RtfWriter">
            <summary>
            Write the RTF format.
            </summary>
        </member>
        <member name="M:C1.Util.Win.Win32.GetLocaleInfo(System.UInt32,System.UInt32)">
            <summary>
            This function avoids BUG with API GetLocaleInfo function under Win9X
            </summary>
            <param name="Locale"></param>
            <param name="LCType"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Util.Win.Win32.DM">
            <summary>
            Fiels of DEVMODE structure.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GetDeviceCapsConsts">
            <summary>
            GetDeviceCaps() constants
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SORT">
            <summary>
            Sorting IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LANG">
            <summary>
            Primary language IDs.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SUBLANG">
             <summary>
              Sublanguage IDs.
            
              The name immediately following SUBLANG_ dictates which primary
              language ID that sublanguage ID can be combined with to form a
              valid language ID.
             </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.LOCALE">
            <summary>
            Locale Types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.FixFpu">
            <summary>
            usage:
             using (FixFpu ff = new FixFpu())
             { do printer stuff }
            or
             do printer stuff
             FixFpu.Doit();
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SC">
            <summary>
            System Menu Command Values
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SWP">
            <summary>
            SetWindowPos flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CDS">
            <summary>
            Flags for ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DISP">
            <summary>
            Return values of the ChangeDisplaySettings() function.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WM">
            <summary>
            Windows messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.EM">
            <summary>
            EditControl window messages.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SB">
            <summary>
            WM_HSCROLL and WM_VSCROLL notifications codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BST">
            <summary>
            BM_GETSTATE flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.BM">
            <summary>
            BM_XXX flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODT">
            <summary>
            DRAWITEMSTRUCT control types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODA">
            <summary>
            DRAWITEMSTRUCT drawing actions.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ODS">
            <summary>
            DRAWITEMSTRUCT visual states.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.C1">
            <summary>
            ComponentOne constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOperationCodes">
            <summary>
            Specifies a raster-operation code, used by BitBlt function and other.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SW">
            <summary>
            ShowWindow() function codes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PRF">
            <summary>
            WM_PRINT drawing options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SF">
            <summary>
            Rich edit data format types.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SFF">
            <summary>
            Rich edit data format replacement options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SCF">
            <summary>
            EM_SETCHARFORMAT / EM_GETCHARFORMAT flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFM">
            <summary>
            CHARFORMAT mask values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.CFE">
            <summary>
            CHARFORMAT effects.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TO">
            <summary>
            EM_SETTYPOGRAPHYOPTIONS flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TA">
            <summary>
            Text Alignment Options.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DCX">
            <summary>
            GetDCEx() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GW">
            <summary>
            GetWindow() Constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GA">
            <summary>
            GetAncestor() constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ETO">
            <summary>
            ExtTextOut() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.SetBkModeConsts">
            <summary>
            SetBkMode modes.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OBJ">
            <summary>
            GetObjectType() returning values.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.TMPF">
            <summary>
            TEXTMETRIC tmPitchAndFamily flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.OLE">
            <summary>
            OLE constants.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS">
            <summary>
            CreateWindow() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.WS_EX">
            <summary>
            Extended Window Styles
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ES">
            <summary>
            CreateWindow() flags for edit controls.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFC">
            <summary>
            DrawFrameControl(), type of frame control to draw.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.DFCS">
            <summary>
            DrawFrameControl(), state of control.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.PS">
            <summary>
            CreatePen() flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GWL">
            <summary>
            SetWindowLong() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.GR">
            <summary>
            GetGuiResources() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RGN">
            <summary>
            ExtSelectClipRgn() flags.
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.ScrollWindowFlags">
            <summary>
            ScrollWindowEx flags
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.MA">
            <summary>
            WM_MOUSEACTIVATE Return Codes
            </summary>
        </member>
        <member name="T:C1.Util.Win.Win32.RasterOp">
            <summary>
            Constants for SetROP2
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.AtomName">
            <summary>
            Name of Atom create by GDI+ for current thread.
            </summary>
        </member>
        <member name="P:C1.Util.Win.Win32.Gdip.IsShutdown">
            <summary>
            Gets true if GDI+ currently shutdown.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1TypeSerializationEnum">
            <summary>
            Determines how item types are serialized
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.Default">
            <summary>
            Item type is serialized with using of alias.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.FullName">
            <summary>
            Item type is serialized as a fully qualified name
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.C1TypeSerializationEnum.AssemblyQualifiedName">
            <summary>
            Item type is serialized as a fully qualified name and assembly name
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1TypeSerializationAttribute">
            <summary>
            Forces the serializer to serialize the type name of a property or field.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1TypeSerializationAttribute.Type">
            <summary>
            Defines how the type name of a property of field will be serialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1CollectionSerializationAttribute">
            <summary>
            This attribute defines additional properties for collections properties or fields.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.ItemsAreReferences">
            <summary>
            Collection's items are references.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.ItemsAreReferencesDest">
            <summary>
            Collection's items can be referenced by other properties.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1ParentReferenceAttribute">
            <summary>
            Allows to mark field or property as "parent reference".
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1ClassSerializationAttribute">
            <summary>
            Allows to define additional properties for class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1ClassSerializationAttribute.DefaultSerializationOff">
            <summary>
            Indicates that by default the public fields or properties are not serialized.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1ClassSerializationAttribute.IgnoreTypeConverter">
            <summary>
            Indicates that the type converter specified for class should be ignored
            and not used during serialization.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1SerializeContentAttribute">
            <summary>
            Indicates that the content of property or field should be serialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1CheckSerializableAttribute">
            <summary>
            Indicates that the object should be serialized only if it supports deserialization.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1IgnoreDeserializeErrorAttribute">
            <summary>
            Indicates that the error occurs on deserialization value of this property should be ignored.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.IC1SerializableObject">
            <summary>
            This interface is used to allow objects to receive notifications from
            Serializer.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Serialization.C1FormatVersion.Parse(System.String,System.Boolean)">
            <summary>
            Converts a string to the C1FormatVersion object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to C1FormatVersion.</param>
            <returns>Returns instance of C1FormatVersion object or null.</returns>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1FormatVersion.FormatVersion">
            <summary>
            Gets the version of C1D document format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.C1FormatVersion.AssemblyVersion">
            <summary>
            Gets the AssemblyVersion of C1.C1Preview.2.dll assemly
            that supports this FormatVersion.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TypeConverterBase">
            <summary>
            Base for a simple type converter to/from strings.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.Serializer">
            <summary>
            Serializes and deserializes objects into and from XML.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.GetAssemblyQualifiedTypeName(System.Type)">
            <summary>
            Returns the "almost" fully qualified type name - i.e. with assembly name,
            but without version, culture, and public key.
            </summary>
            <param name="type">Type</param>
            <returns>Type name, assembly name</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.WriteNamespaces(System.Xml.XmlTextWriter,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Used to write the namespaces as attributes for the initial object
            </summary>
            <param name="writer"></param>
            <param name="namespaces"></param>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.IsReference(System.String,System.Int64@)">
            <summary>
            Checks is passed string a reference on some object or not.
            </summary>
            <param name="s">The string to check.</param>
            <param name="referenceId">Contains the reference value if string is a reference.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.RegisterTypeAlias(System.Type,System.String)">
            <summary>
            Registers new type's alias.
            </summary>
            <param name="type">Type object.</param>
            <param name="alias">Alias for type.</param>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.IsTypeAliasValid(System.Type,System.String)">
            <summary>
            Checks the type's alias can be registered the or not.
            </summary>
            <param name="type">Type object.</param>
            <param name="alias">Alias for type.</param>
            <returns>Returns true if alias is valid and can be registered.</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.String,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file. 
            </summary>
            <param name="fileName">Name of destination file.</param>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlTextWriter@)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream. 
            DOES NOT close the underlying stream. Useful for copying objects.
            Caller is responsible to call out writer.Close() to close writer and underlying stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
            <param name="writer">The XmlWriter object reference. Call writer.Close after working with stream/writer.</param> 
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified Stream.
            </summary>
            <param name="stream">The Stream used to write the XML-document instance</param>
            <param name="o">The Object to serialize</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object</param>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.Xml.XmlTextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified Object and writes the XML-document instance to a file using the specified XmlWriter
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Serializes the specified object to an XML formatted string.
            </summary>
            <param name="o">The Object to serialize.</param>
            <param name="namespaces">The XmlSerializerNamespaces referenced by the object.</param>
            <returns>String with results of serialization.</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an XML-document instance
            </summary>
            <param name="stream">The Stream containing the XML-document instance to deserialize</param>
            <param name="type">The type of object being deserialized</param>
            <returns>The Object being deserialized</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.CreateFormattedSerializer">
            <summary>
            Creates a Serializer class instances that formats the output XML.
            </summary>
            <returns>The created Serializer object.</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.MapType(System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Enumerates and serializes all fields and properties.
            </summary>
            <param name="writer">The XmlWriter used to write the XML-document instance</param>
            <param name="o">The Object to serialize.</param>
        </member>
        <member name="P:C1.C1Preview.Serialization.Serializer.Formatting">
            <summary>
            Sets or returns formatting used by the XML writer.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Serialization.Serializer.Indentation">
            <summary>
            Sets or returns indentation used by the XML writer.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.Serializer.Aliases">
            <summary>
            Holds the aliases for types.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.Serializer.TypeInfoCache">
            <summary>
            Caches information about types during serialization.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.TypeInfoCache.GetTypeInfo(System.Type)">
            <summary>
            Gets information about a type, if type does not exist in cache
            then the new TypeInfo object is created for it.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.Serializer.TypeInfo">
            <summary>
            Caches serialization information about a type.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsCollection">
            <summary>
            Indicates that the property/field is a collection.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsArray">
            <summary>
            Indicates that the property/field is an array.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsAttribute">
            <summary>
            Indicates that the property/field must be serialized as attribute.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsReference">
            <summary>
            Indicates that the property/field should be serialized as reference.
            This field can be true only for *non* value properties/fields.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsReferenceDest">
            <summary>
            Indicates that the property/field contains an object
            on which can reference properties/fields of other objects.
            This field can be true only for non value fields/properties,
            also these properties / fields should be serialized as XML elements (IsAttribute = false).
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsItemsAreReferences">
            <summary>
            Like IsReference but for items in collection.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsItemsAreReferencesDest">
            <summary>
            Like IsReferenceDest but for items in collection.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsSerializeContent">
            <summary>
            Indicates that the content of property will be serialized.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.CheckSerializable">
            <summary>
            Indicates that the property should be serialized only if sit supports deserialzation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IgnoreDeserializeError">
            <summary>
            Indicates that the error occurs during deserialization value of this property should be ignored.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Serialization.Serializer.TypeInfoItem.TypeSerialization">
            <summary>
            Defines how the type name of property/field should be serialized.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.TypeInfoItem.IsSerializationNeeded(System.Object,System.Object@)">
            <summary>
            Checks is serialization of the field/property needed or not.
            Serialization is needed if:
            2. ShouldSerializeXXX method is not defined in obj for member described by this TypeInfoItem object
            or this method returns true for value specified by propValue parameter.
            1. propValue does not equal DefaultValue for member described by this TypeInfoItem object.
            </summary>
            <param name="obj">Object containing property or field described by this TypeInfoItem object.</param>
            <param name="propValue">Contains value of property on exit.</param>
            <returns>Returns true if property of obj must be serialized.</returns>
        </member>
        <member name="M:C1.C1Preview.Serialization.Serializer.TypeInfoItem.GetValue(System.Object)">
            <summary>
            Returns the value of the field/property described by this TypeInfoItem class.
            </summary>
            <param name="obj">Object property/field of that is described by this TypeInfoItem object.</param>
        </member>
        <member name="T:C1.C1Preview.CompatibilityOptions">
            <summary>
            Defines the compatibility options for C1PrintDocument.
            Contains properties specifying compatibility with
            previous versions of C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1Preview.CompatibilityOptions.AssignFrom(C1.C1Preview.CompatibilityOptions)">
            <summary>
            Copies properties from another object into this object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="M:C1.C1Preview.CompatibilityOptions.Reset">
            <summary>
            Resets properties of this object to default values.
            </summary>
        </member>
        <member name="P:C1.C1Preview.CompatibilityOptions.WhiteRtfBackground">
            <summary>
            Gets or sets the value indicating whether RTF fills the background with
            white or uses the specified color. The default is false.
            </summary>
        </member>
        <member name="P:C1.C1Preview.CompatibilityOptions.HeaderFooterWidthAsTotalColumnWidth">
            <summary>
            Gets or sets a value indicating whether the widths of page headers and footers
            should be equal to the sum of the widths of all page columns. The default is false.
            Set this property to true to improve compatibility with C1Report.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerBase`1">
            <summary>
            Base class for all data handlers.
            These objects provides unitized interface to various types of data sources.
            </summary>
            <typeparam name="TRecordId">Type of object that identifies the record within data source. For example, for DataHandlerIEnumerable - TRecordId is a object</typeparam>
        </member>
        <member name="M:C1.C1Preview.Scripting.IScriptContext.GetActiveDataBinding">
            <summary>
            Gets the current C1DataBinding object, can return null it means that
            the databinding is not defined.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.IScriptContext.Document">
            <summary>
            Gets the C1PrintDocument object containing this context.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.IScriptContext.SubstitutePageNumbers">
            <summary>
            Indicates that the page depended values should be substituted with "XXX"
            string in the ScriptEngineBase.Format(...) method.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.IScriptContext.Page">
            <summary>
            Gets the current Page object, can be null in this case
            the page depended expression can't be calculated.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.IDataHandler.MoveNext(System.Boolean,C1.C1Preview.DataBinding.Aggregate)">
            <summary>
            Advances the data handler to the next record.
            </summary>
            <param name="calculatedAggregate">Specifies aggregate that should be calculated on this moving.</param>
            <param name="calculateAllAggregates">If true then all linked aggregates will be calculated.</param>
            <returns><b>true</b> if the data handler was successfully advanced to the next element; <b>false</b> if the data handler has passed the end of the collection.</returns>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._dataEnumerationStarted">
            <summary>
            Indicates that the BeginDataEnumeration() method was called.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._sortedData">
            <summary>
            Contains cached sorted data
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._groupedData">
            <summary>
            Contains cached grouped data
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._currentPos">
            <summary>
            Defines current position within _sortedData or _groupedData
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._currentGroupPos">
            <summary>
            Defines current position within group
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._aggregates">
            <summary>
            List of *not grouping* aggregates are calculated over data binding of this DataHandler.
            This list filled in BeginDataEnumeration(...) method
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._groupAggregates">
            <summary>
            List of *grouping* aggregates
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerBase`1._rowNumber">
            <summary>
            Number of the current row.
            Returns 0 if enumeration is not started, number
            of row if enumeration in progress.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerBase`1.BeginDataEnumeration">
            <summary>
            Begins enumeration of data owned by this data handler.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerBase`1.EndDataEnumeration">
            <summary>
            Ends enumeration of data, should be called after BeginDataEnumeration().
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerBase`1.MoveNext(System.Boolean,C1.C1Preview.DataBinding.Aggregate)">
            <summary>
            Advances the data handler to the next record of the data source. 
            </summary>
            <returns>true if the data handler was successfully advanced to the next record; false if the data handler has passed the end of the data source. </returns>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerBase`1.GetValue(System.String)">
            <summary>
            Returns value of field of current record.
            </summary>
            <param name="fieldName">Name of field.</param>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerBase`1.GetFields(C1.C1Preview.DataBinding.FieldCollection)">
            <summary>
            Builds list of fields.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataHandlerBase`1.Owner">
            <summary>
            Gets C1DataBinding object containing this object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerC1ReportPosition">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerPosition">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataHandlerPosition.Record">
            <summary>
            This field can be used in derived classes
            </summary>
        </member>
        <member name="T:C1.C1Preview.Forms.BaseForm">
            <summary>
            Base class for all custom forms in the C1Preview.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Forms.BaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.BaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Forms.BaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.ExportOptionsFormBase.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.ProcessPaginated">
            <summary>
            Can be used to update controls depending on Paginated property.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.RtfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.RtfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.RtfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.DocxOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.DocxOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.DocxOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.XlsOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.XlsOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.XlsOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.XlsxOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.XlsxOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.XlsxOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Import.C1ReportImporter">
            <summary>
            Defines a class used to import C1Report report definitions into C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Import.C1ReportImporter.Import(System.String,System.String)">
            <summary>
            Imports a C1Report report definition.
            </summary>
            <param name="fileName"></param>
            <param name="reportName"></param>
        </member>
        <member name="T:C1.C1Preview.Import.C1ReportImporter.Utils">
            <summary>
            Contains functions imported from C1Report.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Import.C1ReportImporter.Utils.TranslateConnectionString(System.String,Microsoft.Win32.RegistryKey)">
            <summary>
            Internal, used from TranslateConnectionString(string)
            Original: C1.Win.C1Report.DataSource.TranslateConnectionString
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.Import.C1ReportImporter.Utils.TranslateConnectionString(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.Import.C1ReportImporter.Utils.StartWithWord(System.String,System.String)" -->
        <member name="T:C1.C1Preview.BarCodeType">
            <summary>
            Specifies the type of barcode.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="!:RenderField.BarCode"/> property in the <see cref="T:C1.C1Preview.RenderField"/> class.
            </remarks>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.None">
            <summary>
            No barcode.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Code39">
            <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Code93">
            <summary>
            Alpha-numeric.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Code128">
            <summary>
            Alpha-numeric, denser than Code39 and required at least 6 characters.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.CodeI2of5">
            <summary>
            Numeric only.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Codabar">
            <summary>
            Numeric only, slightly denser than Code39.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.PostNet">
            <summary>
            Numeric only, US Postal Service.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Ean13">
            <summary>
            EAN-13 barcode. EAN-13 encodes 12-digit article codes 
            (plus one check digit created by the control).
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.Ean8">
            <summary>
            EAN-8 barcode. EAN-8 encodes 7-digit article codes 
            (plus one check digit created by the control).
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarCodeType.UpcA">
            <summary>
            UPC-A barcode. UPC-A encodes 11-digit article codes
            (plus one check digit created by the control).
            </summary>
        </member>
        <member name="T:C1.C1Preview.BarDirectionEnum">
            <summary>
            Specifies the direction of the barcode
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarDirectionEnum.Normal">
            <summary>
            The barcode is rendered in the horizontal direction.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarDirectionEnum.Up">
            <summary>
            The barcode is rendered from the bottom up.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BarDirectionEnum.Down">
            <summary>
            The barcode is rendered from the top down.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderBarCode">
            <summary>
            Represents a barcode object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderObject">
            <summary>
            Base class for all render objects.
            </summary>
            <summary>
            Base class for all render objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IStyleOwner">
            <summary>
            Defines a class that can have the Style property.
            </summary>
        </member>
        <member name="M:C1.C1Preview.IStyleOwner.GetProp(System.Int32)">
            <summary>
            Simple returns value of style property. This method called if value
            does not exist in the style, before resolving ambient/non ambient etc.
            </summary>
            <param name="propKey">Code of property (Style.c_propXXX constant).</param>
            <returns>Value of property.</returns>
        </member>
        <member name="P:C1.C1Preview.IStyleOwner.AmbientParent">
            <summary>
            Gets the parent for ambient properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.IStyleOwner.Style">
            <summary>
            Gets the style of this IStyleOwner.
            </summary>
        </member>
        <member name="P:C1.C1Preview.IStyleOwner.Dictionary">
            <summary>
            Gets the dictionary object used to store images.
            </summary>
        </member>
        <member name="P:C1.C1Preview.IStyleOwner.EmbeddedFonts">
            <summary>
            Gets the list of embedded fonts this collection is used to deserialize the fonts.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ICollectionOwner">
            <summary>
            Through this interface the owner object can receive the notifications
            from OwnedCollection.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IOwnedCollectionItem">
            <summary>
            Items of the OwnedCollection must implement this interface.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IDocumentLocation">
            <summary>
            Describes location within document. Each location is identified by page
            and rectangle on page. Units or rectangle depend on C1Preview.ResolvedUnit
            property.
            This interface implemented by:
            Page, RenderObject, C1Anchor.
            </summary>
            <summary>
            Describes location within document. Each location is identified by page
            and rectangle on page. Units or rectangle depend on C1Preview.ResolvedUnit
            property.
            This interface implemented by:
            Page, RenderObject, C1Anchor.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InitRenderObject">
            <summary>
            Performs some initializations.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)">
            <summary>
            Returns the value of flag. The object has private field:
            <code>
            private int _flags;
            </code>
            This field can be used for storing various boolean properties 
            (CanSplitHorz, CanSplitVert etc), for example CanSplitHorz property defined as:
            <code>
            public bool CanSplitHorz
            {
                get { return GetFlag(c_flgCanSplitVert); }
                set { SetFlag(c_flgCanSplitVert, value); }
            }
            </code>
            </summary>
            <param name="flagMask">Mask of flag.</param>
            <returns>Returns true if specified flag is set.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.SetFlag(System.Int32,System.Boolean)">
            <summary>
            Sets value of flag.
            <seealso cref="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)"/>
            </summary>
            <param name="flagMask">Mask of flag.</param>
            <param name="value">Value of flag.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.OnChildAdd(C1.C1Preview.RenderObject)">
            <summary>
            Called after adding new child RenderObject object to the Children collection.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
            <param name="child">Child RenderObject object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.OnChildRemove(C1.C1Preview.RenderObject)">
            <summary>
            Called after removing child RenderObject object from the Children collection.
            User can throw exception if this object can't be removed.
            </summary>
            <param name="child">Child RenderObject object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.OnParentAdd(C1.C1Preview.RenderObject)">
            <summary>
            Called after adding this object to the Children collection
            of another object.
            User can throw exception if this object can't be added as the child for this object.
            </summary>
            <param name="parent">The new parent object for this object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.OnParentRemove(C1.C1Preview.RenderObject)">
            <summary>
            Called after removing this object from the Children collection
            of another object.
            </summary>
            <param name="parent">The parent object of this object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetWidth">
            <summary>
            Override this method to perform additional actions when value of the Width property of object is being read.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.SetWidth(C1.C1Preview.Unit)">
            <summary>
            Override this method to perform additional actions when value of the Width property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetHeight">
            <summary>
            Override this method to perform additional actions when value of the Height property of object is being read.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.SetHeight(C1.C1Preview.Unit)">
            <summary>
            Override this method to perform additional actions when value of the Height property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.SetSplitVertBehavior(C1.C1Preview.SplitBehaviorEnum)">
            <summary>
            Override this method to perform additional actions when value of the SplitVertBehavior property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.SetSplitHorzBehavior(C1.C1Preview.SplitBehaviorEnum)">
            <summary>
            Override this method to perform additional actions when value of the SplitHorzBehavior property of object is being defined.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetAssignChildren">
            <summary>
            Override this method and return false if you want manually copy of children
            objects for this object. This method returns true by default.
            </summary>
            <returns>Boolean value indicating that the children objects must be copied in the AssignFrom method.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetActualWidth">
            <summary>
            Override this method to return actual width of object that is used
            when document resolved.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetActualHeight">
            <summary>
            Override this method to return actual height of object that is used
            when document resolved.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean)">
            <summary>
            Copies properties from another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
            <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
            <param name="assignChildren">Indicates that the list of children should be copied.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies properties from another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
            <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
            <param name="assignChildren">Indicates that the list of children should be copied.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)">
            <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean)">
            <summary>
            Creates the clone of object.
            </summary>
            <param name="assignDataBinding">Indicates the the DataBinding property should be assigned to the newly created object.</param>
            <param name="assignChildren">Indicates the the Children list should be assigned to the newly created object.</param>
            <returns>Returns the newly created object.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the clone of object.
            </summary>
            <param name="assignDataBinding">Indicates the DataBinding property should be assigned to the newly created object.</param>
            <param name="assignChildren">Indicates the Children list should be assigned to the newly created object.</param>
            <param name="assignAnchors">Indicates the Anchors list should be assigned to the newly created object.</param>
            <param name="assignHyperlink">Indicates the Hyperlink should be assigned to the newly created object.</param>
            <param name="assignName">Indicates the Name should be assigned to the newly created object.</param>
            <returns>Returns the newly created object.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.Clone">
            <summary>
            Creates the clone of object.
            </summary>
            <returns>Returns the newly created object.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetOwnedObjectCount">
            <summary>
            Calculates the number of objects which are owned by this object.
            </summary>
            <remarks>
            <para>This method takes into account:</para>
            <list type="bullet">
            <item><description>Child objects (and their children)</description></item>
            <item><description>Objects which are specified in page layouts as PageHeader, PageFooter etc.</description></item>
            </list>
            </remarks>
            <returns>The number of owned objects.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetNestedObjectCount">
            <summary>
            Calculates the count of objects which are nested within this object.
            This method takes into account child objects and their children.
            </summary>
            <returns>Returns the count of nested objects.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetDocumentLocationDescription">
            <summary>
            Returns the textual description of object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetApproximateCountOfFragmentsToProcess">
            <summary>
            Returns approximate count of fragments in object, used
            to indicating the progress of document generating.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InternalClearTemporaryInfo">
            <summary>
            Override this method to clear the temporary fields of object, which are used during resolving.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.OnMainFragmentBuilt">
            <summary>
            This method is called once for each object, override it
            to perform some initializations.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InternalResolvingFinished">
            <summary>
            Called once after fully resolving of RenderObject.
            At this moment all object's fragments are built and
            placed on pages.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InternalResolveCalculatedValues">
            <summary>
            Resolves the values of calculated fields of object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InternalClearCalculatedValues(System.Boolean)">
            <summary>
            Clears the values of calculated properties, called when document regenerated.
            </summary>
            <param name="clearDataBindingDependent">Indicates that values depend on data fields also should be cleared.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.CreateDataBindingCopy">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ResolveChildrenDataBinding(C1.C1Preview.RenderObject)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetProcessChildrenWhenDataBindingResolved">
            <summary>
            Override and return false in this method if
            your RenderObject manually resolves the data binding 
            of children.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetDataBindingForChild(C1.C1Preview.RenderObject)">
            <summary>
            Returns the C1DataBinding object for specified child object.
            </summary>
            <param name="child">The child RenderObject object.</param>
            <returns>Returns the C1DataBinding object or null if data binding does not specified for this child.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.InternalBuildFragment">
            <summary>
            Override this method to create a RenderFragment object corresponding to whole object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ResolveCalculatedValues(System.Boolean)">
            <summary>
            Resolves calculated object's values.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ClearCalculatedValues(System.Boolean)">
            <summary>
            Clear calculated values of object.
            </summary>
            <param name="dataBindingAvailable">Indicates that the values depend on data binding properties also should be cleared.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.GetActiveDataBinding">
            <summary>
            Gets the instance of C1DataBinding class that is used for this RenderObject
            typically this is a value of DataBinding property,
            but if DataBinding does not defined for object 
            the parent data binding will be returned (or parent of parent etc).
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.AddDataBindingCopy(C1.C1Preview.RenderObject,C1.C1Preview.TableCell)">
            <summary>
            Creates the copy of object with current datasource's data,
            adds this copy to the object's Copies collection.
            </summary>
            <param name="copyParent">Parent of copy.</param>
            <param name="copyCell">Cell of table where copy is.</param>
            <returns>Returns the created copy.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ResolveDataBinding(C1.C1Preview.RenderObject)">
            <summary>
            Analyses the data binding properties and creates the instances of this object
            and its children.
            </summary>
            <param name="copiesParent">The parent object for copies, for top-parent object this parameter is null.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ResetLayoutDimensions(C1.C1Preview.RefDim)">
            <summary>
            Resets the specified fields of ResolvedInfo.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ResetLayoutDimensions">
            <summary>
            Resets all fields of ResolvedInfo except for Offsets.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.ClearFragments">
            <summary>
            Deletes the object's fragments.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObject.IndexOfFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Returns the index of fragment of object.
            </summary>
            <param name="rf">RenderFragment object whose index must be returned.</param>
        </member>
        <member name="M:C1.C1Preview.RenderObject.CalcSize(C1.C1Preview.Unit,C1.C1Preview.Unit)">
            <summary>
            Calculates the sizes of object.
            Can be used to determine the auto sizes of object.
            </summary>
            <param name="width">The width of object can be auto or absolute units.</param>
            <param name="height">The height of object can be auto or absolute units.</param>
            <returns>Returns the sizes of object, value returned in C1PrintDocument.ResolvedUnit units.</returns>
        </member>
        <member name="P:C1.C1Preview.RenderObject.ActualWidth">
            <summary>
            Gets the actual width of object used when document resolved.
            This property may differs from Width for example if object is placed
            in the table's column with auto-with and Width is "parent.width" then
            this property returns auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.ActualHeight">
            <summary>
            Gets the actual height of object used when document resolved.
            This property may differs from Height for example if object is placed
            in the table's row with auto-height and Height is "parent.height" then
            this property returns auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.TableCellInt">
            <summary>
            The cell of RenderTable containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Document">
            <summary>
            Gets the C1Preview object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Collection">
            <summary>
            Gets the RenderObjectCollection object containing this object,
            returns null if object has no Owner or its Owner is not RenderObjectCollection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.IndexInOwner">
            <summary>
            Gets the index in owner object, returns the -1 if no owner.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Parent">
            <summary>
            Gets the parent RenderObject object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Name">
            <summary>
            Unique name of object, can be string.Empty or *unique* within of _owner.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.UserData">
            <summary>
            Gets or sets some data associated with object by user.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.HasChildren">
            <summary>
            Returns true if object has child objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Children">
            <summary>
            Returns collection of child objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.SplitVertBehavior">
            <summary>
            Gets or sets the value determining how the object is treated
            when it is too high to fit in the vertical space available on the current page.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior"/>
        </member>
        <member name="P:C1.C1Preview.RenderObject.SplitHorzBehavior">
            <summary>
            Gets or sets the value determining how the object is treated
            when it is too wide to fit in the horizontal space available on the current page.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderObject.SplitVertBehavior"/>
        </member>
        <member name="P:C1.C1Preview.RenderObject.CanSplitHorz">
            <summary>
            Indicates whether the object can be split horizontally if it falls on a page break.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.CanSplitVert">
            <summary>
            Indicates whether the object can be split vertically if it falls on a page break.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.ZOrder">
            <summary>
            Gets or sets the Z-order of object, the object with smaller ZOrder
            will be displayed other the object with larger ZOrder.
            By default ZOrder of all objects is zero.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.X">
            <summary>
            X coordinate of object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Y">
            <summary>
            Y coordinate of object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Width">
            <summary>
            Width of object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Height">
            <summary>
            Height of object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.BreakBefore">
            <summary>
            Gets or sets the type of break before this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.BreakAfter">
            <summary>
            Gets or sets the type of break after this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.LayoutChangeBefore">
            <summary>
            Gets or sets the LayoutChangeBase object
            defining the change of page layout before object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.LayoutChangeAfter">
            <summary>
            Gets or sets the LayoutChangeBase object
            defining the change of page layout after object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Style">
            <summary>
            Style of this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.RepeatBordersHorz">
            <summary>
            Indicates whether horizontal borders of object must be repeated when horizontal splitting.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.RepeatBordersVert">
            <summary>
            Indicates whether vertical borders of object must be repeated when vertical splitting.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.PageNumberingChange">
            <summary>
            Gets or sets the PageNumberingChange object describing the
            change of page number.
            </summary>
            <value></value>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with this render object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Anchors">
            <summary>
            Gets the collection of anchors within this render object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.TableCell">
            <summary>
            Gets the TableCell object containing this object, this property is 
            null if object not in RenderTable.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.KeepTogether">
            <summary>
            Gets or sets a render object which should be printed on the same page
            as the current object. The specified object must have the same
            <see cref="P:C1.C1Preview.RenderObject.Parent"/> as the current object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Visibility">
            <summary>
            Gets or sets the value indicating the visibility of the object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Id">
            <summary>
            This field used only for backward compatibility, to read old C1D files.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.HasFragments">
            <summary>
            Gets the value indicating whether the object contains fragments.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Fragments">
            <summary>
            Returns the collection of the object's fragments.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.FirstFragment">
            <summary>
            Gets the first object's fragment.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.LastFragment">
            <summary>
            Gets the last object's fragment.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.DataBinding">
            <summary>
            Gets the instance of C1DataBinding class representing the 
            data binding properties of this RenderObject object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.DataBindingMode">
            <summary>
            Gets the data binding mode of the render object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.DataBindingDefined">
            <summary>
            Gets the value indicating whether this object is data bound.
            Returns true if the object itself is bound via the DataBinding property,
            or if some nested objects are data bound (e.g. the rows of a RenderTable).
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Copies">
            <summary>
            Gets the collection of render objects generated as the result of data binding.
            The value of this property is null if the object is not data bound.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObject.Original">
            <summary>
            Gets the original RenderObject object that produced this object
            during processing of data binding, or null if there is no such object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderBarCode.BarCodeType">
            <summary>
            Gets or sets the type of encoding to use when generating the barcode.
            <para>Note that BarCodeType.None is not a valid value for this property.</para>
            </summary>
            <remarks>
            The selected encoding is applied to the value stored in the 
            <see cref="P:C1.C1Preview.RenderBarCode.Text"/> property to generate the barcode image 
            displayed in the object.
            </remarks>
            <example>The following sample shows how to use the BarCodeType property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code>
            </example>
        </member>
        <member name="P:C1.C1Preview.RenderBarCode.ShowText">
            <summary>
            Gets or sets a value indicating whether the string represending the <see cref="P:C1.C1Preview.RenderBarCode.Text"/> property
            should be displayed along with the barcode image.
            </summary>
            <remarks>
            By default, the object will show only the barcode image. To include a textual
            representation of the value in the <see cref="P:C1.C1Preview.RenderBarCode.Text"/> property, set this
            property to true.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderBarCode.Text">
            <summary>
            Gets or sets the value that is encoded as the barcode image.
            </summary>
            <remarks>
            <para>Some encodings support alphanumeric values of any length. Others
            are limited to numeric values or to a specific set of characters. 
            See the <see cref="P:C1.C1Preview.RenderBarCode.BarCodeType"/> enumeration 
            for details.</para>
            <para>If you use characters that are invalid for the current encoding, the
            object will display a blank image.</para>
            </remarks>
            <example>The following sample shows how to use the Text property to encode
            the value "123456" as a Code39-encoded barcode:
            <code>
            RenderBarCode rbc = new RenderBarCode();
            rbc.BarCodeType = BarCodeType.Code39;
            rbc.Text = "123456";
            doc.Body.Children.Add(rbc);
            </code>
            </example>
        </member>
        <member name="P:C1.C1Preview.RenderBarCode.BarDirection">
            <summary>
            Gets or sets the direction of the barcode.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderBarCodeFragment">
            <summary>
            Represents a fragment of a RenderBarCode object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderFragment">
            <summary>
            Represents the fragment of RenderObject.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IDocumentTreeNode">
            <summary>
            This interface is implemented by objects which
            form a document tree.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthExp">
            <summary>
            Represents the unit which holds an expression using the LengthRef or LengthAbs classes like:
            "parent.width + 5mm", "80%parent.width", and so on
            </summary>
            <summary>
            Represents the unit which holds an expression using the LengthRef or LengthAbs classes like:
            "parent.width + 5mm", "80%parent.width", and so on.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthBase">
            <summary>
            Represents a simple coordinate or size of object. This is an abstract class.
            </summary>
        </member>
        <member name="M:C1.C1Preview.LengthBase.StringToUnitType(System.String,C1.C1Preview.UnitTypeEnum@)">
            <summary>
            Converts a string to a UnitTypeEnum value. The string can be one of the following:
            "def", "doc", "in", "mm", "pc", "pix", "pt", "tw", "inhs".
            This method is case-insensitive.
            </summary>
            <param name="s">The string to convert. If it is null or empty, units are set to UnitTypeEnum.Default.</param>
            <param name="units">On exit, contains the UnitTypeEnum value.</param>
            <returns>Returns true if no error occurs, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.LengthBase.UnitTypeToString(C1.C1Preview.UnitTypeEnum)">
            <summary>
            Converts a UnitTypeEnum value to the string representation.
            <list type="bullet">
            <item><description><term>Default</term>Empty string</description></item>
            <item><description><term>Document</term>"doc"</description></item>
            <item><description><term>Inch</term>"in"</description></item>
            <item><description><term>Millimeter</term>"mm"</description></item>
            <item><description><term>Pica</term>"pc"</description></item>
            <item><description><term>Pixel</term>"pix"</description></item>
            <item><description><term>Point</term>"pt"</description></item>
            <item><description><term>Twip</term>"tw"</description></item>
            <item><description><term>InHs</term>"inhs"</description></item>
            </list>
            </summary>
            <param name="units">Value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.LengthBase.StringToDimension(System.String,C1.C1Preview.DimensionEnum@)">
            <summary>
            Converts a string to DimensionEnum. String can have value from:
            ("left", "top", "right", "bottom", "width", "height", "relleft", "reltop", "relright", "relbottom").
            Method is case insensitive.
            </summary>
            <param name="s">String to convert, if s is null or empty then units will be RefDim.Default.</param>
            <param name="dim">Contains a dimension on exit.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.LengthBase.Parse(System.String,System.Boolean)">
            <summary>
            Analyzes a passed string and creates an instance 
            of the LengthBase class on the basis of this string.
            </summary>
            <param name="s">String to analyze.</param>
            <param name="throwException">Indicates whether an exception must be raised if string has an error and can't be converted to the LengthBase.</param>
            <returns>Returns an instance LengthAbs or LengthRef or LengthExp or LengthAuto class, returns a null value if throwException equals false and s has an error.</returns>
        </member>
        <member name="P:C1.C1Preview.LengthBase.IsAuto">
            <summary>
            Returns true if coordinate is auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthBase.IsEmpty">
            <summary>
            Returns true if coordinate linked with empty (zero) coordinate.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthBase.Auto">
            <summary>
            Gets instance of the LengthAuto class representing an auto dimension.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Elements">
            <summary>
            Represents an expression, expression may contains:
            LengthBase objects, Numbers (int, double etc) and objects derived from LengthExp.Op class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Operations">
            <summary>
            The array of registered operations.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.UnaryOperations">
            <summary>
            The array of registered unary operations.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Functions">
            <summary>
            The array of registered functions.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthExp.Predefined">
            <summary>
            Holds some predefined LengthExp objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.RightAlign">
            <summary>
            Represents "Parent.Right - Self.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.BottomAlign">
            <summary>
            Represents "Parent.Bottom - Self.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.HorzCenterAlign">
            <summary>
            Represents "(Parent.Width - Self.Width) / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.VertCenterAlign">
            <summary>
            Represents "(Parent.Height - Self.Height) / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.HorzCenter">
            <summary>
            Represents "Self.Width / 2" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthExp.Predefined.VertCenter">
            <summary>
            Represents "Self.Height / 2" reference.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ChangeResolvedDimensions(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called when the resolved sizes of object should be changed,
            for example when resolving of table is finished and
            height of all objects in row set in same value.
            Object can ignore this changing and do not change self size.
            This method called only for *child* objects, so x and y are
            relative to the top-left corner of parent.
            </summary>
            <param name="x">New left coord of object.</param>
            <param name="y">New top coord of object.</param>
            <param name="width">New width of object.</param>
            <param name="height">New height of object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.IsReresolvingNeeded(C1.C1Preview.PageAreaBase,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the value indicating whether the full reresolving of whole render object is needed.
            </summary>
            <param name="pageArea">The area on page.</param>
            <param name="left">The X coordinate on page.</param>
            <param name="top">The Y coordinate on page.</param>
            <param name="width">The width of fragment.</param>
            <param name="height">The height of fragment.</param>
            <returns>Returns true if RenderObject containing this fragment should be reresolved.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CalcLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
            <summary>
            Calculates a value of dimension specified by the LengthAbs object.
            </summary>
            <param name="dim">Dimension to calculate.</param>
            <param name="length">LengthAbs object defining a value of dimension.</param>
            <param name="customObjectDimension">The custom object's dimension is resolved.</param>
            <param name="pageArea">Contains PageAreaBase object referenced by LengthAbs on exit.</param>
            <param name="value">Contains value of coordinate or size on exit.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetReferencedColumn(C1.C1Preview.RefDim,C1.C1Preview.LengthRef,System.Int32,C1.C1Preview.ResolvedPage)">
            <summary>
            Internal called only from GetReferencedObject.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetReferencedObject(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
            <summary>
            Gets the object referenced by LengthRef object.
            Called only from ResolveLengthRef.
            </summary>
            <param name="dim">Dimension which is specified by the length.</param>
            <param name="length">LengthRef object defining the value of dimension.</param>
            <returns>Returns object referenced by length.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CalcLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
            <summary>
            Calculates a value of dimension specified by the LengthRef object.
            (dimension references on dimension of another object).
            </summary>
            <param name="dim">Dimension to calculate.</param>
            <param name="length">LengthRef object defining a value of dimension.</param>
            <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
            <param name="pageArea">Contains PageAreaBase object referenced by LengthRef on exit.</param>
            <param name="value">Contains value of coordinate or size on exit.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CalcLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
            <summary>
            Calculates a value of dimension specified by the LengthExp object.
            (dimension is an expression).
            </summary>
            <param name="dim">Dimension to calculate.</param>
            <param name="length">LengthExp object defining a value of dimension.</param>
            <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
            <param name="pageArea">Contains PageAreaBase object on exit.</param>
            <param name="value">Contains value of coordinate or size on exit.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs)">
            <summary>
            Resolves an absolute dimension of object.
            </summary>
            <param name="dim">Dimension to resolve.</param>
            <param name="length">LengthAbs object defining a value of dimension.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAuto(C1.C1Preview.RefDim,C1.C1Preview.LengthAuto)">
            <summary>
            Resolves an auto dimension of object.
            </summary>
            <param name="dim">Dimension to resolve.</param>
            <param name="length">LengthAuto object defining a value of dimension.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
            <summary>
            Resolves a dimension of object specified as reference.
            </summary>
            <param name="dim">Dimension to resolve.</param>
            <param name="length">LengthRef object defining a value of dimension.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp)">
            <summary>
            Resolves a expression dimension of object.
            </summary>
            <param name="dim">Dimension to resolve.</param>
            <param name="length">LengthExp object defining a value of dimension.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim,C1.C1Preview.LengthBase,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
            <summary>
            Calculates a value of dimension.
            Only LengthRef, LengthAbs, LengthExp can be specified as length.
            </summary>
            <param name="dim">Dimension to calculate.</param>
            <param name="length">Value of dimension, can be LengthAbs, LengthRef or LengthExp.</param>
            <param name="customObjectDimension">Indicates that the custom object dimension is resolved, coordinate of point for RenderLine, width of column for RenderTable etc.</param>
            <param name="pageArea">Contains PageAreaBase object on exit or nul if coordinate is relative.</param>
            <param name="value">Contains value of coordinate or size on exit.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim)">
            <summary>
            This method can be called only by *another* RenderFragment object
            during resolving LengthRef object.
            </summary>
            <param name="dim">Dimension which must be resolved.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.OnPrepareForReresolving(C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.ReresolvingModeEnum)">
            <summary>
            Override this method to perform additional initializations of resolved info
            of object on reresolving.
            Some dimensions of object do not change when it splits, so you 
            can use this method to copy some information from 
            old resolved info to new resolved info.
            </summary>
            <param name="newResolvedInfo"></param>
            <param name="oldResolvedInfo"></param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetContentAutoWidth(System.Double,System.Double@)">
            <summary>
            Override this method to calculate the width of object on basis of its content,
            this method is called when width of object specified as auto, for example:
            <code>
            obj.Width = Unit.Auto;
            </code>
            </summary>
            <param name="width">Height of area of contents of object.</param>
            <param name="height">Width of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetContentAutoHeight(System.Double,System.Double@)">
            <summary>
            Override this method to calculate the height of object on basis of its content,
            this method is called when height of object specified as auto, for example:
            <code>
            obj.Height = Unit.Auto;
            </code>
            </summary>
            <param name="width">Width of area of contents of object.</param>
            <param name="height">Height of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetContentAutoSize(System.Double@,System.Double@)">
            <summary>
            Override this method to calculate sizes of object on basis of its content,
            this method is called when width and height of object specified as auto.
            </summary>
            <param name="width">Width of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
            <param name="height">Height of area of contents of object, value must be specified in the "Document.ResolvedUnit" units.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveChildrenLayout">
            <summary>
            Resolves sizes of object and layout of its children.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetDrawingFlags(System.Boolean)">
            <summary>
            Override this method to define the drawing flags.
            These flags manage the object's painting.
            <seealso cref="T:C1.C1Preview.DrawingFlagsEnum"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background of object.
            </summary>
            <param name="graphics">Graphics object on which the object is being drawn.</param>
            <param name="backgroundRect">Bounds of inner area of object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.DrawBorders(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws borders of object.
            </summary>
            <param name="graphics">Graphics object on which the object is being drawn.</param>
            <param name="boundsRect">Bounds of object, this rectangle already defined as the clipping rectangle.</param>
            <param name="outerRect">Outer rectangle of borders.</param>
            <param name="innerRect">Inner rectangle of borders.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.Page,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Override this procedure if GetDrawingFlags does not set the DrawingFlagsEnum.UseGdiDrawing flag.
            </summary>
            <param name="graphics">Graphics object on which the object is being drawn.</param>
            <param name="page">Page containing this fragment.</param>
            <param name="clipRect">Bounds of object on the page if DrawingFlagsEnum.SetClipping flag is specified then this rectangle is a clip rectangle.</param>
            <param name="drawRect">Drawing bounds of object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.Page,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Override this procedure if GetDrawingFlags sets the DrawingFlagsEnum.UseGdiDrawing flag.
            </summary>
            <param name="graphics">Graphics object on which the object is being drawn.</param>
            <param name="page">Page containing this fragment.</param>
            <param name="clipRect">Bounds of object on the page if DrawingFlagsEnum.SetClipping flag is specified then this rectangle is a clip rectangle.</param>
            <param name="drawRect">Drawing bounds of object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetHorzSplits(System.Collections.Generic.List{System.Double})">
            <summary>
            Override this method and return the horizontal splits in the object relative to the left edge of
            the content area.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
            <summary>
            Override this method and return the vertical splits in the object relative to the top top edge of
            the content area.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.CreateSplitParams">
            <summary>
            Creates a SplitParams object, used during splitting, child
            classes may override this method to create the SplitParams object of custom type
            (derived from SplitParams).
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
            <summary>
            Checks can object's content be split on specified position by vertically.
            </summary>
            <param name="p">SplitParams object defining the parameters of splitting.</param>
            <returns>Returns true if object can be split on specified position (p.ContentRealSplitPos).</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
            <summary>
            Splits content of object by vertically, by default this procedure split object as image.
            </summary>
            <param name="newFragment">The created fragment describing part of object before contentSplitPos.</param>
            <param name="p">SplitParams object defining the paramters of splitting.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.FindHorzSplitPosContent(C1.C1Preview.SplitParams)">
            <summary>
            Checks can object's content be split on specified position by horizontally.
            </summary>
            <param name="p">SplitParams object defining the parameters of splitting.</param>
            <returns>Returns true if object can be split on specified position.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
            <summary>
            Splits content of object by horizontally, by default this procedure split object as image.
            </summary>
            <param name="newFragment">The created fragment describing part of object before contentSplitPos.</param>
            <param name="p">SplitParams object defining the paramters of splitting.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.Split(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
            <summary>
            Performs splitting of RenderFragment object.
            </summary>
            <param name="newFragment">New fragment which was created as result of splitting.</param>
            <param name="p">SplitParams object describing the splitting.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.PrepareForReresolving(System.Collections.Hashtable,C1.C1Preview.ReresolvingModeEnum)">
            <summary>
            Prepares fragment for reresolving, which may occurs when fragment is split.
            This method resets to unresolved state some fields of RenderFragment.RenderObject.ResolvedInfo.
            </summary>
            <param name="list">Used to store temporary info, must be passed as parameter to RestoreAfterReresolving function.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.RestoreAfterReresolving(System.Collections.Hashtable)">
            <summary>
            Restores the resolved info from obj, also this function updates 
            Right, Bottom, RightBottomPageArea fields of ResolvedInfo from current resolved info.
            </summary>
            <param name="obj">Object which was returned by the SaveAndClearResolvedInfo function.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.PrepareLayout(System.Double,System.Double)">
            <summary>
            Prepares a layout of fragment: sets Bounds, Inner, DrawInner properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveOffset(C1.C1Preview.RefDim,System.Int32)">
            <summary>
            Resolves offset of object spacing or padding, this offset can be represented
            as LengthAbs only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveBorder(C1.C1Preview.RefDim,System.Int32)">
            <summary>
            Resolves border of object, width of border can be represented
            as LengthAbs only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveOffsets">
            <summary>
            Resolves all "offsets" of object: Spacing, Padding, Borders.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolveLayout">
            <summary>
            Resolves the sizes of object and layout of its children.
            This method can be used to reresolve the layout of object
            on splitting and when new page area was started during calculating
            object's position.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.Resolve">
            <summary>
            Resolves all object's dimensions.
            If object is a top-parent object when it will be placed on the pages of document.
            </summary>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.DoLayoutChange(C1.C1Preview.LayoutChangeBase,C1.C1Preview.RenderFragment)">
            <summary>
            Processes the passed layout change action of child object.
            RenderObject only processes the LayoutChangeNewLine action
            all other will be processed later when top-parent object is split.
            </summary>
            <param name="layoutChange">LayoutChangeBase object defining the type of layout change.</param>
            <param name="rfChild">The child RenderFragment object this object exists in the Children collection of this object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.AddAllChildrenWithSplitNewPage(System.Int32,C1.C1Preview.SplitParams)">
            <summary>
            Internal, called only from FindSplitPos.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.DetachFromRenderObject">
            <summary>
            Detach this RenderFragment object from its RenderObject object,
            also all child fragments will be detached.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.Clone">
            <summary>
            Creates and returns a copy of render fragment.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.AssignFrom(C1.C1Preview.RenderFragment)">
            <summary>
            Copyes all properties from another RenderFragment object, 
            the Children collection is copied also.
            </summary>
            <param name="source">The source RenderFragment object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.ResolvingFinished">
            <summary>
            This method is called by the render engine after
            fully resolving of render fragment.
            Typically this method is used to clear temporary info used during resolving.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,C1.C1Preview.Page,System.Boolean)">
            <summary>
            Paints fragment on specified graphics.
            </summary>
            <param name="graphics">Graphics object on which fragment must be drawn.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
            <summary>
            Calculates the information about specified anchor.
            </summary>
            <param name="anchor">The C1Anchor object from RenderObject.Anchors collection.</param>
            <param name="anchorRect">The bounds of anchor in fragment in resolved units (C1PrintDocument.ResolvedUnitType). This parameter contains valid value only if anchorVisible is true.</param>
            <param name="anchorVisible">The content of RenderObject can be split on some fragments this parameter contains true on exit if anchor is in this fragment.</param>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.FindHyperlink(C1.C1Preview.PointD)">
            <summary>
            Searches the C1Hyperlink object in the render fragment at specified position.
            </summary>
            <param name="pt">Specifies the point within object relative to top-left corner of fragment.</param>
            <returns>The C1HyperlinkInfo object describing the searched hyperlink or null if not found.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
            <summary>
            Adds the fragment's hyperlinks in the passed collection.
            </summary>
            <param name="hyperlinks">The C1HyperlinkInfoCollection object in which the fragment's hyperlinks will be added.</param>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.ParentInt">
            <summary>
            Gets or sets the parent RenderFragment object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.DocumentPart">
            <summary>
            IDocumentPart object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.DrawInner">
            <summary>
            Specifies the drawing offsets of object relative to inner area (see InnerOffset)
            the drawing bounds are:
            Left = Bounds.Left + Inner.Left + DrawInner.Left
            Top = Bounds.Top + Inner.Top + DrawInner.Top
            Right = Bounds.Right - Inner.Right - DrawInner.Right
            Bottom = Bounds.Bottom - Inner.Bottom - DrawInner.Bottom
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Padding">
            <summary>
            Gets the offsets of padding area relative to inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Borders">
            <summary>
            Gets the offsets of borders area relative to padding area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Spacing">
            <summary>
            Gets the offsets of spacing area relative to borders area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Inner">
            <summary>
            Gets the summary offsets of inner area (without spacing, borders and padding).
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerLeft">
            <summary>
            Get the left offset of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerTop">
            <summary>
            Get the top offset of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerRight">
            <summary>
            Get the right offset of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerBottom">
            <summary>
            Get the bottom offset of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerWidth">
            <summary>
            Gets the width of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerHeight">
            <summary>
            Gets the height of inner area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.PageArea">
            <summary>
            Gets the PageAreaBase object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Bounds">
            <summary>
            Gets the rectangle of object within its parent, if fragment is a top-parent fragment
            then this bounds is the bounds within Page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerBounds">
            <summary>
            Gets the rectangle of content area of object, without spacing, border, padding.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.BoundsOnPage">
            <summary>
            Gets the bounds of object on page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.InnerBoundsOnPage">
            <summary>
            Gets the bounds of inner area of object on page.
            </summary>
            <value></value>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Document">
            <summary>
            Gets C1PrintDocument object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.RenderObject">
            <summary>
            Gets the RenderObject object which has produced this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Parent">
            <summary>
            Gets the parent RenderFragment object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.TopParent">
            <summary>
            Gets the top-parent RenderFragment object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Visible">
            <summary>
            Indicates whether the fragment is visible.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.IndexInRenderObject">
            <summary>
            Gets index of fragment in its own RenderObject object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.IndexInParent">
            <summary>
            Gets index of fragment in its parent.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Level">
            <summary>
            Gets the level of RenderFragment in its parent, the top most fragment
            (which has no parent) has a 1 level.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.HasChildren">
            <summary>
            Returns true if fragment has child fragments.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFragment.Children">
            <summary>
            Gets a collection of child objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.op_Implicit(C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder)~System.Drawing.Font">
            <summary>
            Converts a <see cref="T:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder"/> object to a <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> object.
            </summary>
            <param name="fontHolder">The <see cref="T:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder"/> object.</param>
            <returns><see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> object.</returns>
        </member>
        <member name="M:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.ToString">
            <summary>
            Gets a string that represents this <see cref="T:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder"/>.
            </summary>
            <returns>A string that represents this <see cref="T:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder"/>.</returns>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font">
            <summary>
            Gets or sets the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Name">
            <summary>
            Gets or sets the name of the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Size">
            <summary>
            Gets or sets the <see cref="P:System.Drawing.Font.Size"/> of the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Bold">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> is bold.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Italic">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> is italic.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Underline">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> is underlined.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Strikethrough">
            <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.C1Preview.Scripting.C1ReportScript.Wrappers.FontHolder.Font"/> has a horizontal line
            through the text.
            </summary>
        </member>
        <member name="T:C1.C1Preview.AnchorEnum">
            <summary>
            Determines how a <see cref="T:C1.C1Preview.RenderField"/>
            is positioned with respect to its containing section 
            when the section grows or shrinks as a result of the section's 
            </summary>
            <remarks>Use members of this enumeration to set the value of the
            <see cref="P:C1.C1Preview.RenderField.Anchor"/> property in the <see cref="T:C1.C1Preview.RenderField"/> class.
            </remarks>
            <seealso cref="P:C1.C1Preview.RenderSection.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderSection.CanShrink"/>
        </member>
        <member name="F:C1.C1Preview.AnchorEnum.Top">
            <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AnchorEnum.Bottom">
            <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AnchorEnum.TopAndBottom">
            <summary>
            The field grows or shrinks with the section.
            Both the distance from the top of the field to the top of the section,
            and the distance from the bottom of the field to the bottom of the section,
            remain the same.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LineSlantEnum">
            <summary>
            Determines whether/how a line should be drawn across the RenderField 
            (as opposed to a box around the field).
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Preview.RenderField.LineSlant"/> property in the <see cref="T:C1.C1Preview.RenderField"/> class.
            </remarks>
        </member>
        <member name="F:C1.C1Preview.LineSlantEnum.NoLine">
            <summary>
            Regular field (not a line).
            </summary>
        </member>
        <member name="F:C1.C1Preview.LineSlantEnum.NoSlant">
            <summary>
            Render field as a vertical line (if Height > Width) 
            or as a horizontal line (if Width > Height).
            </summary>
        </member>
        <member name="F:C1.C1Preview.LineSlantEnum.Down">
            <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
        </member>
        <member name="F:C1.C1Preview.LineSlantEnum.Up">
            <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
        </member>
        <member name="T:C1.C1Preview.CheckBoxEnum">
            <summary>
            Specifies how boolean values are translated into checkboxes.
            </summary>
            <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.C1Preview.RenderField.CheckBox"/> property in the <see cref="T:C1.C1Preview.RenderField"/> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
        </member>
        <member name="F:C1.C1Preview.CheckBoxEnum.NoCheckBox">
            <summary>
            No checkbox (display as text).
            </summary>
        </member>
        <member name="F:C1.C1Preview.CheckBoxEnum.CheckBox">
            <summary>
            Checkbox.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CheckBoxEnum.CrossBox">
            <summary>
            Crossbox.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CheckBoxEnum.RadioButton">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderField">
            <summary>
            Represents a render object analogous to the <b>Field</b> object of a <b>C1Report</b>.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.TabPositions">
            <summary>
            Gets the collection of text tab positions.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.HasTabPositions">
            <summary>
            Gets the value indicating whether the <see cref="P:C1.C1Preview.RenderField.TabPositions"/> collection
            contains at least one element.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.Text">
            <summary>
            Gets or sets the text of the current field.
            </summary>
            <remarks>
            <para>This property contains the text that will be rendered on the document.</para>
            <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            script expression, depending on the value of the <see cref="P:C1.C1Preview.RenderField.Calculated"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.Picture">
            <summary>
            Gets or sets a picture to display in the current field.
            <para>This property may be set to one of the following three kinds of objects:</para>
            <list type="number">
            <item>A regular .NET <see cref="T:System.Drawing.Image"/> object.</item>
            <item>A string containing an image file name or URL.</item>
            <item>A string containing the name of an image field in the data source.</item>
            </list>
            <para>The first two options are used to create unbound images, such as logos. These images do not 
            depend on the document data.</para>
            <para>The third option is used to create bound images, such as product or employee pictures. These 
            images are stored with the document data.</para>
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.DetectUrls">
            <summary>
            If the current field's <see cref="P:C1.C1Preview.RenderField.RTF"/> property is true,
            this property gets or sets a value indicating whether
            Uniform Resource Locators (URLs) will be automatically formatted
            when found in the text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.Calculated">
            <summary>
            Specifies whether the <see cref="P:C1.C1Preview.RenderField.Text"/> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
            <remarks>
            <para>If this property is set to false, the value of the <see cref="P:C1.C1Preview.RenderField.Text"/> property is
            inserted in the document without any further processing.</para>
            <para>If this property is set to true, the value of the <see cref="P:C1.C1Preview.RenderField.Text"/> property is
            evaluated as a script expression and the result of the expression is
            inserted in the document.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.HideDuplicates">
            <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
            <remarks>
            <para>You can use the <see cref="P:C1.C1Preview.RenderField.HideDuplicates"/> property to hide a field in a document 
            when its value is the same as in the preceding record.</para>
            <para>For example, in a report listing suppliers and their products, each supplier's name 
            can appear just once for each group of products, rather than repeat for each product.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.Format">
            <summary>
            Gets or sets a string used to format the value of the current field.
            </summary>
            <remarks>
            <para>You can use this property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
            <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.C1Preview.RenderField.Format"/> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
            <para>You can use this property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
            <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)"/> method.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.LineSlant">
            <summary>
            Gets or sets a value indicating whether a line should be drawn across the current field
            (as opposed to a box around the field).
            </summary>
            <seealso cref="T:C1.C1Preview.LineSlantEnum"/>
            <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.C1Preview.Style.ShapeLine"/> property.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.CheckBox">
            <summary>
            Gets or sets a value indicating whether the current field should be displayed as a checkbox.
            </summary>
            <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderField.RTF">
            <summary>
            Gets or sets a value indicating whether <see cref="P:C1.C1Preview.RenderField.Text"/> of the current field
            should be interpreted as RTF.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.BarCodeType">
            <summary>
            Gets or sets a value indicating whether the current field should be rendered as barcode,
            and allows to specifiy the barcode type.
            </summary>
            <seealso cref="!:BarCodeEnum"/>
        </member>
        <member name="P:C1.C1Preview.RenderField.GeneralTextAlignment">
            <summary>
            Gets or sets a value indicating whether the text alignment in the current field
            should depend on the type of data represented by the field. If this property
            is true, numbers will align to the right while all other data to the left.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.SubReport">
            <summary>
            Gets or sets a reference to a <see cref="T:C1.C1Preview.RenderReport"/> object to be rendered within the current field.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderField.CanGrow">
            <summary>
            Gets or sets a value indicating whether the height of the current field can increase
            automatically to fit the field's content.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderField.CanShrink"/>
            <seealso cref="P:C1.C1Preview.RenderSection.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderSection.CanShrink"/>
        </member>
        <member name="P:C1.C1Preview.RenderField.CanShrink">
            <summary>
            Gets or sets a value indicating whether the height of the current field can decrease
            automatically to fit the field's content.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderField.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderSection.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderSection.CanShrink"/>
        </member>
        <member name="P:C1.C1Preview.RenderField.Anchor">
            <summary>
            Gets or sets the value determining the vertical position of the current field
            relative to the containing <see cref="T:C1.C1Preview.RenderSection"/>.
            </summary>
            <remarks>
            <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
            <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
            </remarks>
            <seealso cref="T:C1.C1Preview.AnchorEnum"/>
        </member>
        <member name="T:C1.C1Preview.RenderFieldFragment">
            <summary>
            Fragment of RenderField object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.IC1TextOwner">
            <summary>
            This interface must be implemented by object owning the C1Text object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.IC1TextOwner.GetTextIndent">
            <summary>
            Returns the left indent of first line in paragraph,
            returned value specified in pixels of DC specified for C1Text.Measure(...) method.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.IC1TextOwner.GetTextAlign(C1.C1Preview.AlignHorzEnum@,C1.C1Preview.AlignVertEnum@)">
            <summary>
            Gets the alignment of text, with this method owner can override values
            defined in style.
            </summary>
            <param name="horzAlign">OUT: Contains horizontal alignment of text.</param>
            <param name="vertAlign">OUT: Contains vertical alignment of text.</param>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextOwner.IsNewParagraph">
            <summary>
            Indicates that the text begins the new paragraph, 
            i.e. the first line of text will have left indent (if it defined)
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextOwner.Items">
            <summary>
            List of IC1TextItem objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextOwner.Style">
            <summary>
            Style of whole object, this style provides global properties:
            TextAlignVert, LineSpacing etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextOwner.TabPositions">
            <summary>
            List of IC1TabPosition objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.IC1TextItems">
            <summary>
            Provides access to the list of the IC1TextItem objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItems.Count">
            <summary>
            Count of IC1TextItem objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItems.Item(System.Int32)">
            <summary>
            Enumerates the IC1TextItem objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.IC1TextItem">
            <summary>
            Represents the item of C1Text contents.
            This is a "base" interface, from it the IC1TextObjectItem and IC1TextTextItem
            interfaces are derived.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItem.Style">
            <summary>
            Gets the style of item.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItem.FontName">
            <summary>
            Gets the name of the item's font. This property allows to redefine the
            name of the font on the "fly".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItem.FontGdiCharSet">
            <summary>
            Gets the charset of the item's font. This property allows to redefine the
            charset of the font on the "fly".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItem.Hyperlink">
            <summary>
            Gets info about hyperlink linked with this item.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextItem.Length">
            <summary>
            Length of item in chars, IC1TextObjectItem always returns 1.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.IC1TextTextItem">
            <summary>
            Represents the range of text with same format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Util.IC1TextTextItem.Text">
            <summary>
            Gets the text of text range.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFieldFragment.LastCharIndex">
            <summary>
            Index of first character *after* fragment.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFieldFragment.IsNewParagraph">
            <summary>
            Indicates that the text within fragment finished with CR or LF char,
            i.e. the text in next fragment begins a new paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderFieldFragment.IsLinesVertical">
            <summary>
            Indicates that the lines of text go in vertical direction from top to bottom
            or from bottom to top.
            </summary>
        </member>
        <member name="T:C1.C1Preview.FragmentResolvedInfo">
            <summary>
            Represents the temporary info used during resolving,
            instance of this class, created for each object participating in resolving.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FragmentResolvedInfo.PageActionsBefore">
            <summary>
            Can be specified only for top-parent object and contains the
            LayoutChangeBase object representing the layout change
            before this top-parent, it can be taken from LayoutChangeBefore property of top parent
            or from one of its children.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FragmentResolvedInfo.PageActionsAfter">
            <summary>
            Can be specified only for top-parent object and contains the
            LayoutChangeBase object representing the layout change
            after this top-parent, it can be taken from LayoutChangeAfter property of top parent
            or from one of its children.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FragmentResolvedInfo.VertSplits">
            <summary>
            Represents the vertical splits in the render fragment.
            Can be specified only for top-parent object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FragmentResolvedInfo.HorzSplits">
            <summary>
            Represents the horizontal splits in the render fragment.
            Can be specified only for top-parent object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftOffset">
            <summary>
            Returns a sum of Padding.Left, Spacing.Left, Borders.Left
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.RightOffset">
            <summary>
            Returns a sum of Padding.Right, Spacing.Right, Borders.Right
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.TopOffset">
            <summary>
            Returns a sum of Padding.Top, Spacing.Top, Borders.Top
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.BottomOffset">
            <summary>
            Returns a sum of Padding.Bottom, Spacing.Bottom, Borders.Bottom
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoLeft">
            <summary>
            Indicates that the Left coordinate of object was calculated as auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoTop">
            <summary>
            Indicates that the Top coordinate of object was calculated as auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoPos">
            <summary>
            Indicates that the Left-top position of object was calculated as auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailWidth">
            <summary>
            Returns the distance between Left and LeftTopPageArea.Right.
            </summary>
        </member>
        <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailHeight">
            <summary>
            Returns the distance between Top and LeftTopPageArea.Bottom.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SplitParams">
            <summary>
            The base class for split parameters used when object should be split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ChildrenSplitParams">
            <summary>
            OUT (FindSplitPos):
            The collection of SplitParams objects from children.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SplitPos">
            <summary>
            IN:
            Specifies the requested split position.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SpacingMin">
            <summary>
            IN:
            Left / Top spacing.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SpacingMax">
            <summary>
            IN:
            Right / Bottom spacing.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.PaddingMin">
            <summary>
            IN:
            Left / Top padding.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.PaddingMax">
            <summary>
            IN:
            Right / Bottom padding.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.BorderMin">
            <summary>
            IN:
            Left / Top border.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.BorderMax">
            <summary>
            IN:
            Right / Bottom border.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SplitDimensionSize">
            <summary>
            IN:
            Size of split dimension, on vertical split - height, on horizontal - width.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.NonSplitDimensionContentSize">
            <summary>
            IN:
            The content size of non split dimension, 
            on vertical split: Width - Inner.Left - Inner.Right;
            on horizontal split: Height - Inner.Top - Inner.Bottom.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.RepeatBorders">
            <summary>
            IN:
            RepeatBordersVert or RepeatBordersHorz.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SplitVert">
            <summary>
            IN:
            Indicates the type of split: vertical or horizontal.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ChildrenAlwaysCanSplit">
            <summary>
            IN:
            ChildrenAlwaysCanSplitVert or ChildrenAlwaysCanSplitHorz, depends on
            type of splitting: vertical or horizontal.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.SplitContext">
            <summary>
            IN:
            Gets SplitContext object containing some global options for splitting.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.TopParentHardBreak">
            <summary>
            IN:
            Indicates that the top parent object process the hard break.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.NewFragmentSize">
            <summary>
            OUT (FindSplitPos):
            The size of new fragment, which is created at the split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ContentSplitOffset">
            <summary>
            OUT (FindSplitPos):
            Offsets for split position within content area,
            the content area is split at position: RealSplitPos - ContentSplitOffset.
            ContentSplitOffset calculated on the base 
            of padding / spacing / borders / RepeatBorders.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ContentRealSplitPos">
            <summary>
            OUT (FindSplitPos):
            The real split position within content area, calculated in the
            FindVertSplitPosContent / FindHorzSplitPosContent.
            ContentRealSplitPos = RealSplitPos - ContentSplitOffset.
            Also see comments to ReprintedFooterSize.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ChildrenSplitPosOffset">
            <summary>
            OUT (FindSplitPos):
            Offset of children' splitting position from ContentSplitPos.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ReprintFooterSize">
            <summary>
            OUT (FindSplitPos):
            The size of reprinted footer at the bottom of object,
            filled in the FindXXXContent method, after calling this method
            the ContentRealSplitPos does not include this size, and real
            RealSplitPos is:
            ContentRealSplitPos + ContentSplitOffset + ReprintFooterSize.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.ReprintHeaderSize">
            <summary>
            OUT (FindSplitPos):
            The size of reprinted header at the top of object which was split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.NeedReresolving">
            <summary>
            OUT (Split):
            Indicates that after splitting the fragment which was split
            must be reresolved. This field filled after RenderFragment.Split method.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitParams.AllChildrenSplitInSamePlace">
            <summary>
            OUT:
            Indicates that all children splits at ONE line.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitParams.Clone">
            <summary>
            Creates and returns a copy of this object, the ChildrenSplitParams
            property is copied by reference.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitParams.AssignFrom(C1.C1Preview.SplitParams)">
            <summary>
            Copies all properties from another SplitParams object, the ChildrenSplitParams
            property is copied by reference.
            </summary>
            <param name="source">Source SplitParams object.</param>
        </member>
        <member name="P:C1.C1Preview.SplitParams.ExistSplittedChildren">
            <summary>
            Indicates that the object has the splitted child objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.GrowShrinkModeEnum">
            <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
            <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode"/> property in the <see cref="T:C1.C1Preview.RenderReport"/> class.
            </remarks>
        </member>
        <member name="F:C1.C1Preview.GrowShrinkModeEnum.C1Report">
            <summary>
            Uses the standard C1Report mode, where fields that grow or shrink affect only fields directly below.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GrowShrinkModeEnum.Access">
            <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderReport">
            <summary>
            Represents a C1Report object which is a subreport nested within a
            <see cref="T:C1.C1Preview.RenderField"/> object and specified by the
            <see cref="P:C1.C1Preview.RenderField.SubReport"/> property.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderArea.HeaderVert">
            <summary>
            Gets or sets a render object that will be repeated on all pages (or columns)
            if the current render area is split vertically when it is too high to fit on
            a single page.
            </summary>
            <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="!:Children"/> collection.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderArea.HeaderHorz">
            <summary>
            Gets or sets a render object that will be repeated on all "horizontal" pages
            if the current render area is split horizontally when it is too wide to fit on
            a single page.
            </summary>
            <remarks>
            The specified render object should not be a child of another render object.
            It can be a child of the current render area; if it is not, it will be
            added to the current render area's <see cref="!:Children"/> collection.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.RenderReport.ExposeScriptObjects">
            <summary>
            Gets or sets a value indicating whether script objects should be exposed
            to nested objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderReport.DataProcessingStartingScript">
            <summary>
            Gets or sets a script that is executed when data processing of the current object starts.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderReport.DataProcessingFinishedScript">
            <summary>
            Gets or sets a script that is executed when data processing of the current object has completed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderReport.GrowShrinkMode">
            <summary>
            Gets or sets a value indicating how <see cref="P:C1.C1Preview.RenderField.CanGrow"/> and <see cref="P:C1.C1Preview.RenderField.CanShrink"/> 
            properties are handled.
            </summary>
            <remarks>
            <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report"/>, fields with 
            <see cref="P:C1.C1Preview.RenderField.CanGrow"/> or <see cref="P:C1.C1Preview.RenderField.CanShrink"/> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
            <para>If this property is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access"/>, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior.)</para>
            <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode"/> is set to 
            <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access"/>, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
            <para>If <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode"/> is set to <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report"/>, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
            </remarks>
        </member>
        <member name="T:C1.C1Preview.SectionTypeEnum">
            <summary>
            Specifies the section type.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.Undefined">
            <summary>
            Undefined. This setting indicates the field doesn't belong to any sections and should not be rendered.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.Detail">
            <summary>
            Detail section: repeated for every record in the source recordset.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.Header">
            <summary>
            Document header section: appears once, in the beginning of the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.Footer">
            <summary>
            Document footer section: appears once, in the end of the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.PageHeader">
            <summary>
            Page header section: appears at the top of every page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.PageFooter">
            <summary>
            Page footer section: appears at the bottom of every page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupHeader1">
            <summary>
            Group header section: appears before level-one groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupFooter1">
            <summary>
            Group footer section: appears after level-one groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupHeader2">
            <summary>
            Group header section: appears before level-two groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupFooter2">
            <summary>
            Group footer section: appears after level-two groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupHeader3">
            <summary>
            Group header section: appears before level-three groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupFooter3">
            <summary>
            Group footer section: appears after level-three groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupHeader4">
            <summary>
            Group header section: appears before level-four groups.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SectionTypeEnum.GroupFooter4">
            <summary>
            Group footer section: appears after level-four groups.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderSection">
            <summary>
            Represents a render object analogous to the <b>Section</b> object of a <b>C1Report</b>.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderSection.CanGrow">
            <summary>
            Gets or sets a value indicating whether the height of the current section can increase
            automatically to fit the field's content.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderSection.CanShrink"/>
            <seealso cref="P:C1.C1Preview.RenderField.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderField.CanShrink"/>
        </member>
        <member name="P:C1.C1Preview.RenderSection.CanShrink">
            <summary>
            Gets or sets a value indicating whether the height of the current section can decrease
            automatically to fit the field's content.
            </summary>
            <seealso cref="P:C1.C1Preview.RenderSection.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderField.CanGrow"/>
            <seealso cref="P:C1.C1Preview.RenderField.CanShrink"/>
        </member>
        <member name="P:C1.C1Preview.RenderSection.OnFormatScript">
            <summary>
            Gets or sets a string containig the script to be executed before the current
            section is formatted. This script is executed for each record, and can be used
            to change the content of the section depending on the record data.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderSection.OnPrintScript">
            <summary>
            Gets or sets a string containig the script to be executed before the current
            section is printed (after it has been formatted). This script can be used to
            adjust the visual properties of the section which do not affect the layout
            (e.g. text and background colors).
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderSectionFragment">
            <summary>
            Represents a fragment of a <see cref="T:C1.C1Preview.RenderSection"/> object.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptEngine">
            <summary>
            --------------------------------------------------------------------
            ScriptEngine
            --------------------------------------------------------------------
            ScriptEngine parses strings and returns Expression or Statement
            objects that can be evaluated/executed.
            
            The base class provides only simple expression evaluation. For most 
            practical applications, you will need to add variables and custom
            objects to the engine, so scripts can assign values etc.
            
            To do this, you should derive a new class from ScriptEngine and 
            override the following member:
            
              public virtual object GetObjectByName(string strName)
              
              This function should return an object. The object can be a 
              simple value type (e.g. "pi" returns 3.14), or an object with 
              properties and methods (e.g. myobj.Left). To allow getting and 
              setting the default property, the object must implement a 
              property called "Value" (e.g. myobj = 12 is the same as 
              myobj.Value = 12).
             
            This class has two main members:
            
            - ParseExpression(str) returns an Expression object that can be 
              evaluated very quickly. This returns a value (object type).
            - ParseStatement(str) returns a Statement object that can be
              executed. This does not return anything.
              
            It also has two useful helpers:
              
            - Evaluate(str) parses the expression in str and evaluates it.
            - Execute(str) parses the statement in str and executes it.
            
            These helpers are convenient, but calling them repeatedly is slower
            than using the ParseExpression/ParseStatement and evaluating/executing
            the results (because the latter only parses once).
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptValueWrapper">
            <summary>
            ScriptValueWrapper is a helper class that wraps simple objects
            and exposes a Value property so the ScriptEngine can assign them new 
            values.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.ScriptException">
            <summary>
            Summary description for ScriptException.
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Expression">
            <summary>
            --------------------------------------------------------------------
            Expression
            --------------------------------------------------------------------
            a tree containing a parsed expression
            e.g.
            Expression expr = scriptEngine.Parse(strExpression);
            object val = expr.Evaluate();
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Statement">
            <summary>
            --------------------------------------------------------------------
            Statement
            --------------------------------------------------------------------
            a sequence of parsed statements
            e.g.
            Statement stmt = scriptEngine.ParseStatemnt(strStatemtent);
            stmt.Execute();
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.Token">
            <summary>
            --------------------------------------------------------------------
            Token contains:
            --------------------------------------------------------------------
            1) the token id (+, -, *, etc)
            2) the token type (binary operator, unary operator, fun, var, lit)
            3) the token literal (Token, var name, lit value)
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.ScriptEngine.TKTYPE">
            <summary>
            --------------------------------------------------------------------
            TKTYPE and TKID enumerations:
            --------------------------------------------------------------------
            TKTYPE is the token type and defines operator priority
            TKID is the token ID and is used for evaluating expressions
            --------------------------------------------------------------------
            </summary>
        </member>
        <member name="T:C1.Win.C1Report.Util.Types">
            <summary>
            Summary description for Types.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.C1ReportScript.Wrappers.C1Report">
            <summary>
            Wrapper of C1.Win.C1Report.C1Report class.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1">
            <summary>
            Internal use only.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="F:C1.C1Preview.Scripting.DependenciesEnum.DependsOnPage">
            <summary>
            Means that the calculated expression contains references to the number of page
            or count of pages i.e. it contains references to the page depended values
            and can't be calculated.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Split">
            <summary>
            Represents the split in top-parent RenderObject.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Split.Owner">
            <summary>
            Gets the RenderFragment object in which split occurs.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Split.Position">
            <summary>
            Gets the position of split relative to top/left edge of content area of Owner object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Split.PositionInTopParent">
            <summary>
            Gets the position of split relative to top-left corner of top parent object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Split.PageActions">
            <summary>
            Gets or sets an array of page actions which should be executed on split.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SplitCollection">
            <summary>
            Collection of Split objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.NamedCollection">
            <summary>
            Represents the collection each element of that
            has an unique name.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OwnedCollection">
            <summary>
            Base class for RenderObjectCollection and ParagraphObjectCollection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OwnedCollection.GetItemType">
            <summary>
            If this method returns not null then only objects of this type
            can be added to the collection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OwnedCollection.IndexOf(System.Object)">
            <summary>
            Searches for the specified Object and returns the zero-based index 
            of the first occurrence within the entire collection.
            </summary>
            <param name="obj">The Object to locate in the collection. The value can be a null reference.</param>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:C1.C1Preview.OwnedCollection.Exchange(System.Int32,System.Int32)">
            <summary>
            Swap two items in collection.
            </summary>
            <param name="item1">Index of first item.</param>
            <param name="item2">Index of second item.</param>
        </member>
        <member name="P:C1.C1Preview.OwnedCollection.Owner">
            <summary>
            Gets the owner of collection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.NamedCollection.IndexOfName(System.String)">
            <summary>
            Returns the zero-based index of the NamedCollectionItem object
            with specified name in the NamedCollection.
            </summary>
            <param name="name">The name to locate in the NamedCollection. </param>
            <returns>The zero-based index of name, if name is found in the NamedCollection; otherwise, -1.</returns>
        </member>
        <member name="T:C1.C1Preview.NamedCollectionItem">
            <summary>
            Represents an element of the NamedCollection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.NamedCollectionItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
            <summary>
            Copies properties of another object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="M:C1.C1Preview.NamedCollectionItem.Clone">
            <summary>
            Create clone of this object, created object has some name as this object,
            but it does not belong to owner of this object, owner of created object is null.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.NamedCollectionItem.Owner">
            <summary>
            Gets the NamedCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.NamedCollectionItem.Name">
            <summary>
            Gets or sets the unique name of the NamedCollectionItem object in its collection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.Clear">
            <summary>
            Clears a collection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.GetPropIndex(System.Int32)">
            <summary>
            Gets index of property in _keys and _values arrays.
            </summary>
            <param name="propKey">Key of property.</param>
            <returns>Returns index of property value in the Values array it is zero-based.</returns>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.SetPropValue(System.Int32,System.Object)">
            <summary>
            Sets value of property.
            </summary>
            <param name="propKey">Key of property.</param>
            <param name="value">Value of property.</param>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.DeletePropValue(System.Int32)">
            <summary>
            Deletes tyhe property value from collection.
            </summary>
            <param name="propKey">Key of property.</param>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.IsEmpty">
            <summary>
            Returns true if collection is empty.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PropsHashtable.IsPropExists(System.Int32)">
            <summary>
            Returns true if value of specified property is defined.
            </summary>
            <param name="propKey">Key of property.</param>
        </member>
        <member name="T:C1.C1Preview.DataBinding.AggregateFuncEnum">
            <summary>
            Defines the set of supported aggregate functions.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum">
            <summary>
            Returns the sum of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Average">
            <summary>
            Returns the average of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Count">
            <summary>
            Returns the count of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Min">
            <summary>
            Returns the minimum of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Max">
            <summary>
            Returns the maximum of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.CountDistinct">
            <summary>
            Returns the count of distinct values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.First">
            <summary>
            Returns the first value of the expression within 
            the scope (after all sorting up through the Scope
            has been applied).
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Last">
            <summary>
            Returns the last value of the expression within
            the scope (after all sorting up through the Scope
            has been applied).
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Var">
            <summary>
            Returns the variance of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.VarP">
            <summary>
            Returns the population variance of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDev">
            <summary>
            Returns the standard deviation of values of the expression within the scope.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDevP">
            <summary>
            Returns the population standard deviation of values of the expression within the scope.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.RunningEnum">
            <summary>
            Defines the scope of an aggregate.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.RunningEnum.Document">
            <summary>
            The scope is the whole document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.RunningEnum.Group">
            <summary>
            The scope is the current group.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Aggregate">
            <summary>
            Represents an aggregate value calculated during document generation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.Aggregate._aggFunc">
            <summary>
            Reference to AggFuncBase object used to calculate a value.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.Aggregate._values">
            <summary>
            List of saved values, contains all values of variable
            for every group for example.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.Aggregate.AssignFrom(C1.C1Preview.NamedCollectionItem)">
            <summary>
            Copies properties from another Aggregate object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.Owner">
            <summary>
            Gets the AggregateCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.Func">
            <summary>
            Gets or sets the aggregate function to calculate.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.IgnoreNullValues">
            <summary>
            Gets or sets a value which specifies whether null values should be
            ignored when an aggregate is calculated.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.Expression">
            <summary>
            Gets an expression used to calculate aggregate value.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText">
            <summary>
            Gets a text of expression used to calculate aggregate value.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.DataBinding">
            <summary>
            Gets or sets the data binding for which the arithmetic function is calculated.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.Running">
            <summary>
            Gets or sets the value indicating whether the aggregate should be calculated
            over all records, or separately for each group.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Aggregate.Value">
            <summary>
            Gets the value of field.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.AggregateCollection">
            <summary>
            Collection of Field objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Owner">
            <summary>
            Gets the C1DataSchema object containing this AggregateCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.Int32)">
            <summary>
            Enumerates aggregates by index.
            </summary>
            <param name="index">Index of aggregate zero-based.</param>
            <returns>Returns the Aggregate object at specified position.</returns>
        </member>
        <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.String)">
            <summary>
            Enumerates aggregates by name.
            </summary>
            <param name="name">Name of aggregate.</param>
            <returns>Returns the Aggregate object with specified name, empty aggregate will be returned if collection has no field with specified name.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.C1DataBinding">
            <summary>
            Defines the data binding properties of an object within a C1PrintDocument.
            (Currently only RenderObject and TableVectorGroup objects have DataBinding property of this type.)
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.IFieldCollectionOwner">
            <summary>
            This interface should be implemented by object
            containing FieldCollection object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.C1DataBinding.AssignFrom(C1.C1Preview.DataBinding.C1DataBinding)">
            <summary>
            Copies properties from another object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Owner">
            <summary>
            Gets the object containing this C1DataBinding object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Parent">
            <summary>
            Gets the parent C1DataBinding object.
            The parent is retrieved based on the objects' ownership hierarchy,
            so e.g. for a RenderText inside a RenderArea, the RenderText's DataBinding.Parent
            will return the DataBinding of the area containing the text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Mode">
            <summary>
            Gets the data binding mode.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Defined">
            <summary>
            Gets the value indicating that this C1DataBinding object is not empty
            and is linked to some data.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" -->
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping">
            <summary>
            Gets the Grouping object that defines how the data is grouped.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting">
            <summary>
            Gets the Sorting object that defines how the data is sorted.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Fields">
            <summary>
            Gets the collection of data fields.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Filters">
            <summary>
            Gets the collection of expressions containing filters applied to the linked data.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Document">
            <summary>
            Gets the C1PrintDocument object containing this C1DataBinding object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber">
            <summary>
            Gets the row number of the current row or group instance.
            This property can be used only when document is generating.
            It returns 0 if document is not in generating state or processing
            of RenderObject containing this C1DataBinding object is not started,
            returns number of row when data is enumerated and number of last row
            when data enumeration finished.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.C1DataSchema.Clear">
            <summary>
            Clears the C1DataSchema object, deletes all defined
            DataSets, DataSources and Aggregates.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Owner">
            <summary>
            Gets the C1PrintDocument object containing this data schema.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources">
            <summary>
            Gets the DataSourceCollection object containing information about
            how to connect to the sources of data for the various DataSets.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets">
            <summary>
            Gets the DataSetCollection object, containing information about the
            sets of data retrieved as a part of the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates">
            <summary>
            Gets the AggregateCollection object, containing information about
            aggregate values calculated during document generation.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataProviderEnum">
            <summary>
            The type of the data source.
            This will determine the syntax of the ConnectionProperties.ConnectString and 
            Query.CommandText.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SQL">
            <summary>
            Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.OLEDB">
            <summary>
            Microsoft OLE DB Provider.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.ODBC">
            <summary>
            Microsoft Open Database Connectivity Driver.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.XmlFile">
            <summary>
            The XML file specified as the datasource, in this case
            the ConnectString contains name of file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.ConnectionProperties">
            <summary>
            Contains information about how to connect to a data source.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.ConnectionProperties.AssignFrom(C1.C1Preview.DataBinding.ConnectionProperties)">
            <summary>
            Copies properties from another ConnectionProperties object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.DataProvider">
            <summary>
            Gets or sets the type of the data source.
            This determines the syntax of the ConnectionProperties.ConnectString and
            Query.CommandText.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.ConnectString">
            <summary>
            Gets or sets the connection string for the data source.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.IntegratedSecurity">
            <summary>
            Gets or sets the value indicating whether connection to this data source
            should use integrated security.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerIEnumerableBase.GetFirstObject">
            <summary>
            Used in InternalGetFields(...) method if underlying data source
            does not support ITypedList. In this case all public properties 
            of first object will be returned as fields.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataHandlerIEnumerableBase.GetITypedList">
            <summary>
            Used to get the list of available fields, can return null,
            in this case all public properties of first object in the list
            will be used as fields.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerDataSet">
            <summary>
            Represents the simple data handler that can iterate the DataSet from
            top to bottom works over DbDataReader object, i.e. it can be used
            only when no sorting or grouping defined.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerDataSetBase`1">
            <summary>
            Represents the base class for data handlers work over DataSet.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataHandlerDataSetSimple">
            <summary>
            Represents the simple data handler that can iterate the DataSet from
            top to bottom works over DbDataReader object, i.e. it can be used
            only when no sorting or grouping defined.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSet">
            <summary>
            Contains information about a set of data retrieved as a part of the document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataSet.AssignFrom(C1.C1Preview.DataBinding.DataSet)">
            <summary>
            Copies properties from another DataSet object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.Owner">
            <summary>
            Gets DataSetCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.Query">
            <summary>
            Gets Query object defining information about the data source, including
            connection information, query, etc. required to
            get the data from the data source.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.Fields">
            <summary>
            Gets the DataSetFieldCollection object containing the fields in the data set.
            List of fields can be empty in this case all 
            fields retrieved by query will accessible.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.Filters">
            <summary>
            Gets the ExpressionCollection collection containing filters 
            applied to the dataset's records.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.RowFilter">
            <summary>
            Gets or sets the expression used to filter which data rows are included
            in the document.
            This property will be assigned to the RowFilter property
            of the underlying DataTable object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSet.MaxRecords">
            <summary>
            Gets or sets the maximum number of records that will be fetched
            from the data set. The default is -1, which includes all records.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSetCollection">
            <summary>
            Collection of DataSet objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataSetCollection.Add(C1.C1Preview.DataBinding.DataSet)">
            <summary>
            Adds DataSet object to the collection.
            </summary>
            <param name="item">The DataSet object to add.</param>
            <returns>Returns index of added object in the collection.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSetField">
            <summary>
            Represents the field in the data model.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataSetField.AssignFrom(C1.C1Preview.NamedCollectionItem)">
            <summary>
            Copies properties from another DataSetField object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetField.Expression">
            <summary>
            Gets the Expression object defining the expression used to calculate
            the value of this field. Either Expression or DataField
            (but not both) should be defined for a DataSetField. If both are defined,
            DataField is used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetField.DataField">
            <summary>
            Gets or sets the name of the field in the query.
            DataField names do not need to be unique.
            Multiple fields can refer to the same data field.
            If DataField is not specified then Expression is used to determine
            the value of the field.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetField.ExpressionText">
            <summary>
            Gets or sets the text of the expression.
            This field is a shortcut for the Expression.Text property.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSetFieldCollection">
            <summary>
            Collection of DataSetField objects.
            All fields in the collection must have unique non-empty names.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Owner">
            <summary>
            Gets the DataSet object containing this DataSetFieldCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.Int32)">
            <summary>
            Enumerates fields by index.
            </summary>
            <param name="index">Index of field zero-based.</param>
            <returns>Returns the Field object at specified position.</returns>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.String)">
            <summary>
            Enumerates fields by name.
            </summary>
            <param name="name">Name of field.</param>
            <returns>Returns the DataSetField object with specified name, null will be returned if collection has no field with specified name.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSource">
            <summary>
            Contains information about a data source.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataSource.AssignFrom(C1.C1Preview.DataBinding.DataSource)">
            <summary>
            Copies properties from another DataSource object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSource.Owner">
            <summary>
            Gets DataSourceCollection object containing this DataSource object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSource.DataSchema">
            <summary>
            Gets C1DataSchema object containing this DataSource object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSource.ConnectionProperties">
            <summary>
            Contains information about how to connect to the data source: ConnectString, data provider, etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.DataSource.Transaction">
            <summary>
            Indicates the data sets that use this data source should be executed in a single transaction.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DataSourceCollection">
            <summary>
            Collection of DataSource objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.Add(C1.C1Preview.DataBinding.DataSource)">
            <summary>
            Adds DataSource object to the collection.
            </summary>
            <param name="item">DataSource object to add.</param>
            <returns>Index in collection of added object.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.DatabindingUtils">
            <summary>
            Some functions used by classes in DataBinding.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Expression">
            <summary>
            Represents an expression that can be used is grouping, sorting etc.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.Expression.AssignFrom(C1.C1Preview.DataBinding.Expression)">
            <summary>
            Copies properties from another object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Expression.Text">
            <summary>
            Gets or sets the text of expression.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.ExpressionCollection">
            <summary>
            Collection of Expression objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.ExpressionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index within the collection. 
            </summary>
            <param name="index">Index of item zero-based.</param>
            <returns>Returns an item at specified index.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Field">
            <summary>
            Represents the data field.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Field.Owner">
            <summary>
            Gets the FieldCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Field.Value">
            <summary>
            Gets the value of field.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.FieldCollection">
            <summary>
            Collection of Field objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.FieldCollection.Owner">
            <summary>
            Gets the owner object containing this FieldCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated">
            <summary>
            Gets value indicating that the collection was created automatically and was not changed
            by the user.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.Int32)">
            <summary>
            Enumerates fields by index.
            </summary>
            <param name="index">Index of field zero-based.</param>
            <returns>Returns the Field object at specified position.</returns>
        </member>
        <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.String)">
            <summary>
            Enumerates fields by name.
            </summary>
            <param name="name">Name of field.</param>
            <returns>Returns the Field object with specified name, empty field will be returned if collection has no field with specified name.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Grouping">
            <summary>
            The Grouping class defines expressions by which the data is grouped.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.Grouping.AssignFrom(C1.C1Preview.DataBinding.Grouping)">
            <summary>
            Copies properties from another object.
            The Name and Owner properties are not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Grouping.Defined">
            <summary>
            Gets the value indicating whether any grouping is defined.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Grouping.Owner">
            <summary>
            Gets the C1DataBinding object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Grouping.Expressions">
            <summary>
            Gets the ExpressionCollection containing the expressions
            to by which to group the data.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.CommandTypeEnum">
            <summary>
            Describes the allowed query types.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.Text">
            <summary>
            CommandText contains the text of the SQL query.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.StoredProcedure">
            <summary>
            CommandText contains the name of a stored procedure that should be executed to retrieve the data.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.TableDirect">
            <summary>
            CommandText contains the name of the data table.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Query">
            <summary>
            Contains the description of the query to execute and retrieve the data for the document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.Query.AssignFrom(C1.C1Preview.DataBinding.Query)">
            <summary>
            Copies properties from another Query object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Query.DataSource">
            <summary>
            Gets or sets the DataSource object against which to execute the query.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Query.CommandType">
            <summary>
            Gets or sets the type of the query contained in the CommandText.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Query.CommandText">
            <summary>
            Gets or sets the query to execute to obtain the data for the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Query.Timeout">
            <summary>
            Gets or sets the number of seconds to allow the query to run
            before timing out. Must be nonnegative. If
            omitted or zero, the query should not time out.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Query.Parameters">
            <summary>
            Gets the QueryParameterCollection object 
            containing parameters that are passed to the data source as part of the query.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.QueryParameter">
            <summary>
            Contains information about a parameter that is passed to the data
            source as part of the query.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
            <summary>
            Copies properties from another QueryParameter object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.QueryParameter.Owner">
            <summary>
            Gets the QueryParameterCollection object containing this query parameter.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.QueryParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.QueryParameterCollection">
            <summary>
            Collection of QueryParameter objects.
            All parameters in the collection must have unique non-empty names.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Owner">
            <summary>
            Gets the Query object containing this QueryParameterCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.Int32)">
            <summary>
            Enumerates parameters by index.
            </summary>
            <param name="index">Index of parameter zero-based.</param>
            <returns>Returns the QueryParameter object at specified position.</returns>
        </member>
        <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.String)">
            <summary>
            Enumerates parameters by name.
            </summary>
            <param name="name">Name of parameter.</param>
            <returns>Returns the QueryParameter object with specified name, null will be returned if collection has no parameter with specified name.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBinding.Sorting">
            <summary>
            The Sorting class defines the expressions to sort the data by.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.Sorting.AssignFrom(C1.C1Preview.DataBinding.Sorting)">
            <summary>
            Copies properties from another object.
            The Owner property not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Sorting.Defined">
            <summary>
            Gets value indicating that the sorting is defined.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.Sorting.Expressions">
            <summary>
            Gets the collection of sort expressions.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.SortDirectionEnum">
            <summary>
            Defines the types of sorting.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Ascending">
            <summary>
            Sorts in ascending order.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Descending">
            <summary>
            Sorts in descending order.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.SortExpression">
            <summary>
            Represents the sorting expression.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DataBinding.SortExpression.AssignFrom(C1.C1Preview.DataBinding.SortExpression)">
            <summary>
            Copies properties from another object.
            The Owner property not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.DataBinding.SortExpression.Expression">
            <summary>
            Gets the Expression object defining the expression.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.SortExpression.Direction">
            <summary>
            Gets or sets the direction of sorting.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.SortExpression.ExpressionText">
            <summary>
            Gets or sets the text of sorting expression.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DataBinding.SortExpressionCollection">
            <summary>
            Collection of SortExpression objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DataBinding.SortExpressionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index within the collection. 
            </summary>
            <param name="index">Index of item zero-based.</param>
            <returns>Returns an item at specified index.</returns>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ControlLocalizeRules">
            <summary>
            Defines the default rules of enduser localization.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.ControlLocalizeRules.GetLocalizedProperties(System.Type,System.Object)">
            <summary>
            Returns the list of properties that should be localized
            for specified type of control.
            </summary>
            <param name="controlType">Type of control.</param>
            <param name="endUserLocalizeOptions">The EndUserLocalizeOptionsAttribute specified for type.</param>
            <returns>Returns the list of properties' names or null if control should no localized.</returns>
        </member>
        <member name="P:C1.C1Preview.Design.Localization.Product.Projects">
            <summary>
            Gets the list of projects containing this product.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.PropsStoreBase">
            <summary>
            Base class for store properties of visual controls, position of form for example.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ResourceItemCollection">
            <summary>
            Collection of ResourceItem objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.ResourceItemCollection.GetStrings(System.Collections.Generic.List{C1.C1Preview.Design.Localization.ResourceString})">
            <summary>
            Fills a list with all ResourceString objects containing
            in this collection and all its nested collections.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Design.Localization.ResourceItemCollection.HasChanged">
            <summary>
            Returns true if collection or any of its children
            has changed items.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ResourceString">
            <summary>
            Represents the resource string for all cultures.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ResourceStringValues">
            <summary>
            Contains values for each culture.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ResourceGroup">
            <summary>
            Represents the group of resource strings.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ControlsResourceGroup">
            <summary>
            Represents the group of resources containing the 
            strings for localizing the visual controls 
            (forms, user controls, controls on forms, etc).
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.ControlResourceGroup">
            <summary>
            Represents the group of resource string containing the
            strings for localizing the separate control.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.Localization.RootResourceGroup">
            <summary>
            Represents the root resource group containing all other resources.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Design.Localization.RootResourceGroup.Cultures">
            <summary>
            Gets the list of all cultures in the resources.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.Utils.GetImage(System.String)">
            <summary>
            Loads an image from the entry assembly. 
            </summary>
            <param name="name">The name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.Utils.GetImage(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an image from the specified assembly. 
            </summary>
            <param name="a">An <see cref="T:System.Reflection.Assembly"/> to load image from.</param>
            <param name="name">The name of the requested image.</param>
            <returns>The <see cref="T:System.Drawing.Image"/> if it is found; null otherwise.</returns>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.DeleteCultureDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.DeleteCultureDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.DeleteCultureDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.OpenTranslationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.OpenTranslationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.OpenTranslationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.SelectCultureDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectCultureDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectCultureDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.SelectProductDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectProductDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectProductDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.SelectProjectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectProjectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.SelectProjectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.StringsDesigner.New">
            <summary>
            Create the new translation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.Localization.StringsDesigner.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.StringsDesigner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.Localization.StringsDesigner.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.ExportProvider">
            <summary>
            Describes the export format.
            Base class for all export providers.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)">
            <summary>
            Returns true if exporter supports export of specified object.
            By default this method returns false for all objects.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>Returns true if corresponding exporter can export the specified object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
            <summary>
            Returns true if exporter supports export of specified range of document.
            By default this method returns true for DocumentRangeTypeEnum.All.
            </summary>
            <param name="range">Type of range to test.</param>
            <returns>Returns true if corresponding exporter can export the specified output range.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.CanExportToStream">
            <summary>
            Gets the value indicating whether the exporter can save results to stream.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.CanShowOptions">
            <summary>
            Gets the value indicating whether the exporter can show the options setup dialog.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass">
            <summary>
            Gets the type of form which is used to edit export options by default.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProvider.SupportedDocumentInfoFields">
            <summary>
            Gets the info about fields of DocumentInfo class which are supported by underlying exporter.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Exporter">
            <summary>
            Base class for all exporters.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
            <summary>
            Processes and exports a page.
            </summary>
            <param name="pageImage">The page image.</param>
            <param name="pageNo">Logical page number (1-based).</param>
            <param name="firstPage">True if this is the first page to be exported, false otherwise.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.Reset">
            <summary>
            Resets the internal state of the exporter.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.Clear">
            <summary>
            Resets the internal state of the exporter,
            and all public properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.ConvertEmfPlusToEmfOnly">
            <summary>
            Override this function and return true if you want convert all EmfPlus metafiles
            to EmfOnly before export.
            By default this function returns false.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.InternalExport">
            <summary>
            Actually performs the export to file or stream.
            One of parameters (fileName or stream) is not null, so you can check
            the destenation of export - file or stream.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
            <summary>
            Copies options from exporter to its options form.
            </summary>
            <param name="f">ExportOptionsFormBase object.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
            <summary>
            Copies options to exporter from its options form.
            </summary>
            <param name="f">ExportOptionsFormBase object.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.Export(System.String)">
            <summary>
            Performs export.
            </summary>
            <param name="fileName">Name of output file.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)">
            <summary>
            Performs export to stream.
            Not all exporters support export to stream to check this
            use property CanExportToStream of corresponding ExportProvider.
            </summary>
            <param name="stream">Stream object to store results of export.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Exporter.ShowOptionsDialog">
            <summary>
            Displays the dialog to edit the export options.
            </summary>
            <returns>True if the dialog was displayed successfully and user pressed OK, false otherwise.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.OutputFileName">
            <summary>
            Gets the name of output file when void Export(string fileName)
            was called.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.OutputStream">
            <summary>
            Gets the destination stream when void Export(Stream stream)
            was called.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.OutputFiles">
            <summary>
            Gets the list of files which were generated during export.
            Typically exporters produce one file (like RtfExporter, XlsExporter etc)
            but some (like HtmlExporter) may generate more than one file, 
            all those files can be accessed through this property.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.DocumentInfo">
            <summary>
            Gets or sets the DocumentInfo object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.ExportProvider">
            <summary>
            Gets the underlying ExportProvider object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.Document">
            <summary>
            Gets or sets the document for export.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.Preview">
            <summary>
            Gets or sets the value indicating whether the document should be opened after export.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.ShowOptions">
            <summary>
            Gets or sets the value indicating whether the options dialog should be displayed before export.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.Range">
            <summary>
            Gets or sets the range of pages that is to be exported.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.ReferenceGraphics">
            <summary>
            Specifies the Graphics object used in export, for example
            this object is used to convert EmfPlus metafiles to EmfOnly.
            If this property is null then the screen dc is used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClass">
            <summary>
            Gets or sets the type of form which will be used to edit the options of exporter.
            This form will be displayed if ShowOptions is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.DocumentInfoFormClass">
            <summary>
            Gets or sets the type of form which will be used to edit the fields of DocumentInfo class,
            this form is called from options form.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.Exporter.RangeFormClass">
            <summary>
            Gets or sets the type of form which will be used to edit the range of document to export,
            this form is called from options form.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.HtmlOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.HtmlOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.ImagesOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ImagesOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.ImagesOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Forms.ProgressForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.ProgressForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Forms.ProgressForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EmfOutlineHeader">
            <summary>
            Contains data describing an outline entry extracted from a metafile
            comment record created by C1Report or compatible (using the "%PDFHdr|" prefix).
            </summary>
        </member>
        <member name="M:C1.C1Preview.EmfOutlineHeader.#ctor(System.Int32,System.Int32,System.String,System.Drawing.RectangleF)">
            <summary>
            Creates a new instance of EmfOutlineHeader class.
            </summary>
            <param name="pageIdx">0-based page index.</param>
            <param name="level">Outline level.</param>
            <param name="text">Entry text.</param>
            <param name="rect">Entry rectangle.</param>
        </member>
        <member name="P:C1.C1Preview.EmfOutlineHeader.PageIdx">
            <summary>
            Gets or sets the 0-based page index.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EmfOutlineHeader.Level">
            <summary>
            Gets or sets the entry outline level.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EmfOutlineHeader.Text">
            <summary>
            Gets or sets the entry text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EmfOutlineHeader.Rectangle">
            <summary>
            Gets or sets the entry rectangle.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Localization.EndUserLocalizeOptionsAttribute">
            <summary>
            Allows to redefine default enduser localize options for
            property, field or class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Localization.EndUserLocalizeOptionsAttribute.Properties">
            <summary>
            Defines the list of properties that should be localized.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Localization.EndUserLocalizeOptionsAttribute.Exclude">
            <summary>
            If true then class, property or field will be not displayed for 
            enduser localization.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Localization.EndUserLocalizeOptionsAttribute.Description">
            <summary>
            Gets the description of string that will be displayed in the
            end user localizer in design-time.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the StringsManager and Strings classes to
            return the localized Attribute string.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Localization.StringsManager.GetParent(System.Globalization.CultureInfo)">
            <summary>
            Returns the parent of the CultureInfo passed in. Differs from ci.Parent
            in that while ci can be equal to ci.Parent, this method it never returns
            the passed ci itself, rather it would return null.
            </summary>
            <param name="ci">The culture info to get parent for.</param>
            <returns>The parent of the culture info, or null.</returns>
        </member>
        <member name="T:C1.C1Preview.PageActionBase">
            <summary>
            Represents an action that changes the page layout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionNewPage">
            <summary>
            Starts the new page if current page is not empty, otherwise only reresolves current page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionNewPageAlways">
            <summary>
            Starts the new page if current page is not empty, otherwise only reresolves current page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionSaveAndNewPage">
            <summary>
            Starts the new page if current page is not empty, otherwise only reresolves current page.
            The current page layout will be stored with specified _pageLayoutKey.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionRestorePageLayout">
            <summary>
            Restores the specified page layout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionRestorePageLayoutAndNewPage">
            <summary>
            Restores the specified page layout and starts new page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionNewColumn">
            <summary>
            Starts new column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionNewLine">
            <summary>
            Starts new line on inline flow.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActionChangePageLayout">
            <summary>
            Simple changes the current page layout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageActions">
            <summary>
            Collection of PageActionBase objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentPageLayouts">
            <summary>
            Describes the page layouts used in document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.Owner">
            <summary>
            Gets the C1PrintDocument object containing this DocumentPageLayouts object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.Item(C1.C1Preview.PageLayoutKindEnum)">
            <summary>
            Enumerates all page layouts by kind,
            can return null if page layout with specified kind does not exist.
            </summary>
            <param name="kind">Kind of page layout object.</param>
            <returns>The page layout object with specified kind.</returns>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.FirstPage">
            <summary>
            Gets or sets the layout for first page of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.LastPage">
            <summary>
            Gets or sets the layout for last page of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.EvenPages">
            <summary>
            Gets or sets the layout for even pages of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.OddPages">
            <summary>
            Gets or sets the layout for odd pages of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.Default">
            <summary>
            Gets or sets the default page layot of document.
            This page layout can be overriden in the
            FirstPage, EventPages, OddPages properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnFirstPage">
            <summary>
            Gets or sets a value indicating whether the page header should
            print on the first page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnFirstPage">
            <summary>
            Gets or sets a value indicating whether the page footer should
            print on the first page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnLastPage">
            <summary>
            Gets or sets a value indicating whether the page header should
            print on the last page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnLastPage">
            <summary>
            Gets or sets a value indicating whether the page footer should
            print on the last page of the document.
            This property overrides other related properties when set to false.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPageLayouts.SuppressEmptyLastPage">
            <summary>
            Gets or sets a value indicating whether to suppress adding an empty page
            at the end of the document if the last object in the document contains
            a page break after itself.
            The default value is false.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1PrintController">
            <summary>
            The .NET PreviewPrintController creates metafiles with gdi+ commands.
            This is bad for us because the format of such emf records is not
            documented, and so we can not e.g. search for text. But, if we just
            use .NET PrintController, the page generation process slows down by
            a factor of 2 (at least). The only way to avoid this is to inherit
            from PreviewPrintController but provide our own graphics, based on
            emf-only metafiles. Another caveat is which base methods to call and
            which not. Invoking base.OnStartPrint/base.OnEndPrint is necessary
            because if we do not do that performance is the same as with the
            regular PrintController (i.e. bad). OTOH, invoking base.OnStartPage/
            base.OnEndPage looks like wasting time (as we can not use the provided
            graphics anyway) and what is more, for big documents at some point
            seems to drain resources and causes our creation of metailes to fail.
            So what is below seems to be the only combination that works. Still,
            the whole printing stuff in .NET is a mess. --dima.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsStyleEnum.Acrobat">
            <summary>
            RenderInput objects look like in Acrobat reader.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsStyleEnum.InfoPath">
            <summary>
            RenderInput objects look like in MS InfoPath.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsStyleEnum.WinXp">
            <summary>
            RenderInput objects look like WinXP controls.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsStyleEnum.WinClassic">
            <summary>
            RenderInput objects look like standard windows controls.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1PrintDocument">
            <summary>
            ComponentOne Document.
            </summary>
            <summary>
            ComponentOne Document. Represents a document that can be previewed, printed or exported to an external format.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument.c_DocumentVersion">
            <summary>
            Increment this constant (minor version) every time when you change the
            serializable properties / objects of C1PrintDocument or nested objects.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument.c_AssemblyVersion">
            <summary>
            Holds the AssemblyVersion of C1.C1Preview.2.dll, used
            to get access to assembly version of this dll from "client" code.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._creationGraphicsShouldBeDisposed">
            <summary>
            Indicates that the CreationGraphics object should be disposed
            when new value assigned to CreationGraphics property.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.SetPropertiesToDefault">
            <summary>
            Resets all document's properties to default values.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnLongOperation(System.Double,System.Boolean)">
            <summary>
            Called to indicate the progress of document generating.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the generating can be cancelled.</param>
            <returns>Returns true if generation is *not* aborted.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.InitDocument">
            <summary>
            Performs some initializations: creates the sub-objects (PageHeader, PageFooter etc)
            initializes DefaultPageSettings and so on.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.GetFonts">
            <summary>
            Returns the array of fonts used in document.
            </summary>
            <returns>Returns the array of Font objects.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.GetUniqueFonts">
            <summary>
            Returns the <see cref="T:C1.C1Preview.C1PrintDocument.UniqueFonts"/> object with all fonts
            used in this document.
            </summary>
            <returns>The <see cref="T:C1.C1Preview.C1PrintDocument.UniqueFonts"/> object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Clear">
            <summary>
            Clears the document, all its properties will be set to default values
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String)">
            <summary>
            Creates a new instance of C1PrintDocument from the specified file.
            </summary>
            <param name="fileName">A string that contains the name of the file from which to create the C1PrintDocument.</param>
            <returns>The C1PrintDocument that was created.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream)">
            <summary>
            Creates a new instance of C1PrintDocument from the specified data stream.
            </summary>
            <param name="stream">A Stream that contains the data for the C1PrintDocument.</param>
            <returns>The C1PrintDocument that was created.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.SelectBestMeasurementDevice">
            <summary>
            Selects the optimal device which can be used for MeasurementGraphics,
            it search for printer with "square" dpi (DpiX == DpiY) large or equal than 300,
            if such printer does not exist then screen Graphics is used.
            Parameters of selected device can be read from MeasurementXXX properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.CreateGraphicsForDpi(System.Single)">
            <summary>
            Creates the Graphics object with specified dpi.
            </summary>
            <param name="dpi">The requested dpi.</param>
            <returns>Returns the created Graphics object or null, if it can't be created for specified dpi.</returns>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._currentPageLayout">
            <summary>
            The page layout of currently rendering page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._savedCurrentPageLayout">
            <summary>
            Contains the copy of _currentPageLayout (stored in RebuildCurrentPageLayot).
            It is used to detect when the _currentPageLayout was changed by the user
            during page generation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._userPageLayout">
            <summary>
            The page layout from the user (from PageConfigure event).
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._renderObjectPageLayout">
            <summary>
            The page layout currently defined by the render objects
            will be used for next page when it starts.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._renderObjectPageLayoutsStack">
            <summary>
            Stores the page layout before object rendering
            used to process the Nested page layouts.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._resetPageIndex">
            <summary>
            Contains the index of page on which the last change of page numbering occurs.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._curPageNo">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1PrintDocument._currentPage">
            <summary>
            Used in the AddPage(...) method to provide more expected value of CurrentPage property.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.ClearGeneratedInfo(System.Boolean,System.Boolean)">
            <summary>
            Clears all *generated* info of document:
            - list of pages
            - list of fragments
            - values of calculated properties
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.ClearTemporaryInfo">
            <summary>
            Clears the temporary info that was created and used during generating of report.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnFormsStyleChanged">
            <summary>
            Raises the FormsStyleChanged event.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageConfigure(C1.C1Preview.Page)">
            <summary>
            Called when a new empty page is created and added to the document.
            When this method is called the page is added to the Pages collection but *not resolved*, 
            use this method only for changing layout of page.
            </summary>
            <param name="page">Page object identifying the added page.</param>
            <returns>The PageLayout object created by the user.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageAdded(C1.C1Preview.Page)">
            <summary>
            Called only during generating of the document, 
            when generating of page of document is finished and switch to other page was occured.
            </summary>
            <param name="page">Page object identifying the finished page.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageUpdated(C1.C1Preview.Page)">
            <summary>
            Called when page of document is changed. 
            This method is called very often while document is generating,
            it is called each time when a fragment of object is 
            added to page or removed from page.
            </summary>
            <param name="page">Page object identifying the changed page.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageChanged(C1.C1Preview.Page)">
            <summary>
            Called only during generating of the document, when page
            of document which was added to document is changed, for example when
            page numbering is changed or PageCount property is updated for page.
            </summary>
            <param name="page">Page object identifying the updated page.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageDeleted(C1.C1Preview.Page)">
            <summary>
            Called when page is removed from document (from Pages collection).
            </summary>
            <param name="page">Page object identifying the deleted page.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPutFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Called every time when a RenderFragment is put on page,
            used for generate Progress event during document generating.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnReresolveRenderObject(C1.C1Preview.RenderObject)">
            <summary>
            Called every time when a RenderObject should be reresolved,
            used for generate Progress event during document generating.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.OnPageChangedInt(C1.C1Preview.Page)">
            <summary>
            Called by the Page object to notify document about the changes on page.
            </summary>
            <param name="page">Page which was changed.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.AddPage(System.Int32,System.Int32)">
            <summary>
            Creates new page and adds it to the Pages collection,
            after that resolve this page.
            </summary>
            <param name="pageX">The logical X coordinate of page in the pages matrix.</param>
            <param name="pageY">The logical Y coordinate of page in the pages matrix.</param>
            <returns>Returns the added page.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.CheckAllowNonReflowableDocs">
            <summary>
            Must be called during generating when the user's action causes an creation of non reflowable document.
            Raises exception if non reflowable documents are not allowed (AllowNonReflowableDocs is false).
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RebuildCurrentPageLayout">
            <summary>
            Build the _currentPageLayout.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RestoreRenderObjectPageLayout(System.Object)">
            <summary>
            Restore the _renderObjectPageLayout from _renderObjectPageLayoutsStack.
            The page layout will be removed from the stack after restore.
            </summary>
            <param name="pageLayoutKey">Specifies the key of pagelayout in _renderObjectPageLayoutsStack.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.MixWithRenderObjectPageLayout(C1.C1Preview.PageLayout,System.Object)">
            <summary>
            Mix the current _renderObjectPageLayout with 
            specified pageLayout.
            </summary>
            <param name="pageLayout">The PageLayout object that should be mixed with _renderObjectPageLayout.</param>
            <param name="pageLayoutKey">The key with which the previous value of _renderObjectPageLayout should be stored in the in the _renderObjectPageLayoutsStack.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
            <summary>
            Converts a value in the "ResolvedUnitType" units to another units of measurement.
            </summary>
            <param name="value">Value in the "ResolvedUnitType" units.</param>
            <param name="destType">Specifies the destination units.</param>
            <param name="destDpi">Specifies the DPI if destType is UnitTypeEnum.Pixel.</param>
            <returns>Returns the converted value.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,System.Single,System.Single,System.Boolean)">
            <summary>
            Converts rectangle in ResolvedUnitType to pixels.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
            <summary>
            Converts a value from specified units of measurement in the "ResolvedUnitType" units.
            </summary>
            <param name="value">The source value.</param>
            <param name="valueType">Specifies the source units.</param>
            <returns>Returns the converted value in "ResolvedUnitType" units.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Generate">
            <summary>
            Generates a document.
            </summary>
            <returns>Returns true if no warning occurs during generating.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Generate(C1.C1Preview.RefreshModeEnum)">
            <summary>
            Generates the document. The argument indicates the refresh mode.
            </summary>
            <param name="refreshMode">Indicates that information should be refreshed during generation.</param>
            <returns>Returns true if no warning occurs during generating.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout,C1.C1Preview.PageDirectionEnum)">
            <summary>
            Creates a new page and adds it to the document.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
            <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
            <param name="direction">Indicates which page must be added - vertical or horizontal.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout)">
            <summary>
            Creates a new page and adds it to the document.
            </summary>
            <param name="pageLayout">Specifies a layout which will be used for all following pages.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.NewPage">
            <summary>
            Creates a new page and adds it to the document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.NewColumn">
            <summary>
            Begins a new column. If the current column is the last on the page then a new page will be started.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.NewLine">
            <summary>
            Begins a new line in inline flow, can be used only if current stacking is inline flow.
            Note that AllowNonReflowableDocs property on the document must be set to true
            for this method to work; otherwise, an exception will occur.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.StartDoc">
            <summary>
            Starts a new document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.EndDoc">
            <summary>
            Finishes generation of a document.
            </summary>
            <returns>Returns true if no warning occurs during generating.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.CanRenderBlock">
            <summary>
            Indicates whether rendering in the block flow is permitted now.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.CanRenderDirect">
            <summary>
            Indicates whether direct rendering is permitted now.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.IsInlineStarted">
            <summary>
            Indicates whether the inline rendering started.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)">
            <summary>
            Adds render object to the document and resolves it.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
            <param name="ro">RenderObject object to process.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)">
            <summary>
            Addes render object to the document and resolves it in a specified position.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
            <param name="x">X coordinate of object, can't be auto.</param>
            <param name="y">Y coordinate of object, can't be auto.</param>
            <param name="ro">RenderObject object to render.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)">
            <summary>
            Addes render object to the document and resolves it in a specified position.
            This method can be used only if document is generated with
            using of the StartDoc() / EndDoc() methods.
            </summary>
            <param name="x">X coordinate of object, can't be auto.</param>
            <param name="y">Y coordinate of object, can't be auto.</param>
            <param name="ro">RenderObject object to render.</param>
            <param name="width">Width of object, if null then autowidth.</param>
            <param name="height">Height of object, if null then autoheight.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
            <summary>
            Renders the RTF text.
            </summary>
            <param name="rtf">Text to render, can be plain text.</param>
            <param name="width">If null then parent width will be used.</param>
            <param name="height">If null then autoheight will be used.</param>
            <param name="style">Style of object.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object)">
            <summary>
            Renders the RTF text with autoheight.
            </summary>
            <param name="rtf">Text to render, can be plain text.</param>
            <param name="width">If null then parent width will be used.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String)">
            <summary>
            Renders the RTF text with parent width and autoheight.
            </summary>
            <param name="rtf">Text to render, can be plain text.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
            <summary>
            Renders the Image.
            </summary>
            <param name="image">Image to render.</param>
            <param name="width">Width of an image box. If null then autowidth.</param>
            <param name="height">Height of an image box. If null then autoheight.</param>
            <param name="style">Style of the image. If null then the style for an image of document is used.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
            <summary>
            Renders the Image.
            </summary>
            <param name="image">Image to render.</param>
            <param name="width">Width of an image box. If null then autowidth.</param>
            <param name="height">Height of an image box. If null then autoheight.</param>
            <param name="imageAlign">Alignment of an image.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image)">
            <summary>
            Renders the Image.
            </summary>
            <param name="image">Image to render.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)">
            <summary>
            Begins the rendering of paragraph, you can omit this method and call
            RenderInlineTextXXX methods directly(), but this method allows to define
            the style of inline paragraph.
            If inline rendering already started the current paragraph will be closed
            and new will begin.
            </summary>
            <param name="style">Style of beginnig paragraph.</param>
            <param name="width">Width of an image box. If null then autowidth.</param>
            <param name="height">Height of an image box. If null then autoheight.</param>
            <returns>Returns true if no warnings occur during rendering the object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd">
            <summary>
            Finishes the inline rendering.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
            <summary>
            Renders a rich text in specified position.
            </summary>
            <param name="x">X coordinate of text area, can't be auto.</param>
            <param name="y">Y coordinate of text area, can't be auto.</param>
            <param name="rtf">Rich text to render.</param>
            <param name="width">Width of text area, can't be null or auto because the RenderRichText does not support autowidth.</param>
            <param name="height">Height of text area, if null then autoheight.</param>
            <param name="style">Style of rich text, can be null.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object)">
            <summary>
            Renders an rich text in specified position, the heigh of text will be calculated
            automatically.
            </summary>
            <param name="x">X coordinate of text area, can't be auto.</param>
            <param name="y">Y coordinate of text area, can't be auto.</param>
            <param name="rtf">Rich text to render.</param>
            <param name="width">Width of rich text, can't be null or auto because the RenderRichText does not support autowidth.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
            <summary>
            Renders an image in specified position.
            </summary>
            <param name="x">X coordinate of image, can't be auto.</param>
            <param name="y">Y coordinate of image, can't be auto.</param>
            <param name="image">Image to render.</param>
            <param name="width">Width of image, if null then autowidth.</param>
            <param name="height">Height of image, if null then autoheight.</param>
            <param name="style">Style of image, can be null.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
            <summary>
            Renders an image in specified position.
            </summary>
            <param name="x">X coordinate of image, can't be auto.</param>
            <param name="y">Y coordinate of image, can't be auto.</param>
            <param name="image">Image to render.</param>
            <param name="width">Width of image, if null then autowidth.</param>
            <param name="height">Height of image, if null then autoheight.</param>
            <param name="imageAlign">Alignment of an image.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image)">
            <summary>
            Renders an image in specified position.
            </summary>
            <param name="x">X coordinate of image, can't be auto.</param>
            <param name="y">Y coordinate of image, can't be auto.</param>
            <param name="image">Image to render.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
            <summary>
            Renders a text in specified position.
            </summary>
            <param name="x">X coordinate of text area, can't be auto.</param>
            <param name="y">Y coordinate of text area, can't be auto.</param>
            <param name="text">Text to render.</param>
            <param name="width">Width of text area, if null then autowidth.</param>
            <param name="height">Height of text area, if null then autoheight.</param>
            <param name="style">Style of text, can be null.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
            <summary>
            Renders a text in specified position.
            </summary>
            <param name="x">X coordinate of text area, can't be auto.</param>
            <param name="y">Y coordinate of text area, can't be auto.</param>
            <param name="text">Text to render.</param>
            <param name="width">Width of text area, if null then autowidth.</param>
            <param name="font">Font of text.</param>
            <param name="horzAlign">Horizontal alignment of text.</param>
            <param name="textColor">Color of text.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)">
            <summary>
            Imports a C1Report report definition into the current document.
            </summary>
            <param name="fileName">The name of the file containing the report definition.</param>
            <param name="reportName">The name of the report in the file.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
            <summary>
            Exports the document to a disk file.
            </summary>
            <param name="fileName">The output file name. The file extension determines the export format.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,System.Boolean)">
            <summary>
            Exports the document to a disk file.
            </summary>
            <param name="fileName">The output file name. The file extension determines the export format.</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String)">
            <summary>
            Exports the document to a disk file.
            </summary>
            <param name="fileName">The output file name. The file extension determines the export format.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
            <summary>
            Exports the document to a stream.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
            <summary>
            Exports the document to a stream.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
            <summary>
            Exports the document to a disk file.
            </summary>
            <param name="fileName">The output file name. The file extension determines the export format.</param>
            <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
            <summary>
            Exports the document to a stream.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="exportProvider">The export provider. Use any of the static export providers available on
            the C1.C1Preview.Export.ExportProviders class.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="defaultPageSettings">The default page settings to use.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="defaultPageSettings">The default page settings to use.</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
            <summary>
            Prints the document.
            </summary>
            <param name="printerSettings">The printer settings to use.</param>
            <param name="defaultPageSettings">The default page settings to use.</param>
            <param name="outputRange">The range of pages to export (use null to export all pages).</param>
            <param name="showProgress">Flag indicating whether to show the progress dialog.</param>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FindAnchor(System.String)">
            <summary>
            Searches the anchor in document.
            </summary>
            <param name="anchorName">The name of anchor to search.</param>
            <returns>Returns the C1AnchorInfo object about searched anchor or null if not found.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PrintDocument.FindInputFragment(System.Int32,System.Boolean)">
            <summary>
            Searches the first RenderInputFragment.
            </summary>
            <param name="startPageIndex">Index of the first page from which the search begins.</param>
            <param name="toLastPage">If true then the search goes from startPageIndex to last document's page.</param>
            <returns>Returns the searched RenderInputFragment object or null.</returns>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.MaxPages">
            <summary>
            Gets or sets the value limiting the maximum number of pages
            in the generated document.
            <para>
            The default value is -1, indicating that the number of pages
            in the document is unlimited.
            </para>
            <para>
            This property is only relevant when the document is
            created using the <see cref="M:C1.C1Preview.C1PrintDocument.Generate"/> method.
            </para>
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CreationMode">
            <summary>
            Gets the mode of document creation.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CreationDpi">
            <summary>
            Gets the dpi which is used during document creation.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CreationGraphics">
            <summary>
            Gets or sets the Graphics object used to generate the document.
            This graphics used to calculate text sizes, measuring RTF text etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.EmfType">
            <summary>
            Gets or sets the type of metafiles created by this document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentInfo">
            <summary>
            Gets or sets common info about document: author, caption, and so on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ResolvedUnit">
            <summary>
            Gets or sets the units of measurement in which bounds of objects' fragment will
            specified. This property can't be changed when document is in
            generating of its content.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.PageLayout">
            <summary>
            Gets or sets the page layout for the document, page layout includes:
            page settings (width, height, margins, and so on), page header, page footer and columns definition.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.PageLayouts">
            <summary>
            Gets the page layouts used in document.
            Each page layout includes: 
            page settings (width, height, margins, and so on), page header, page footer and columns definition.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Stacking">
            <summary>
            Gets or sets the stacking rules for the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DefaultUnit">
            <summary>
            Defines the default unit of measurement. When lengths are set without 
            specifying unit of measurement this unit is assumed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Body">
            <summary>
            Gets the object representing the page body.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Tags">
            <summary>
            Gets the collection of document's tags which are defined by user.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts">
            <summary>
            Gets the collection of embedded fonts.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts">
            <summary>
            Gets or sets the value indicating whether the EmbeddedFonts
            collection will be automatically filled during document generation
            with fonts used in the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ThrowExceptionOnError">
            <summary>
            Indicates that the exception must be raised when error occurs during generating,
            if this flag is false then Generate method will return false and exception
            not will be raised. This property is false by default.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AllowNonReflowableDocs">
            <summary>
            Gets or sets the value indicating whether methods can be called on the document
            that would result in the document becoming non-reflowable. If false (the default),
            invoking such methods causes an exception to be thrown.
            (If the document is non-reflowable, the document will not automatically reflow
            in the preview when the end user changes page settings.)
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ClipPage">
            <summary>
            Gets or sets the value indicating whether to clip the content to page margins.
            The default value is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DisableUserReflow">
            <summary>
            Gets or sets the value indicating whether the end user should be allowed
            to reflow the document with different page settings. This value is only a hint
            to the document viewer, it is the viewer's responsibility to respect that hint.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DoEvents">
            <summary>
            Specifies whether <see cref="T:C1.C1Preview.C1PrintDocument"/> should handle Windows messages while generating the document.
            </summary>
            <remarks>
            <para>Setting this property to true allows users to resize forms, click buttons, etc. while documents are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a
            "Cancel" button to stop the document generation (otherwise the user wouldn't be able to click the
            button until the generation was complete).</para>
            <para>Setting this property to false will cause documents to generate slightly faster.</para>
            </remarks>
            <example>
            <para>The code below implements "Generate" and "Cancel" buttons attached to a <see cref="T:C1.C1Preview.C1PrintDocument"/>.</para>
            <para>The "Generate" button checks whether the document is busy before starting to generate it.
            This is necessary because the user could click the "Generate" button several times in a row, before the document got a 
            chance to finish generating. (Calling the <see cref="M:C1.C1Preview.C1PrintDocument.Generate"/> method while the component is busy throws an 
            exception.)</para>
            <para>The "Cancel" button checks whether the document is currently generating, and sets the <see cref="P:C1.C1Preview.C1PrintDocument.Cancel"/> 
            property to true if it is.</para>
            <code>
            _doc.DoEvents = true;
            
            private void Generate_Click(object sender, EventArgs e)
            {
               if (_doc.BusyState != BusyStateEnum.Ready)
                   Console.WriteLine("Cannot generate now, document is busy");
               else 
                   _doc.Generate();
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_doc.BusyState != BusyStateEnum.Ready) 
                   _doc.Cancel = true;
               else 
                   Console.WriteLine("Document is not generating, nothing to cancel");
            }
            </code>
            </example>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Style">
            <summary>
            Main style of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Outlines">
            <summary>
            Gets the document's outlines.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Dictionary">
            <summary>
            Gets the document's dictionary.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionTab">
            <summary>
            Gets or sets the action to be performed when the TAB key is pressed 
            in C1PreviewPane control which is connected to this document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionEnter">
            <summary>
            Gets or sets the action to be performed when the ENTER key is pressed
            in C1PreviewPane control which is connected to this document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.FormsStyle">
            <summary>
            Gets or sets the look of RenderInputXXX objects in the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.UsePrinterForDefaultPageSettings">
            <summary>
            Gets or sets the value indicating whether the default page settings are
            retrieved from the default printer (may slow things down if the printer
            is a network one) or calculated based on the current locale.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentFormatVersion">
            <summary>
            Gets the version of C1D format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.FormatVersion">
            <summary>
            Gets the C1FormatVersion object describing the version
            of C1D format supported by this assembly.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDpi">
            <summary>
            Gets the DPI of MeasurementGraphics.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName">
            <summary>
            Gets or sets the printer name providing the Graphics which is used
            for measuring the layout of document.
            This property is used only
            when MeasurementDevice is MeasurementDeviceEnum.Printer.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDevice">
            <summary>
            Gets or sets the type of device providing the Graphics which is used
            for measuring the layout of document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics">
            <summary>
            Gets the Graphics object which is used 
            for measuring the layout of document.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.DefaultUnitChanged">
            <summary>
            Occurs when the value of the DefaultUnit was changed.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.ResolvedUnitChanged">
            <summary>
            Occurs when the value of the ResolvedUnit was changed.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.LongOperation">
            <summary>
            Indicate the progress of document generation.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.BusyStateChanged">
            <summary>
            Occurs when the value of the BusyState was changed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AdditionalObjects">
            <summary>
            Collection of additional objects used in document.
            For example if user change the PageHeader / PageFooter in the PageConfigure
            event then the new header / footer are added to this collection.
            This property is used in document serialization.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.PrinterPaperWidth">
            <summary>
            Gets the paper width of current printer (default printer or MeasurementPrinter).
            Filled in the Generate() or StartDoc() methods.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.PrinterPaperHeight">
            <summary>
            Gets the paper height of current printer (default printer or MeasurementPrinter).
            Filled in the Generate() or StartDoc() methods.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.GenerationStopped">
            <summary>
            Indicates that the current page is a max
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.SystemTags">
            <summary>
            Array of system document tags like [PageNo], [PageCount], etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.HasGenerateDocumentHandler">
            <summary>
            Gets the value indicating whether a handler is attached to the
            GenerateDocument event of the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageLayout">
            <summary>
            Gets the current page layout, this property available only during generating of document.
            If you change the members of CurrentPageLayout object within PageConfigure event
            they will be used immediate for added page, otherwise they
            will be used when new page is added.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AcceptButton">
            <summary>
            Gets the RenderInputButton object representing the 
            accept button in document (the first RenderInputButton object with AcceptButton == true).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics">
            <summary>
            Gets the current RenderGraphics object, which was opened with RenderBlockGraphicsBegin.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockGraphics">
            <summary>
            Gets the current Graphics object which was opened with RenderBlockGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics">
            <summary>
            Gets the current RenderGraphics object, which was opened with RenderDirectGraphicsBegin.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectGraphics">
            <summary>
            Gets the current Graphics object which was opened with RenderDirectGraphicsBegin method.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.IsGenerating">
            <summary>
            Indicates whether document is in generating of its content.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode">
            <summary>
            Indicates whether document is generating with using of the StartDoc() / EndDoc() methods.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Reflowable">
            <summary>
            Gets value indicating whether the document is reflowable.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Warnings">
            <summary>
            After document generation, contains the collection of warnings for the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ErrorCode">
            <summary>
            Obsolete. Now gets the Code of the first element in the Warnings collection,
            or GenerateErrorEnum.None if there are no warnings.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ErrorDesc">
            <summary>
            Obsolete. Now gets the description of the first element in the Warnings collection,
            or an empty string if there are no warnings.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.Pages">
            <summary>
            Gets the collection of document's pages.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DataSchema">
            <summary>
            Gets the C1DataSchema object owned by this C1PrintDocument
            object which contains the data schema built-in document.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:C1.C1Preview.C1PrintDocument.Cancel" -->
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentPage">
            <summary>
            Gets the current generating page, returns null if document in not generating state.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageArea">
            <summary>
            Gets the current generating area of page, returns null if document in not generating state.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowHeight">
            <summary>
            An amount of available vertical space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowWidth">
            <summary>
            An amount of available horizontal space in the block flow in the currently 
            generating page area, value specified in the ResolvedUnit units.
            Returns -1 if document in not generating state.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ScriptingOptions">
            <summary>
            Gets the ScriptingOptions object defining the scripting options of this C1PrintDocument object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions">
            <summary>
            Gets the CompatibilityOptions object which determines compatibility
            with the previous versions of C1PrintDocument.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentFileName">
            <summary>
            Gets the file name associated with the current document
            (i.e. the document was either loaded from that file, or
            saved to it).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentDirectoryName">
            <summary>
            Gets the directory of the <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFileName"/>.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript">
            <summary>
            Gets or sets the script that is executed when the current document starts generating.
            </summary>
            <remarks>
            <para>
            <see cref="T:C1.C1Preview.C1PrintDocument"/> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting"/> event at this time.
            </para>
            <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
            <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript">
            <summary>
            Gets or sets the script that is executed when the current document has finished generating.
            </summary>
            <remarks>
            <para>
            <see cref="T:C1.C1Preview.C1PrintDocument"/> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded"/> event at this time.
            </para>
            <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
            <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.PageConfigureScript">
            <summary>
            Gets or sets the script that is executed when a new page is added to the document.
            This script executes after the page has been added to the <see cref="P:C1.C1Preview.C1PrintDocument.Pages"/> collection
            but before it is resolved (i.e. when the content of the page has not been laid out yet).
            <para>
            This script should be used only to change the page layout. Do not use this script
            to change the page content, as it may cause errors. 
            </para>
            </summary>
            <remarks>
            <para>
            <see cref="T:C1.C1Preview.C1PrintDocument"/> also fires the <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure"/> event at this time.
            </para>
            <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
            <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.ErrorScript">
            <summary>
            Gets or sets the script that is executed when an error occurs in a script attached to the document.
            </summary>
            <remarks>
            <para>
            <see cref="T:C1.C1Preview.C1PrintDocument"/> also fires the <see cref="!:ScriptError"/> event at this time.
            </para>
            <para>
            The difference between events and scripts is that event handlers
            belong to the application code, while scripts belong to the document.
            Thus it is recommended that event handlers be used to perform tasks that
            implement the overall application logic but do not depend on the
            specific document being processed.
            </para>
            <para>
            On the other hand, scripts should be used to perform tasks directly related
            to the document itself. Scripts attached to a document are executed regardless
            of the current application (e.g. when the document is regenerated after 
            being loaded from file by a different program).
            (For example, a document might contain a script that changes the value
            of a field in that document when an error occurs.)
            </para>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1PrintDocument.AssemblyVersion">
            <summary>
            Gets the version of C1PrintDocument assembly.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.DocumentStarting">
            <summary>
            Occurs when the document building is started.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.DocumentEnded">
            <summary>
            Occurs when the document building is ended.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PageConfigure">
            <summary>
            Occurs when a new empty page is created and added to the document,
            the page is added to the Pages collection but *not resolved*, 
            use this method only for changing layout of page.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PageAdded">
            <summary>
            Occurs only during generating of the document, 
            when generating of page of document is finished, page is added to the Pages collection
            and switch to other page is occured.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PageUpdated">
            <summary>
            Occurs when page of document is changed. 
            This event occurs very often while document is generating,
            it is called each time when a fragment of object is 
            added to page or removed from page.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PageChanged">
            <summary>
            Occurs only during generating of the document, when page
            of document which was added to document is changed, for example when
            page numbering is changed or PageCount property is updated for page.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PageDeleted">
            <summary>
            Occurs when the page is removed from the document (from the Pages collection).
            This event cannot occur during document generation.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.PagesClear">
            <summary>
            Occurs when the Pages collection is cleared.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.GenerateDocument">
            <summary>
            Allows user to build document content in event handler.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.InputValueChanged">
            <summary>
            Occurs when the value of RenderInputBase object within document is changed.
            </summary>
        </member>
        <member name="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged">
            <summary>
            Occurs when the FormsStyle property value changes. 
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderEmpty">
            <summary>
            Represents RO that renders images.
            </summary>
            <summary>
            Empty render object with zero heigth and width, this object has no content.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageDirectionEnum">
            <summary>
            Describes the direction in which the new page should be started.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageDirectionEnum.Default">
            <summary>
            Type of page (vertical or horizontal)
            is determinated on the basis of the current stacking rules.
            Vertical page is added if Stacking is StackingRulesEnum.BlockTopToBottom.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageDirectionEnum.Vertical">
            <summary>
            Vertical page direction - i.e. logically the next page is below the current one.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageDirectionEnum.Horizontal">
            <summary>
            Horizontal page direction - i.e. logically the next page is to the right of the current one.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LayoutChangeBase">
            <summary>
            Represents the base class for actions which can be performed 
            before or after rendering an object.
            Actions like: start new page, column, change columns layout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LayoutChangeNewPage">
            <summary>
            Desribes the page break action.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LayoutChangeNewColumn">
            <summary>
            Describes the column break action.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LayoutChangeNewLine">
            <summary>
            Describes the line break action on inline flow.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LayoutChangeNoBreak">
            <summary>
            Describes the action that does no produce the page break, but changes
            the page layout for next page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IC1Printable">
            <summary>
            This interface should be implemented by a control
            to support its rendering through RenderC1Printable object
            in C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetImage">
            <summary>
            Gets the content of control as Image.
            </summary>
            <returns>The Image object representing a control content.</returns>
        </member>
        <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetTree">
            <summary>
            Gets the content of control as C1 document
            that is serialized in stream.
            This document can be built with using C1PrintDocumentClient.
            </summary>
            <returns>The stream object containing the document tree.</returns>
        </member>
        <member name="T:C1.C1Preview.Design.C1PageSettingsEditorControl">
            <summary>
            Represents the control which is used by the C1PageSettingsEditor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.C1PageSettingsEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.C1PageSettingsEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.C1PageSettingsEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.C1PageSettingsEditor">
            <summary>
            Represents the design-time editor of for edit the C1PageSettings object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.C1PageSettingsEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.C1PageSettingsEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.C1PageSettingsEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.PageLayoutEditorControl">
            <summary>
            Represents the control which is used by the PageLayoutEditor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Design.PageLayoutEditorControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Design.PageLayoutEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Design.PageLayoutEditorControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.PageLayoutEditor">
            <summary>
            Represents the design-time editor of for edit the PageLayout object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Design.UnitEditor">
            <summary>
            Implements the text editor for edit the Unit.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentPart">
            <summary>
            Represents the DocumentPart that renders the part of document:
            PageHeader, PageFooter, WaterMark, Overlay.
            The body of document is rendered by the DocumentBody object
            that is *not* descendant of the DocumentPart,
            because the DocumentPart is an internal class and invisible for
            user.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IRenderObjectContainer">
            <summary>
            This interface must be implemented by object which works as owner 
            for the RenderObject objects.
            </summary>
            <summary>
            This interface must be implemented by object which works as owner 
            for the RenderObject objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IDocumentPart">
            <summary>
            This interface is implemented by objects representing the part of document: Header, Footer or Body.
            </summary>
        </member>
        <member name="M:C1.C1Preview.IDocumentPart.GetChildAutoPos(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase@,System.Double@,System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the "auto" coordinates of object. These auto coordinates are
            calculated on the basis of stacking rules.
            </summary>
            <param name="rf">RenderFragment object for which auto coordinates must be calculated.</param>
            <param name="pageArea">Contains the PageAreaBase object on exit identifying the part of page.</param>
            <param name="x">X coordinate of object.</param>
            <param name="y">Y coordinate of object.</param>
            <param name="newPageAreaStarted">Contains true on exit if during calculating new page area was started.</param>
            <param name="curPageAreaWidthChanged">Contains true on exit if width of new page area is different from current.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.IDocumentPart.AcceptFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Places the object on page of the document, object will be cut on some pages if it will be necessary.
            </summary>
            <param name="rf">RenderFragment object to process.</param>
        </member>
        <member name="M:C1.C1Preview.IDocumentPart.DoPageActions(C1.C1Preview.PageActions,C1.C1Preview.PageAreaBase,C1.C1Preview.PageAreaBase@,System.Boolean@)">
            <summary>
            Executes the specified page actions, which begin new page, restore page layout etc.
            </summary>
            <param name="pageActions">Actions to execute.</param>
            <param name="curPageArea">Current page area, if null the current page area of main flow should be used.</param>
            <param name="pageArea">OUT: Contains new page area.</param>
        </member>
        <member name="M:C1.C1Preview.IDocumentPart.GetPagePart(C1.C1Preview.ResolvedPage)">
            <summary>
            Gets the PageArea object which describes the area on page corresponding this DocumentPart.
            For example: DocumentBody -> PageAreaBody.
            </summary>
            <param name="resolvedPage">ResolvedPage object describing whole page.</param>
        </member>
        <member name="M:C1.C1Preview.IDocumentPart.GetPageByPageNo(System.Int32)">
            <summary>
            Gets the ResolvedPage object for page with specified page number.
            </summary>
            <param name="pageNo">Number of page.</param>
        </member>
        <member name="P:C1.C1Preview.IDocumentPart.CurrentColumn">
            <summary>
            Gets the PageAreaBase object identifying the current column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.IDocumentPart.CurrentPage">
            <summary>
            Gets the ResolvedPage object indentifying the current page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.IDocumentPart.ResolvingStack">
            <summary>
            This stack is used during resolving to detect the cyclic references.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DocumentPart.GetPagePart(C1.C1Preview.Page)">
            <summary>
            Returns the PageArea object defining the area on page 
            occupied by this DocumentPart object.
            </summary>
            <param name="page">Page object area of that should be returned.</param>
        </member>
        <member name="P:C1.C1Preview.DocumentPart.Document">
            <summary>
            Gets the document containing this DocumentPart object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentPart.Content">
            <summary>
            Gets the underlaying RenderObject object, that represents the content of this document part.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentLayer.CurrentPage">
            <summary>
            Gets or sets the current page, used to resolve the 
            underlying render object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.ComplexExportProvider">
            <summary>
            Base class for all export provides working over list of pages, each page
            is represented as metafile.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)">
            <summary>
            Returns true if exporter supports export of specified object.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>Returns true if corresponding exporter can export the specified object.</returns>
        </member>
        <member name="T:C1.C1Preview.Export.ComplexExporter">
            <summary>
            Base class for all exporters working over list of pages.
            Derived classes must override ProcessPage method.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument">
            <summary>
            Gets or sets the value indicating whether the document
            should be saved in Office12 format.
            </summary>
            <value><b>true</b> if document should be exported in new Office12 format, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.Paginated">
            <summary>
            Gets or sets the value indicating whether the resulting document
            should preserve the pagination of the original document.
            </summary>
            <value><b>true</b> if page by page export, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.FixedPositioning">
            <summary>
            Gets or sets the value indicating whether the resulting document
            should match closely the exact appearance of the original document.
            This usually is done at the cost of preserving the original
            structure and/or the ease of handling of the resulting document.
            </summary>
            <value><b>true</b> if fixed positioning export, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.UnitType">
            <summary>
            Gets default unit type for export double values.
            </summary>
            <value>The default unit type.</value>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.PageCount">
            <summary>
            Gets or sets count of pages.
            </summary>
            <value>The count of pages.</value>
        </member>
        <member name="P:C1.C1Preview.Export.ComplexExporter.PageIndex">
            <summary>
            Gets or sets current page index for export.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.EmfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.EmfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.EmfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.PdfOptionsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.PdfOptionsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Export.PdfOptionsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.HtmlExportProvider">
            <summary>
            The HTML export provider.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportObject(System.Object)">
            <summary>
            Returns true if exporter supports export of specified object.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>Returns true if corresponding exporter can export the specified object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.HtmlExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.HtmlExporter">
            <summary>
            The HTML exporter.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.ImageFolder">
            <summary>
            Gets or sets the path to the image folder.
            </summary>
            <value>The folder name (path) for storage of images.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.GenerateOutline">
            <summary>
            Gets or sets generate or no contents on outline entries in frame.
            </summary>
            <value><b>true</b> if generate contents on outline entries in frame, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.PagePerFile">
            <summary>
            Gets or sets the value indicating whether to export each page
            of the document into a separate file.
            </summary>
            <value><b>true</b> if one file per page, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks">
            <summary>
            Gets or sets the value indicating whether to generate links to individual pages.
            </summary>
            <value><b>true</b> if generate contents on page links, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageSeparators">
            <summary>
            Gets or sets the value indicating whether to separate pages
            of the original document with horizontal lines.
            </summary>
            <value><b>true</b> if generate page separators, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.LinksLocation">
            <summary>
            Gets or sets the location of the generated links (outline entries
            or page numbers).
            </summary>
            <value>The links locations (where contents will be).</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.Scaling">
            <summary>
            Gets or sets the scaling coefficient applied to all elements
            of the resulting document, in percent
            </summary>
            <value>The scaling coefficient value in percents.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar">
            <summary>
            Gets or sets the template used to create the navigation bar with page numbers.
            </summary>
            <value>The template of navigation bar with page numbers.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.PreserveExactHeight">
            <summary>
            Gets or sets the value indicating whether the export module should
            try to preserve the exact original height of all elements.
            Generally, setting this property to false makes the resulting
            document more flexible.
            </summary>
            <value><b>true</b> if preserve exact height, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.MaxHorzPageLinks">
            <summary>
            Gets or sets the maximum number of page links in a row.
            </summary>
            <value>The maximum number of page links in a row.</value>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.UnitType">
            <summary>
            Gets default unit type for export double values.
            </summary>
            <value>The default unit type.</value>
        </member>
        <member name="M:C1.C1Preview.Export.HtmlExporter.HtmlField.#ctor(C1.C1Preview.RenderFragment)">
            <summary>The parent html data.</summary>
        </member>
        <member name="P:C1.C1Preview.Export.HtmlExporter.HtmlField.PageIndex">
            Gets page index for this field.
        </member>
        <member name="T:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum">
            <summary>
            Defines the links locations.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.None">
            <summary>
            Links are not generated.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopPage">
            <summary>
            Links are located at the top of the page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.LeftFrame">
            <summary>
            Links are located in the left frame.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.RightFrame">
            <summary>
            Links are located in the right frame.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopFrame">
            <summary>
            Links are located in the top frame.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.BottomFrame">
            <summary>
            Links are located in the bottom frame.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.HtmlExporter.LinksModeEnum">
            <summary>
            Defines the links mode.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.None">
            <summary>
            No links are generated.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.DocumentOutline">
            <summary>
            The generated links are based on the document outline.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.PageNumbers">
            <summary>
            The generated links point to individual pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Forms.DocumentInfoForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.DocumentInfoForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Forms.DocumentInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Forms.OutputRangeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.OutputRangeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.C1Preview.Forms.OutputRangeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTarget">
            <summary>
            Determines the target of the hyperlink. This is an abstract class, it cannot be used directly.
            </summary>
            <summary>
            Determines the target of the hyperlink. This is an abstract class, it cannot be used directly.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1LinkTarget.GetPageNoCaption(C1.C1Preview.Page,C1.C1Preview.C1PrintDocument)">
            <summary>
            Returns (as a string) the number of the page to which the current C1LinkTarget object points.
            This method may return null if the page number cannot be resolved at this time
            (e.g. if the document has not been generated).
            </summary>
            <param name="currentPage">The page containing this C1LinkTarget object.</param>
            <param name="document">The C1PrintDocument containing this C1LinkTarget object.</param>
            <returns>The page number, converted to a string.</returns>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetAnchor">
            <summary>
            Describes a link target inside the current document.
            </summary>
            <summary>
            Describes a link target inside the current document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetAnchor.AnchorName">
            <summary>
            The name of the C1Anchor object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetExternalAnchor">
            <summary>
            Jump to an anchor withtin an external C1Preview document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.DocumentFileName">
            <summary>
            Gets the name of file of external C1Preview document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetFile">
            <summary>
            Describes a link to an external document, file or URL.
            The link is performed using the ShellExecute() API.
            </summary>
            <summary>
            Describes a link to an external document, file or URL.
            The link is performed using the ShellExecute API.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetFile.FileName">
            <summary>
            Specifies the file or object on which to execute the specified verb.
            </summary>
            <remarks>
            To specify a Shell namespace object, pass the fully qualified parse name.
            Note that not all verbs are supported on all objects. 
            For example, not all document types support the "print" verb.
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetFile.Command">
            <summary>
            String, referred to in this case as a verb, 
            that specifies the action to be performed.
            </summary>
            <remarks>
            <para>The set of available verbs depends on the particular file or folder. 
            Generally, the actions available from an object's shortcut menu are 
            available verbs.</para>
            <para>For more information about verbs and their availability, see Object Verbs. 
            See Extending Shortcut Menus for further discussion of shortcut menus.</para>
            <para>The following verbs are commonly used.</para>
            <list type="table">
            <item><term>edit</term>
            Launches an editor and opens the document for editing. If FileName is not a document file, the function will fail.
            </item>
            <item><term>explore</term>
            <description>Explores the folder specified by FileName.</description>
            </item>
            <item><term>find</term>
            <description>Initiates a search starting from the specified directory.</description>
            </item>
            <item><term>open</term>
            <description>Opens the file specified by the FileName parameter.
            The file can be an executable file, a document file, or a folder.</description>
            </item>
            <item><term>print</term>
            <description>Prints the document file specified by FileName.
            If FileName is not a document file, the function will fail.</description>
            </item>
            <item><term>Empty string</term>
            <description>For systems prior to Microsoft? Windows? 2000, the default verb is used 
            if it is valid and available in the registry. If not, the "open" verb is used.
            For Windows 2000 and later systems, the default verb is used if available. 
            If not, the "open" verb is used. If neither verb is available, 
            the system uses the first verb listed in the registry.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetFile.Parameters">
            <summary>
            If the FileName parameter specifies an executable file, Parameters is a string 
            that specifies the parameters to be passed to the application. 
            The format of this string is determined by the verb that is to be invoked. 
            If FileName specifies a document file, Parameters should be an empty string.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetFile.Directory">
            <summary>
            String that specifies the default directory.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetPage">
            <summary>
            This class defines a link target to another page in a some document.
            </summary>
            <summary>
            This class defines a link target to another page in a some document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetPage.PageJumpType">
            <summary>
            Gets the type of jump between pages.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetPage.PageNo">
            <summary>
            Specifies the number of page to jump, depending on 
            PageJumpType it specifies the absolute or relative jump.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetDocumentLocation">
            <summary>
            This class defines a link target to object within document
            supporting the IDocumentLocation interface,
            currently this document is supported by the:
            RenderObject, Page.
            </summary>
            <summary>
            This class defines a link target to object within document
            supporting the IDocumentLocation interface,
            currently this document is supported by the:
            RenderObject, Page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetDocumentLocation.Location">
            <summary>
            This property has not null value only when
            C1LinkTargetDocumentLocation was created with FromMetafileTag method
            it contains the index of document's page and position 
            on page in millimeters.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1LinkTargetDocumentLocation.DocumentLocation">
            <summary>
            Gets the IDocumentLocation object
            identifying the place within document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1LinkTargetDocumentLocation.DocLocation.PageIndex">
            <summary>
            Index of document's page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1LinkTargetDocumentLocation.DocLocation.BoundsOnPage">
            <summary>
            Bounds of target rectangle on page in millimeters.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderTocItem">
            <summary>
            Represents the item of table of content.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderParagraph">
            <summary>
            Describes a paragraph render object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderTextBase">
            <summary>
            Base class for RenderText and RenderParagraph classes.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextBase.HasText">
            <summary>
            Returns true if object has a text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextBase.TextLength">
            <summary>
            Returns the length of text. Do not use this property to check exists
            text or not, use HasText instead.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextBase.TabPositions">
            <summary>
            Collection of tabs in text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextBase.HasTabPositions">
            <summary>
            Gets the value indicating whether the TabPositions collection is not empty.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.Style)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="style">The style to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="font">The font to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="font">The font to use for this RenderParagraph object.</param>
            <param name="textColor">The text color to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="font">The font to use for this RenderParagraph object.</param>
            <param name="textColor">The text color to use for this RenderParagraph object.</param>
            <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="font">The font to use for this RenderParagraph object.</param>
            <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.AlignHorzEnum)">
            <summary>
            Initializes a new instance of the RenderParagraph class.
            </summary>
            <param name="horzAlign">The horizontal alignment to use for this RenderParagraph object.</param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,C1.C1Preview.Style)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="style"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="textColor"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="textColor"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="font"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.C1PrintDocument,C1.C1Preview.AlignHorzEnum)">
            <summary>
            For internal use only.
            </summary>
            <param name="document"></param>
            <param name="horzAlign"></param>
        </member>
        <member name="M:C1.C1Preview.RenderParagraph.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assigns the properties of the current object from the specified RenderParagraph object.
            </summary>
            <param name="source">The object to copy the properties from.</param>
        </member>
        <member name="P:C1.C1Preview.RenderParagraph.Content">
            <summary>
            Gets the ParagraphObjectCollection representing the content of this RenderParagraph object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderParagraph.HasContent">
            <summary>
            Gets the value indicating whether the current RenderParagraph object has any content.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderParagraph.HasText">
            <summary>
            Overridden. Gets the value indicating whether the current RenderParagraph object has any content.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderParagraph.TextLength">
            <summary>
            Gets the length of text in paragraph each non text object has one char length.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTocItem.TextLength">
            <summary>
            Gets the length of text in paragraph each non text object has one char length.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTocItem.Level">
            <summary>
            Gets or sets the level of item in the TOC.
            Level defines the indent of item from the left edge of object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderToc.ShowPageNumbers">
            <summary>
            Gets or sets the value indicating whether the page numbers should
            be display in TOC.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderToc.PageNumbersAtRight">
            <summary>
            Gets or sets the value indicating whether the page numbers should be aligned
            to right edge of TOC.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderToc.FillChar">
            <summary>
            Gets or sets the char used to fill the empty space between
            title and page number.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderEmptyFragment">
            <summary>
            Represents a fragment of the RenderEmpty object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderC1Printable">
            <summary>
            Represents RO that renders the objects supporting the IC1Printable interface.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderC1Printable.GenerateInnerRenderObjects">
            <summary>
            Forces the generation of inner render object or objects representing the 
            object being printed (assigned to the Object property).
            The generated render objects can be accessed via the Children property.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderC1Printable.ResetInnerRenderObjects">
            <summary>
            Removes the inner render object or objects representing the object being printed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderC1Printable.Object">
            <summary>
            Object to render, it must supports the IC1Printable interface.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderC1Printable.IgnoreObjectPageLayout">
            <summary>
            Gets or sets the value indicating whether the page layout
            defined by the object should be ignored.
            This property is used only when the object returns
            its content as document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderC1PrintableFragment">
            <summary>
            Represents a fragment of the RenderC1Printable object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderTextFragmentBase">
            <summary>
            Base class for RenderTextFragment and RenderParagraphFragment.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)">
            <summary>
            Gets the area of char with specified index.
            </summary>
            <param name="charIndex">Index of first char of this text's fragment.</param>
            <returns>Returns the RectangleD structure describing the bounds of char relative to the content area of object (without spacing, borders, padding), may be RectangleD.Empty text is rotated use the GetCharPoints method in this case.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharPoints(System.Int32)">
            <summary>
            Gets the array of PointD which define the parallelogramm of char's area.
            </summary>
            <param name="charIndex">Index of first char of this text's fragment.</param>
            <returns>Returns the array of four PointD structures.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRects(System.Int32,System.Int32)">
            <summary>
            Gets an array of rectanges of char range, this function returns an array
            in which each line corresponds to one array's element, like:
                +------------------+
                | rect[0]          |
            +----------------------|
            | rect[1]              |
            | rect[2]              |
            +----------------------+
            | rect[3]       |
            +---------------+
            </summary>
            <param name="startCharIndex">Index of first character of this text's fragment.</param>
            <param name="length">Count of characters.</param>
            <returns>The array of Rectangle structures.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRegion(System.Int32,System.Int32)">
            <summary>
            Gets the region of char range.
            The region is relative to the top-left corner of inner area of fragment.
            </summary>
            <param name="startCharIndex">Index of first character of this text's fragment.</param>
            <param name="length">Count of characters.</param>
            <returns>The Region object defining the region of char range or null if char range is invalid.</returns>
        </member>
        <member name="P:C1.C1Preview.RenderTextFragmentBase.LastCharIndex">
            <summary>
            Index of first character *after* fragment.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextFragmentBase.IsNewParagraph">
            <summary>
            Indicates that the text within fragment finished with CR or LF char,
            i.e. the text in next fragment begins a new paragraph.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextFragmentBase.IsLinesVertical">
            <summary>
            Indicates that the lines of text go in vertical direction from top to bottom
            or from bottom to top.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTextFragmentBase.IsLinesVerticalCalculated">
            <summary>
            Indicates that the IsLinesVertical property was calculated
            used only for backward compatibility.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableTextBox.GetAutoSize(System.String,System.Drawing.Font)">
            <summary>
            Returns the optimal size of control on the base of specified visual properties.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageNo">
            <summary>
            Gets the number of current page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageCount">
            <summary>
            Gets the count of pages.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.ScriptLanguageEnum">
            <summary>
            Enumerates the languages which can be used in <see cref="T:C1.C1Preview.C1PrintDocument"/> scripts.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.VB">
            <summary>
            VB.NET will be used as the scripting language.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.C1Report">
            <summary>
            C1Report scripting language will be used.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Scripting.ScriptingOptions">
            <summary>
            Defines the scripting options of a C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Reset">
            <summary>
            Resets properties of this Scripting object to their default values.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Scripting.ScriptingOptions.AssignFrom(C1.C1Preview.Scripting.ScriptingOptions)">
            <summary>
            Copies properties from another Scripting object.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies">
            <summary>
            Gets the list of external assemblies that can be used in the scripts in the current document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces">
            <summary>
            Gets the list of namespaces that can be used in the scripts in the current document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Language">
            <summary>
            Gets or sets a value indicating which language is used in the scripts attached to the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TagBase.DependsOnPage">
            <summary>
            Indicates that the value of the tag depends on page number or page count etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TagBase.Name">
            <summary>
            Gets or sets the unique name of tag.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TagBase.Value">
            <summary>
            Gets or sets value of tag.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Tag">
            <summary>
            Represents the user-defined tag.
            </summary>
            <summary>
            Represents the user-defined tag.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ThreeStateEnum">
            <summary>
            Defines a value which can be in one of three states: undefined, true or false.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ThreeStateEnum.Undefined">
            <summary>
            The value is undefined.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ThreeStateEnum.True">
            <summary>
            The value is true.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ThreeStateEnum.False">
            <summary>
            The value is false.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableSizingModeEnum">
            <summary>
            Defines table sizing modes.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSizingModeEnum.Default">
            <summary>
            At table level, default is Auto for rows, and Fixed for columns;
            at row/column level, default inherits from the table.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSizingModeEnum.Fixed">
            <summary>
            Size (height for rows, width for columns) should be explicitly
            specified (if omitted, is determined by the available space
            and row/column count).
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSizingModeEnum.Auto">
            <summary>
            Size (height for rows, width for columns) is calculated
            automatically based on the content.
            </summary>
        </member>
        <member name="T:C1.C1Preview.CellSplitBehaviorEnum">
            <summary>
            Defines various options for the splitting of content of cells.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Split">
            <summary>
            The content of cell should be split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Copy">
            <summary>
            The content of cell should be copied each time when it splits.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Cut">
            <summary>
            The content of cell should be cut on first time and displayed only once.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageBreakBehaviorEnum">
            <summary>
            Defines various options for the insertion of page breaks.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageBreakBehaviorEnum.Default">
            <summary>
            A page break may be inserted if needed.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageBreakBehaviorEnum.MustBreak">
            <summary>
            A page break is always inserted.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageBreakBehaviorEnum.PreferredBreak">
            <summary>
            If a page break is needed it should be inserted here.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageBreakBehaviorEnum.NoBreak">
            <summary>
            A page break can not be inserted.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableVector">
            <summary>
            Base class for columns and rows of table.
            One TableVector object can be used in many tables.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVector.AssignFrom(C1.C1Preview.TableVector)">
            <summary>
            Copies properties of anoter TableVector object.
            Number property is not copied.
            </summary>
            <param name="source">The source object properties of which are copied.</param>
        </member>
        <member name="P:C1.C1Preview.TableVector.Owner">
            <summary>
            Gets the TableVectorCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Table">
            <summary>
            Gets the RenderTable object containing this vector.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Ordinal">
            <summary>
            Gets the index of vector, it is zero-based.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Number">
            <summary>
            Gets the index of vector, it is zero-based.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Size">
            <summary>
            Gets or sets the size of vector (width for column, height for row).
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.PageBreakBehavior">
            <summary>
            Gets or sets the value determining how page breaks are inserted before this column or row.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.CanSplit">
            <summary>
            Gets or sets the value indicating whether the vector (row or column) can split.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Visible">
            <summary>
            Controls the visibility of a table vector. Default value - true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.Style">
            <summary>
            Gets the style of vector.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVector.SizingMode">
            <summary>
            Gets or sets the value determining how the size of the current vector
            is calculated.
            </summary>
        </member>
        <member name="T:C1.C1Preview.StretchRowEnum">
            <summary>
            Defines the modes of stretching of row.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchRowEnum.Default">
            <summary>
            The stretching of row depends on RenderTable.StretchRows property.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchRowEnum.Yes">
            <summary>
            The row will be stretched.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchRowEnum.No">
            <summary>
            The stretching of row is disabled.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchRowEnum.IfLastOnPage">
            <summary>
            The row will be stretched if it is last on page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableRow">
            <summary>
            Represents row of table.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableRow.Owner">
            <summary>
            Gets the TableRowCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableRow.Height">
            <summary>
            Gets or sets the height of the current row.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableRow.Stretch">
            <summary>
            Gets or sets the stretching mode of the current row.
            </summary>
        </member>
        <member name="T:C1.C1Preview.StretchColumnEnum">
            <summary>
            Defines the modes of stretching of column.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchColumnEnum.Default">
            <summary>
            The stretchin of column depends on RenderTable.StretchColumns property.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchColumnEnum.Yes">
            <summary>
            The column will be stretched.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchColumnEnum.No">
            <summary>
            The stretching of column is disabled.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchColumnEnum.IfLastOnPage">
            <summary>
            The column will be stretched if it is last on page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableCol">
            <summary>
            Represents column of table.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCol.Owner">
            <summary>
            Gets the TableColCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCol.Width">
            <summary>
            Gets or sets the width of the current column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCol.Stretch">
            <summary>
            Gets or sets the stretching mode of the current column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableVectorCollection">
            <summary>
            Collection of TableVector objects.
            This is base class for collections of columns and rows.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.FastList">
            <summary>
            Represents the list which provides a fast search of elements in self.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.FastList.FindObjectIndex(System.Object,System.Int32@)">
            <summary>
            Searches for position of object, if object exists in list then index contains
            its position and function returns true, otherwise the function returns
            false and index contains the index of position for object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorCollection.GetMaxVectorOrdinal">
            <summary>
            Returns the vector with maximum ordinal or -1 if collection does not contains vectors.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts the vectors at specified position.
            </summary>
            <param name="position">Position to insert to.</param>
            <param name="count">Count of vectors to insert.</param>
        </member>
        <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes vectors at specified position.
            </summary>
            <param name="position">Index of first vector to delete from.</param>
            <param name="count">Count of vectors to delete.</param>
        </member>
        <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32)">
            <summary>
            Deletes vector at specified position.
            </summary>
            <param name="position">Index of vector to delete.</param>
        </member>
        <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32)">
            <summary>
            Inserts vector at specified position.
            </summary>
            <param name="position">Position to insert to.</param>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.Cells">
            <summary>
            Gets the owner's TableCellCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.UserGroups">
            <summary>
            Gets the owner's UserCellGroupCollection object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.Owner">
            <summary>
            Gets RenderTable object containing this collection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.Groups">
            <summary>
            Gets the TableVectorGroupCollection object corresponding this vectors collection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.Count">
            <summary>
            Gets or sets the "logical" count of vectors.
            If you set this property to -1 then count of vectors (columns or rows)
            will be calculated automatically.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorCollection.VectorCount">
            <summary>
            Gets the real count of vectors in collection
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableRowCollection">
            <summary>
            Collection of TableRow objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableRowCollection.FindRow(System.Int32)">
            <summary>
            Searches the row by its index.
            </summary>
            <param name="number">Index of row, zero based.</param>
            <returns>Returns the TableRow object or null.</returns>
        </member>
        <member name="P:C1.C1Preview.TableRowCollection.Item(System.Int32)">
            <summary>
            Gets the TableRow object by its index, if row with specified index is
            not found then new TableRow object will be created.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableColCollection">
            <summary>
            Collection of TableCol objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableColCollection.FindCol(System.Int32)">
            <summary>
            Searches the column by its index.
            </summary>
            <param name="number">Index of column, zero based.</param>
            <returns>Returns the TableCol object or null.</returns>
        </member>
        <member name="P:C1.C1Preview.TableColCollection.Item(System.Int32)">
            <summary>
            Gets the TableCol object by its index, if column with specified number is
            not found then new TableCol object will be created.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableCell">
            <summary>
            Represents cell of table.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableCell.AssignFrom(C1.C1Preview.TableCell)">
            <summary>
            Copies properties of anoter TableVector object.
            Row and Col properties are not copied.
            RenderObject property is copied *not as reference* - the new instance
            of RenderObject is created and assigned to this.RenderObject.
            </summary>
            <param name="source">The source object properties of which are copied.</param>
        </member>
        <member name="M:C1.C1Preview.TableCell.IsVisible">
            <summary>
            Determines is cell visible or not.
            Cell is visible if it has one visible row and one visible column at least.
            Column or row is visible if its Visible property is true.
            </summary>
            <returns>Returns true if cell is visible and false otherwise.</returns>
        </member>
        <member name="P:C1.C1Preview.TableCell.Tag">
            <summary>
            Gets or sets the custom, user-defined data associated with a cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Owner">
            <summary>
            Gets the TableCellCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Row">
            <summary>
            Gets the index of row of cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Col">
            <summary>
            Gets the index of column of cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.RowNo">
            <summary>
            Gets the index of row of cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.ColNo">
            <summary>
            Gets the index of column of cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.SpanCols">
            <summary>
            Count columns in cell span.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.SpanRows">
            <summary>
            Count rows in cell span.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.LastCol">
            <summary>
            Gets the number of last column in span, if SpanCols is 1 then LastColNo equals ColNo.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.LastRow">
            <summary>
            Gets the number of last row in span, if SpanRows is 1 then LastRowsNo equals RowNo.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.RenderObject">
            <summary>
            Gets or sets the RenderObject in cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Text">
            <summary>
            Gets or sets the text in cell if cell has not RenderText object then string.Empty returned.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Image">
            <summary>
            Gets or sets the image in cell if cell has not RenderImage object then null returned.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.Style">
            <summary>
            Gets the style of cell.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.RepeatGridLinesVert">
            <summary>
            Gets or sets the value indicating whether horizontal gridlines should
            be drawn when the cell is split.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCell.RepeatGridLinesHorz">
            <summary>
            Gets or sets the value indicating whether vertical gridlines should
            be drawn when the cell is split.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)">
            <summary>
            Searches a cell by row and column indexes.
            </summary>
            <param name="rowNo">Index or row, zero-based.</param>
            <param name="colNo">Index or column, zero-based.</param>
            <returns>Returns the found cell or null.</returns>
        </member>
        <member name="M:C1.C1Preview.TableCellCollection.GetRightBottomBounds">
            <summary>
            Gets the bounds of cells area.
            </summary>
            <returns>Size structure, field Width contains index of right-most column +1, field Height contains index of bottom-most row + 1.</returns>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.Count">
            <summary>
            Gets the count of objects in collection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32)">
            <summary>
            Gets the TableCell object by its index.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.MaxCol">
            <summary>
            Contains the number of right-most column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.MaxRow">
            <summary>
            Contains the number of bottom-most row.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.Owner">
            <summary>
            Gets the RenderTable object containing this cells' collection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the TableCell object by row and column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableHeaderEnum">
            <summary>
            Defines how the table header is repeated.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableHeaderEnum.None">
            <summary>
            The header is printed once at the top of the table.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableHeaderEnum.Page">
            <summary>
            The header is repeated at the top of each page. If there are multiple columns
            per page, the header is repeated only at the top of the first column on the page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableHeaderEnum.Column">
            <summary>
            The header is repeated only if there are multiple columns per page, at the top
            of each column except the first on the page. If there is only one column,
            the header is not printed at all.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableHeaderEnum.All">
            <summary>
            The header is repeated at the top of all pages. If there are multiple columns per page,
            the header is repeated at the top of each column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableFooterEnum">
            <summary>
            Defines how the table footer is repeated.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableFooterEnum.None">
            <summary>
            The footer is printed once at the end of the table.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableFooterEnum.Page">
            <summary>
            The footer is repeated at the bottom of each page. If there are multiple columns
            per page, the footer is repeated only at the bottom of the last column on the page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableFooterEnum.Column">
            <summary>
            The footer is repeated only if there are multiple columns per page, at the bottom
            of each column except the last on the page. If there is only one column,
            the footer is not printed at all.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableFooterEnum.All">
            <summary>
            The footer is repeated at the bottom of all pages. If there are multiple columns per page,
            the footer is repeated at the bottom of each column.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorGroup.GetActiveDataBinding">
            <summary>
            Gets the instance of C1DataBinding class that is used for this group
            typically this is a value of DataBinding property,
            but if DataBinding does not defined for group
            the parent data binding will be returned (or parent of parent etc).
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.Owner">
            <summary>
            Gets the TableVectorGroupCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.Table">
            <summary>
            Gets the RenderTable object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.Position">
            <summary>
            Gets the index of column or row from which groups begins.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.Count">
            <summary>
            Gets count of rows or columns in the group.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.LastPosition">
            <summary>
            Gets the number of column or row with which group ends.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.CanSplit">
            <summary>
            Indicates whether the group can be split between pages.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.PageHeader">
            <summary>
            Indicates whether the group should be reprinted as header on each page where table exists.
            Only one group in the table can has this flag.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.PageFooter">
            <summary>
            Indicates whether the group should be reprinted as footer on each page where table exists.
            Only one group in the table can has this flag.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.ColumnHeader">
            <summary>
            Indicates whether the group should be reprinted as header on each column where table exists.
            Only one group in the table can has this flag.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.ColumnFooter">
            <summary>
            Indicates whether the group should be reprinted as footer on each column where table exists.
            Only one group in the table can has this flag.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.Style">
            <summary>
            Gets the Style of group.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.StartNumber">
            <summary>
            Gets the index of column or row from which groups begins.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.LastNumber">
            <summary>
            Gets the number of column or row with which group ends.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.DataBinding">
            <summary>
            Gets the instance of C1DataBinding class representing the 
            data binding properties of this RenderObject object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.DataBindingDefined">
            <summary>
            Gets the value indicating that this TableVectorGroup is data bound
            via the DataBinding property.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroup.DataBindingMode">
            <summary>
            Gets the data binding mode.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorGroupCollection.GetBound">
            <summary>
            Gets the bound of grous area, the number of right-most or bottom-most
            group +1.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroup(System.Int32,System.Int32)">
            <summary>
            Searches the TableVectorGroup object with specified coordinates and returns its index,
            returns -1 if group with specified coordinates does not exist.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroupsAtPos(System.Int32)">
            <summary>
            Searches a groups containing this index of vector.
            Groups are sorted by the Count parameter.
            </summary>
            <param name="number">Index of vector.</param>
            <returns>Returns the list of searched groups.</returns>
        </member>
        <member name="M:C1.C1Preview.TableVectorGroupCollection.AddGroup(System.Int32,System.Int32)">
            <summary>
            Adds group to the collection, group will be added even if
            group with same position and count already exists.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroupCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the TableVectorGroup object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingDefined">
            <summary>
            Gets the value indicating whether some group of this collection is data bound.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingMode">
            <summary>
            Gets the data binding mode. For a collection of TableVectorGroup object
            this property returns:
            <list type="bullet">
            <item><b>None</b> no groups are data bound.</item>
            <item><b>Unsupported</b> at least one group is data bound to an unsupported data source.</item>
            <item><b>List</b> at least one group is data bound, and all data bound groups are bound to supported data sources.</item>
            </list>
            </summary>
        </member>
        <member name="T:C1.C1Preview.UserCellGroup">
            <summary>
            Represents the cells group defined by the user.
            Each cell group is defined by the collection of rectangles.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UserCellGroup.Owner">
            <summary>
            Gets the UserCellGroupCollection object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UserCellGroup.Table">
            <summary>
            Gets the RenderTable object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UserCellGroup.Style">
            <summary>
            Gets the style of group of cells.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UserCellGroup.Ranges">
            <summary>
            Gets the array of rectangles defining the cells in group.
            </summary>
        </member>
        <member name="T:C1.C1Preview.UserCellGroupCollection">
            <summary>
            Represents the collection of UserCellGroup objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.UserCellGroupCollection.GetRightBottomBounds">
            <summary>
            Gets the bounds of area of user groups.
            </summary>
            <returns>Size structure, field Width contains number of right-most column +1, field Height contains number of bottom-most row + 1.</returns>
        </member>
        <member name="P:C1.C1Preview.UserCellGroupCollection.Owner">
            <summary>
            Gets the RenderTable object containing this object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.StretchTableEnum">
            <summary>
            Defines the modes of stretching the columns of table.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchTableEnum.None">
            <summary>
            Columns or rows of table do no stretch.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchTableEnum.AllVectors">
            <summary>
            All columns or rows of table are stretched to fill the whole page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchTableEnum.AllColumns">
            <summary>
            All columns of table are stretched to fill the whole page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchTableEnum.LastVectorOnPage">
            <summary>
            Only last column or row on each page is stretched to fill the whole page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StretchTableEnum.LastColumnOnPage">
            <summary>
            Only last column on each page is stretched to fill the whole page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderTable">
            <summary>
            Represents RenderObject that renders tables.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
            <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
            <param name="assignChildren">Indicates that the list of children should be copied.</param>
            <param name="assignElements">Indicates that the Rows, Cols, Cells, RowGroups, ColGroups, UserCellGroups properties should be copied.</param>
        </member>
        <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies properties of another object.
            The list of fragments is not copied and not changed (Fragments property).
            Properties UserData, PageNumberingChange are copied by references.
            The Name property is not copied.
            </summary>
            <param name="source">The source object, properties of which are copied.</param>
            <param name="assignDataBinding">Indicates that the DataBinding property should be copied.</param>
            <param name="assignChildren">Indicates that the list of children should be copied.</param>
        </member>
        <member name="P:C1.C1Preview.RenderTable.RowSizingMode">
            <summary>
            Gets or sets the value determining how the heights of table rows are
            calculated. Default is Auto.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.ColumnSizingMode">
            <summary>
            Gets or sets the value determining how the widths of table columns are
            calculated. Default is Fixed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.Rows">
            <summary>
            Gets the collection of table's rows.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.Cols">
            <summary>
            Gets the collection of table's columns.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.RowGroups">
            <summary>
            Gets the TableVectorGroupCollection object representing the groups of rows.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.ColGroups">
            <summary>
            Gets the TableVectorGroupCollection object representing the groups of columns.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.Cells">
            <summary>
            Gets the collection of cells.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.UserCellGroups">
            <summary>
            Gets the collection of groups of cells defined by the user.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.Stretch">
            <summary>
            Gets or sets the mode of stretching of table columns.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.StretchColumns">
            <summary>
            Gets or sets the column stretching mode.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.StretchRows">
            <summary>
            Gets or sets the row stretching mode.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.VertPageHeaderOnFirstPage">
            <summary>
            Gets or sets the value indicating whether the vertical
            page header should be printed on the first page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.HorzPageHeaderOnFirstPage">
            <summary>
            Gets or sets the value indicating whether the horizontal
            page header should be printed on the first page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.VertPageFooterOnLastPage">
            <summary>
            Gets or sets the value indicating whether the vertical
            page footer should be printed on the first page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.HorzPageFooterOnLastPage">
            <summary>
            Gets or sets the value indicating whether the horizontal
            page footer should be printed on the first page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesVert">
            <summary>
            Gets or sets the value indicating whether vertical gridlines should
            be drawn when cells are split.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesHorz">
            <summary>
            Gets or sets the value indicating whether horizontal gridlines should
            be drawn when cells are split.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TabPosition">
            <summary>
            Represents the tab in paragraph of text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TabPosition.Position">
            <summary>
            Gets or sets the position of text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TabPosition.Alignment">
            <summary>
            Gets or sets the alignment of text at this tab.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TabPosition.FillChar">
            <summary>
            Gets or sets the char used to fill the tab space.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TabPositionCollection">
            <summary>
            Collection of the TabPosition objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderText.Text">
            <summary>
            Text to render.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ShapeProps">
            <summary>
            Describes the geometric properties of the shape,
            this is a base class.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderShapeBase">
            <summary>
            Base class for ROs that renders shapes.
            </summary>
            <summary>
            Base class for ROs that renders shapes.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LinePropsBase">
            <summary>
            Base class for properties of the RenderLine and RenderPolygon objects.
            </summary>
            <summary>
            Base class for properties of the RenderLine and RenderPolygon objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderLineBase">
            <summary>
            Represents the base class for all line-like shapes
            (RenderLine, RenderPolygon etc).
            </summary>
            <summary>
            Represents the base class for all line-like shapes
            (RenderLine, RenderPolygon etc).
            </summary>
        </member>
        <member name="T:C1.C1Preview.LineProps">
            <summary>
            Represents the geometric properties of the RenderLine object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderLine">
            <summary>
            Represents render object that renders a line.
            </summary>
            <summary>
            Represents render object that renders a line.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PolygonProps">
            <summary>
            Represents the geometric properties of the RenderPolygon object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PolygonProps.Points">
            <summary>
            Points defining a polyline.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PolygonProps.Closed">
            <summary>
            Indicates whether a polyline is closed or opened.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderPolygon">
            <summary>
            Represents RO that renders polygon, if Closed is true then
            polygon will be filled.
            </summary>
            <summary>
            Represents RO that renders polygon, if Closed is true then
            polygon will be filled.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RectangleProps">
            <summary>
            The base class of properties of all rectangle-based shapes like
            rectangle, ellipse, arc, pie.
            </summary>
            <summary>
            The base class of properties of all rectangle-based shapes like
            rectangle, ellipse, arc, pie.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderRectangle">
            <summary>
            Represents RO that renders a rectangle.
            </summary>
            <summary>
            Represents RO that renders a rectangle.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderEllipse">
            <summary>
            Represents RO that renders ellipse.
            </summary>
            <summary>
            Represents RO that renders ellipse.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EllipsePartProps">
            <summary>
            Represents the properties of shape which is a part of ellipse - arc or pie.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EllipsePartProps.StartAngle">
            <summary>
            Angle measured in degrees clockwise from the x-axis to the first side of the pie shape. 
            </summary>
        </member>
        <member name="P:C1.C1Preview.EllipsePartProps.SweepAngle">
            <summary>
            Angle measured in degrees clockwise from the startAngle parameter to the second side of the pie shape.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderPie">
            <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
            <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderArc">
            <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
            <summary>
            Represents RO that renders ellipse-based wedge.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RoundRectangleProps">
            <summary>
            Represents properties of the RenderRoundRectanlge object.
            </summary>
            <summary>
            Represents properties of the RenderRoundRectanlge object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderRoundRectangle">
            <summary>
            Represents RO that renders a rounded rectangle.
            </summary>
            <summary>
            Represents RO that renders a rounded rectangle.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderRichText">
            <summary>
            Represents RO that renders RTF text.
            </summary>
            <summary>
            Represents RO that renders RTF text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderRichText.HasRtf">
            <summary>
            Returns true if object has a RTF text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderRichText.Rtf">
            <summary>
            Rtf formatted text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderRichText.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the RenderRichText 
            will automatically format a Uniform Resource Locator (URL) 
            when it is found into the assigned Rtf text.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ParagraphObject">
            <summary>
            Represents a part of a RenderParagraph object - text, hyperlink or inline image.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphObject.#ctor">
            <summary>
            Initializes a new instance of the ParagraphObject class.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphObject.AssignFrom(C1.C1Preview.ParagraphObject)">
            <summary>
            Assigns the properties of the current object from the specified ParagraphObject.
            </summary>
            <param name="source">The object to copy the properties from.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphObject.Clone">
            <summary>
            Clones the current ParagraphObject.
            </summary>
            <returns>The newly created object.</returns>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.Hyperlink">
            <summary>
            Gets or sets the hyperlink associated with this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.Style">
            <summary>
            Gets the style associated with this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.Owner">
            <summary>
            Gets the ParagraphObjectCollection representing the content of the paragraph
            containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.RenderParagraph">
            <summary>
            Gets the RenderParagraph containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.Document">
            <summary>
            Gets the C1PrintDocument containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.IndexInOwner">
            <summary>
            Gets the index of this object in the ParagraphObjectCollection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.PositionInText">
            <summary>
            Gets the position of this ParagraphObject in the text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.TextLength">
            <summary>
            Gets the length of this ParagraphObject in chars.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.FirstFragment">
            <summary>
            Gets the first fragment of RenderParagraph object where this ParagraphObject exists.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObject.LastFragment">
            <summary>
            Gets the last fragment of RenderParagraph object where this ParagraphObject exists.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ParagraphText">
            <summary>
            Represents a text which is a part of a RenderParagraph.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.Style)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="style">The style to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="font">The font to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="textColor">The text color to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.TextPositionEnum)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="textPosition">The text position to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="font">The font to use for this ParagraphText object.</param>
            <param name="textColor">The text color to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="font">The font to use for this ParagraphText object.</param>
            <param name="textPosition">The text position to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="textColor">The text color to use for this ParagraphText object.</param>
            <param name="textPosition">The text position to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
            <summary>
            Initializes a new instance of the ParagraphText class.
            </summary>
            <param name="text">The text of this ParagraphText object.</param>
            <param name="font">The font to use for this ParagraphText object.</param>
            <param name="textColor">The text color to use for this ParagraphText object.</param>
            <param name="textPosition">The text position to use for this ParagraphText object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.GetLength">
            <summary>
            Overridden. Returns the length of this ParagraphText object.
            </summary>
            <returns>The text length.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphText.AssignFrom(C1.C1Preview.ParagraphObject)">
            <summary>
            Assigns the properties of the current object from the specified ParagraphText object.
            </summary>
            <param name="source">The object to copy the properties from.</param>
        </member>
        <member name="P:C1.C1Preview.ParagraphText.Text">
            <summary>
            Gets or sets the text represented by this ParagraphText.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ParagraphImage">
            <summary>
            Represents an inline image which is a part of a RenderParagraph.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.IC1TextObjectItem">
            <summary>
            Represents the object within C1Text: Image, table, and so on.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.IC1TextObjectItem.GetSize(System.Single,System.Single)">
            <summary>
            Gets the sizes of object in pixels.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.#ctor">
            <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
            <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
            <param name="image">The image of this ParagraphImage object.</param>
            <param name="style">The style to use for this ParagraphImage object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
            <param name="image">The image of this ParagraphImage object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParagraphImage class. 
            </summary>
            <param name="imageName">The dictionary name of the image of this ParagraphImage object.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.GetLength">
            <summary>
            Overridden. Returns the length of this ParagraphImage object.
            </summary>
            <returns>Always returns 1.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphImage.AssignFrom(C1.C1Preview.ParagraphObject)">
            <summary>
            Assigns the properties of the current object from the specified ParagraphImage object.
            </summary>
            <param name="source">The object to copy the properties from.</param>
        </member>
        <member name="P:C1.C1Preview.ParagraphImage.Image">
            <summary>
            Gets or sets the image represented by this ParagraphImage object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphImage.ImageName">
            <summary>
            Gets or sets the dictionary name of the image represented by this ParagraphImage object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphImage.C1#C1Preview#IDictionaryItemLinkOwner#Dictionary">
            <summary>
            Gets the dictionary associated with this ParagraphImage object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ParagraphObjectCollection">
            <summary>
            Represents a collection of ParagraphObject objects,
            which comprise the content of a RenderParagraph objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.Add(C1.C1Preview.ParagraphObject)">
            <summary>
            Adds ParagraphObject to this collection.
            </summary>
            <param name="po">The ParagraphObject to add.</param>
            <returns>The index of the newly added object in the collection.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.Remove(C1.C1Preview.ParagraphObject)">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="po">The object to remove.</param>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.Style)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="style">The style to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.TextPositionEnum)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
            <summary>
            Adds the specified text string to the current paragraph.
            </summary>
            <param name="text">The string to add.</param>
            <param name="font">The font to use to render the string.</param>
            <param name="textColor">The text color to use to render the string.</param>
            <param name="textPosition">The text position to use to render the string.</param>
            <returns>The ParagraphText object created to represent the specified text string.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String,C1.C1Preview.Style)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
            <param name="style">The style to use to render this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="target">The target of this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget,C1.C1Preview.Style)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="target">The target of this hyperlink.</param>
            <param name="style">The style to use to render this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.RenderObject)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="renderObject">The RenderObject which is the target of this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.ParagraphObject)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="text">The string representing the hyperlink.</param>
            <param name="paragraphObject">The ParagraphObject which is the target of this hyperlink.</param>
            <returns>The ParagraphText object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,System.String)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="image">The image representing the hyperlink.</param>
            <param name="anchorName">The name of the anchor which is the target of this hyperlink.</param>
            <returns>The ParagraphImage object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.C1LinkTarget)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="image">The image representing the hyperlink.</param>
            <param name="target">The target of this hyperlink.</param>
            <param name="style">The style to use to render this hyperlink.</param>
            <returns>The ParagraphImage object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.RenderObject)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="image">The image representing the hyperlink.</param>
            <param name="renderObject">The RenderObject which is the target of this hyperlink.</param>
            <returns>The ParagraphImage object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.ParagraphObject)">
            <summary>
            Adds a hyperlink to the current paragraph.
            </summary>
            <param name="image">The image representing the hyperlink.</param>
            <param name="paragraphObject">The ParagraphObject which is the target of this hyperlink.</param>
            <returns>The ParagraphImage object created to represent the hyperlink.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image)">
            <summary>
            Adds an inline image to the current paragraph.
            </summary>
            <param name="image">The image to add to the paragraph.</param>
            <returns>The ParagraphImage object created to represent the image.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.String)">
            <summary>
            Adds an inline image to the current paragraph.
            </summary>
            <param name="imageName">The dictionary name of the image to add to the paragraph.</param>
            <returns>The ParagraphImage object created to represent the image.</returns>
        </member>
        <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image,C1.C1Preview.Style)">
            <summary>
            Adds an inline image to the current paragraph.
            </summary>
            <param name="image">The image to add to the paragraph.</param>
            <param name="style">The style to use to render the image.</param>
            <returns>The ParagraphImage object created to represent the image.</returns>
        </member>
        <member name="P:C1.C1Preview.ParagraphObjectCollection.RenderParagraph">
            <summary>
            Gets the RenderParagraph object containing this ParagraphObject.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ParagraphObjectCollection.Item(System.Int32)">
            <summary>
            Indicates the ParagraphObject at the specified indexed location in the collection.
            </summary>
            <param name="index">The index of the ParagraphObject to retrieve from the collection.</param>
            <returns>The ParagraphObject located at the specified index location within the collection.</returns>
        </member>
        <member name="T:C1.C1Preview.RenderInputText">
            <summary>
            Input render object providing text input.
            </summary>
            <summary>
            Input render object providing text input.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputBase">
            <summary>
            The base class for all C1Preview Forms' input render objects 
            (which represent controls on C1Preview forms). Provides the basic functionality 
            for all input controls: position, size, visual style, user actions, input options.
            Adds input-specific features to the display features provided by the base 
            class (position, size, visual style, and so on).
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderInputBase.GetAutoSize(System.Int32@,System.Int32@)">
            <summary>
            Returns the preffered size of control in pixels.
            </summary>
            <param name="width">OUT: Width of control.</param>
            <param name="height">OUT: Height of control.</param>
        </member>
        <member name="M:C1.C1Preview.RenderInputBase.IsControlNeededParentForWmPrint">
            <summary>
            This method returns true if underlaying control of RenderInputBase
            object needs the parent to correctly process the WM_PRINT message.
            By default the RenderInputBase object returns true.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderInputBase.IsResetSelectionNeeded">
            <summary>
            Returns true if selection within parent control
            should be reset when the underlying control receives 
            an input focus.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderInputBase.CreateControl">
            <summary>
            Creates the underlying windows control object.
            </summary>
            <returns>Returns the created window control object.</returns>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.ReadOnly">
            <summary>
            Gets or sets the value indicating whether the control is read-only. 
            For read-only controls, all input actions are still fired, but the control's 
            value cannot be changed. The default is false.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.Printable">
            <summary>
            Gets or sets the value indicating whether the control is printed. 
            If true (default), the content of the control is printed normally. 
            Otherwise, it is not printed or exported. This might be used for example 
            to provide help for fields that are to be filled.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.StatusText">
            <summary>
            Gets or sets the text that appears in the status line of the preview when 
            the control has focus.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.ToolTip">
            <summary>
            Gets or sets the tooltip associated with the control.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.Cursor">
            <summary>
            Gets or sets the cursor used when the mouse is over the control.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputBase.InputActions">
            <summary>
            Gets the collection of supported user actions and handlers associated with those actions.
            See help on InputActions class for details.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputText.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputText.PasswordChar">
            <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is '\0' (no hiding takes place).
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputText.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputRadioButton">
            <summary>
            Input render object providing a radio button.
            </summary>
            <summary>
            Input render object providing a radio button.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputButtonBase">
            <summary>
            The abstract base class for the input info classes for all button-like controls 
            (RenderInputButton, RenderInputCheckBox, etc.)
            </summary>
            <summary>
            The abstract base class for the input info classes for all button-like controls 
            (RenderInputButton, RenderInputCheckBox, etc.)
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputButtonBase.Text">
            <summary>
            Gets or sets the text of the button.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputButtonBase.TextAlign">
            <summary>
            Gets or sets the alignment of the button text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputRadioButton.Checked">
            <summary>
            Gets or sets the value indicating whether the check box is checked. 
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputRadioButton.CheckAlign">
            <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputRadioButton.GroupIndex">
            <summary>
            Gets or sets the group index for the radiobutton. 
            Only one button in a group can be checked at any time.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputComboBoxItem">
            <summary>
            Represents the separate item in the combobox collection.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderInputComboBoxItem.AssignFrom(C1.C1Preview.RenderInputComboBoxItem)">
            <summary>
            Copies the content of another RenderInputComboBoxItem object into the current object.
            </summary>
            <param name="source">The source object, whose properties are to be copied into this object.</param>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBoxItem.Text">
            <summary>
            Gets or sets a text that will be displayed in the dropdown list.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBoxItem.UserData">
            <summary>
            Gets or sets a user's data.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputComboBoxItemCollection">
            <summary>
            Represents the collection of RenderInputComboBoxItem objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputComboBox">
            <summary>
            Input render object providing text input with dropdown list.
            </summary>
            <summary>
            Input render object providing text input with dropdown list.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBox.PasswordChar">
            <summary>
            Gets or sets the char used to hide real characters when entering passwords. 
            The default value of this property is '\0' (no hiding takes place).
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBox.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the combo box.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBox.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputComboBox.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether pressing ENTER in a multiline TextBox control 
            creates a new line of text in the control or activates the default button for the form.
            Default is true.
            </summary>
        </member>
        <member name="T:C1.C1Preview.CheckMarkStyleEnum">
            <summary>
            Describes the type of mark which is used in the ScalableCheckBox
            and RenderInputCheckBoxOptions.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CheckMarkStyleEnum.Default">
            <summary>
            The default style, as in Windows.
            </summary>
        </member>
        <member name="F:C1.C1Preview.CheckMarkStyleEnum.Cross">
            <summary>
            Cross, as in MS Word.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputCheckBox">
            <summary>
            Input render object providing a checkbox.
            </summary>
            <summary>
            Input render object providing a checkbox.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputCheckBox.Checked">
            <summary>
            Gets or sets the value indicating whether the check box is checked. 
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputCheckBox.CheckMarkStyle">
            <summary>
            Gets or sets the visual style of the check mark used by the control.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputCheckBox.CheckAlign">
            <summary>
            Gets or sets the horizontal and vertical alignment of the check box on the control.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputButton">
            <summary>
            Input render object providing a push button.
            </summary>
            <summary>
            Input render object providing a push button.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderInputButton.AcceptButton">
            <summary>
            Gets or sets the value indicating whether the button is an "Accept button" and its
            action will be executed when the user presses ENTER in the C1PrintPreview control
            showing the document containing this button.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentActionEnum">
            <summary>
            Defines the actions which can be used in
            ActionHandlerPreviewAction object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.None">
            <summary>
            No associated action.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.FileOpen">
            <summary>
            Open a C1PrintDocument file (.c1d).
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.FileSave">
            <summary>
            Save the current document as a C1PrintDocument file (.c1d).
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.PageSetup">
            <summary>
            Change the current page setup.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.Print">
            <summary>
            Print the current document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.Reflow">
            <summary>
            Reflow the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.PageSingle">
            <summary>
            View one page at a time.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.PageContinuous">
            <summary>
            View continuous pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.PageFacing">
            <summary>
            View facing pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.PageFacingContinuous">
            <summary>
            View continuous facing pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.GoFirst">
            <summary>
            Go to the first document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.GoPrev">
            <summary>
            Go to the previous document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.GoNext">
            <summary>
            Go to the next document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.GoLast">
            <summary>
            Go to the last document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.HistoryNext">
            <summary>
            Go to the next position in the history.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentActionEnum.HistoryPrev">
            <summary>
            Go to the previous position in the history.
            </summary>
        </member>
        <member name="T:C1.C1Preview.UserActionEnum">
            <summary>
            Identifies a single end-user input action which can be handled by a 
            C1Preview form control.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.Click">
            <summary>
            The control is clicked.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.MouseUp">
            <summary>
            The mouse pointer is over the control and a mouse button is released.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.MouseDown">
            <summary>
            The mouse pointer is over the control and a mouse button is pressed.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.MouseEnter">
            <summary>
            The mouse pointer enters the control.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.MouseLeave">
            <summary>
            The mouse pointer leaves the control.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.Enter">
            <summary>
            The input focus enters the control.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UserActionEnum.Leave">
            <summary>
            The input focus leaves the control.
            </summary>
        </member>
        <member name="T:C1.C1Preview.FormsKeyActionTabEnum">
            <summary>
            Describes the actions to be performed when the TAB key is pressed 
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPage">
            <summary>
            Focus moves to the next control on the page,
            but does not leave the preview nor goes to another page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDoc">
            <summary>
            Focus moves to the next control in the document (including across pages).
            Focus does not leave the preview.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageCycle">
            <summary>
            Focus moves to the next control on the page.
            When the last control is reached focus goes to the first control on the page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocCycle">
            <summary>
            Focus moves to the next control in the document.
            When the last control is reached focus goes to the first control in the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageOut">
            <summary>
            Focus moves to the next control on the page.
            When the last control is reached focus goes to the next
            control on the form containing the preview.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocOut">
            <summary>
            Focus moves to the next control in the document.
            When the last control is reached focus goes to the next
            control on the form containing the preview.
            </summary>
        </member>
        <member name="T:C1.C1Preview.FormsKeyActionEnterEnum">
            <summary>
            Describes the actions to be performed when the ENTER key is pressed
            in C1PrintPreview control which is connected to the doc engine.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.None">
            <summary>
            No action is taken.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.LikeTab">
            <summary>
            The same action as that of the TAB key is taken.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.InvokeAcceptButton">
            <summary>
            The Accept button is invoked.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerBase">
            <summary>
            Describes an action that can be performed in response to a user action in a
            C1Preview form. This is an abstract base class for the specific action 
            handlers.
            </summary>
            <summary>
            Describes an action that can be performed in response to a user action in a
            C1Preview form. This is an abstract base class for the specific action 
            handlers.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerLink">
            <summary>
            Describes an action handler that executes a hyperlink jump.
            </summary>
            <remarks>
            <para>All link types which are supported by the C1Preview hyperlinks are
            also supported by this action handler:</para>
            <list type="bullet">
            <item><description>Jump to an anchor in the existing document.</description></item>
            <item><description>Jump to an anchor in another document.</description></item>
            <item><description>Open an external program or file.</description></item>
            <item><description>Jump to another page of the same document.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.ActionHandlerLink.LinkTarget">
            <summary>
            Gets or sets the link target. See C1LinkTarget for details.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerFile">
            <summary>
            The base class for action handlers performing an file operation:
            save, open etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ActionHandlerFile.FileName">
            <summary>
            The name of file used in operation
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerFileSave">
            <summary>
            Describes the action handler that performs the saving of the
            document to file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerFileOpen">
            <summary>
            Describes the action handler that performs the loading of the
            document from file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerPageSetup">
            <summary>
            Describes the action handler that displays the page setup
            dialog to change the page properties of document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerPrint">
            <summary>
            Describes the action handler that prints the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ActionHandlerPrint.PrinterName">
            <summary>
            The name of printer, if empty the dialog will be displayed
            to select a printer.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerReflow">
            <summary>
            Describes the action handler that reflows the document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerPageView">
            <summary>
            Describes the action handler that changes the view of document
            in the preview window.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerHistoryPrev">
            <summary>
            Describes the action handler that goes to previous history entry.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ActionHandlerHistoryNext">
            <summary>
            Describes the action handler that goes to next history entry.
            </summary>
        </member>
        <member name="T:C1.C1Preview.InputAction">
            <summary>
            Describes a single input action, and any handling associated with it.
            </summary>
        </member>
        <member name="M:C1.C1Preview.InputAction.AssignFrom(C1.C1Preview.InputAction)">
            <summary>
            Copies the content of another InputAction object into the current object.
            </summary>
            <param name="source">The source object, whose properties are to be copied into this object.</param>
        </member>
        <member name="P:C1.C1Preview.InputAction.UserAction">
            <summary>
            Gets or sets the user action associated with this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.InputAction.ActionHandler">
            <summary>
            Gets or sets the object describing the handling associated with the action.
            </summary>
        </member>
        <member name="T:C1.C1Preview.InputActionCollection">
            <summary>
            Represents the collection of InputAction objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderImage">
            <summary>
            Represents RO that renders images.
            </summary>
            <summary>
            Represents RO that renders images.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderImage.Image">
            <summary>
            Defines an image to render.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderImage.ImageName">
            <summary>
            Gets or sets the name of image in document's dictionary.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderImage.Control">
            <summary>
            Control to render.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderGraphics">
            <summary>
            Represents RO that render images.
            </summary>
            <summary>
            Represents RO that render images.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderGraphics.Clear">
            <summary>
            Clears the current graphics.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderGraphics.EmfType">
            <summary>
            Gets or sets the type of metafile created by this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderGraphics.Graphics">
            <summary>
            Graphics object to draw on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderGraphics.ReferenceGraphics">
            <summary>
            Gets the reference graphics used to create an underlying metafiles.
            This property is shortcut to the Document.CreationGraphics property
            and can return null if this RenderGraphics object is not connected to the
            document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the image into stream, if image is a metafile then it will be saved
            *AS METAFILE* (the standard Metafile.Save method saves metafile in PNG format).
            </summary>
            <param name="image">Image to save.</param>
            <param name="imageFormat">Format in which image must be saved, if image is Metafile then this parameter ignored.</param>
            <returns>Returns the MemoryStream object containing image data or null if error occurs during saving.</returns>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.IsColorEmpty(System.Drawing.Color)">
            <summary>
            Returns true if specified color is Empty (Color.Empty) or Transparent (Color.Transparent).
            </summary>
            <param name="color">Color structure to test.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetScreenDpi(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Returns the logical and physical screen's resolution.
            </summary>
            <param name="logicalDpiX">Contains a logical horizontal resolution on exit.</param>
            <param name="logicalDpiY">Contains a logical vertical resolution on exit.</param>
            <param name="physicalDpiX">Contains a physical horizontal resolution on exit.</param>
            <param name="physicalDpiY">Contains a physical vertical resolution on exit.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.AlignDir(System.Single,System.Single,C1.C1Preview.GraphicsUtils.ImageAlignBaseEnum,System.Boolean,System.Single@,System.Int32@)">
            <summary>
            Internal, used from DrawImage only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetChildHwnds(System.IntPtr)">
            <summary>
            Returns a list of child window handles of a window with a specified handle.
            Indexes are increased from most foreground window to most background.
            </summary>
            <param name="parentHwnd"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetClientRectOfWindow(System.IntPtr)">
            <summary>
            Returns a rectangle occupied by window's client area relative to
            top left corner of the window.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetClientRectOfControl(System.Windows.Forms.Control)">
            <summary>
            Returns a rectangle occupied by control's client area relative to
            top left corner of the control.
            </summary>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.PrepareControlWmPrint(System.Windows.Forms.Control,System.Boolean@,System.Boolean@)">
            <summary>
            Auxiliary method that prepares .Net Control before sending him
            WM_PRINT message. It's turn off DoubleBuffer and AllPaintingInWmPaint
            flags of ControlStyle, which are causes an exception when process this
            method.
            Method returns two parameters that must be passed later to the 
            UnPrepareControlWmPrint methos which gets back control to its
            original state.
            </summary>
            <param name="ctrl"></param>
            <param name="isDoubleBuffer"></param>
            <param name="isAllPaintingInWmPaint"></param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.UnPrepareControlWmPrint(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Returns control processed by the PrepareControlWmPrint method to
            its original state.
            </summary>
            <param name="ctrl"></param>
            <param name="isDoubleBuffer"></param>
            <param name="isAllPaintingInWmPaint"></param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.ToLogFont(System.Drawing.Font,System.Drawing.Graphics,C1.Util.Win.Win32.LOGFONT)">
            <summary>
            Is some cases the Font.ToLogFont method fails (exception is thrown)
            this function is a workaround for this bug.
            </summary>
            <param name="font">Font object for which LOGFONT structure must be filled.</param>
            <param name="graphics">Graphics object dpi of which is used.</param>
            <param name="logFont">LOGFONT structure which must be filled with font's data.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetWindowImage(System.Windows.Forms.Control,System.IntPtr,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a screen image of a specified control or window.
            </summary>
            <param name="control">Control whose image to return. If this parameter is not null then hWnd parameter is ignored.</param>
            <param name="hWnd">Handle of a window whose image to return. It's used only if control parameter is null, otherwise is ignored. If this parameter is used then clientAreaOnly must be false, otherwise an exception will be raised.</param>
            <param name="clientAreaOnly">Indicates whether all control surface or client area only must be drawn.</param>
            <param name="includeControls">Specifies whether to include .NET Control children.</param>
            <param name="includeWindows">Specifies whether to include non-.NET child windows.</param>
            <returns>The Bitmap object with control's image.</returns>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiX(System.IntPtr)">
            <summary>
            Returns the horizontal resolution of specified device context.
            </summary>
            <param name="dc">Handle of device context.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiY(System.IntPtr)">
            <summary>
            Returns the vertical resolution of specified device context.
            </summary>
            <param name="dc">Handle of device context.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileInfo(System.Drawing.Imaging.Metafile,C1.C1Preview.MetafileInfo@)">
            <summary>
            Gets the information about metafile.
            </summary>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,C1.C1Preview.IImageAlign,C1.C1Preview.IMetafilePainter,System.Boolean)">
            <summary>
            Draws the specified Image object.
            </summary>
            <param name="graphics">Graphics object.</param>
            <param name="image">Image to draw.</param>
            <param name="alignRect">Alignment rectangle.</param>
            <param name="align">Alignment of image, if null then ImageAlign.Default will be used.</param>
            <param name="metafilePainter">Used if image is a metafile, can be null.</param>
            <param name="clip">Indicates that the alignRect must be used as clipping rectangle, otherwise clipping not will be defined.</param>
        </member>
        <member name="M:C1.C1Preview.GraphicsUtils.ConvertToEmf(System.Drawing.Imaging.Metafile,System.Drawing.Graphics)">
            <summary>
            Converts the metafile from EmfPlusOnly or EmfPlusDual to EmfOnly
            </summary>
            <param name="metafile">Metafile to convert</param>
            <param name="referenceGraphics">Graphics object used in converting, can be null in this case the screen dc is used.</param>
            <returns>Returns the converted EmfOnly metafile.</returns>
        </member>
        <member name="T:C1.C1Preview.Utils">
            <summary>
            Contains common functions.
            </summary>
            <summary>
            Contains common functions.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Utils.FloatFormatInfo">
            <summary>
            The special NumberFormatInfo object used to convert numbers
            in C1PrintDocument, its fields are initialized as:
            NumberDecimalSeparator is "."
            CurrencyDecimalSeparator is "."
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.IndexInArray(System.String[],System.String)">
            <summary>
            Returns the index of string in array of strings.
            Search is case sensitive.
            </summary>
            <param name="a">Array of strings.</param>
            <param name="s">String to search.</param>
            <returns>Index of string in array of -1.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.TryParseInt(System.String,System.Int32@)">
            <summary>
            Converts the string representation of a number to its 32-bit 
            signed integer equivalent. 
            A return value indicates whether the operation succeeded. 
            This functions uses FloatFormatInfo as format provider.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">When this method returns, contains the 32-bit signed integer value equivalent to the number contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null, is not of the correct format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.TryParseDouble(System.String,System.Double@)">
            <summary>
            Converts the string representation of a number to its double-precision 
            floating-point number equivalent. 
            A return value indicates whether the conversion succeeded or failed.
            This functions uses FloatFormatInfo as format provider.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="result">When this method returns, contains a double-precision floating-point number equivalent to the numeric value or symbol contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null, is not in a format compliant with style, represents a number less than MinValue or greater than MaxValue, or if style is not a valid combination of NumberStyles enumerated constants. This parameter is passed uninitialized.</param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ColorArrayToString(System.Drawing.Color[])">
            <summary>
            Converts the array of colors to string.
            </summary>
            <param name="a">Array to convert.</param>
            <returns>Returns the string representing a color array.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ColorArrayFromString(System.String)">
            <summary>
            Converts a string to array of colors.
            </summary>
            <param name="s">String to process.</param>
            <returns>Array of colors or null if s is null.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.FloatArrayToString(System.Single[],System.Char)">
            <summary>
            Converts the array of floats to string.
            </summary>
            <param name="a">Array to convert.</param>
            <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
            <returns>Returns the string representing a float array.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.FloatArrayFromString(System.String,System.Char)">
            <summary>
            Converts a string to array of floats.
            </summary>
            <param name="s">String to process.</param>
            <param name="delimiter">Specifies the delimiter between numbers in string (should not be a [.]).</param>
            <returns>Array of floats or null if s is null.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.IsArraysEqual(System.Single[],System.Single[])">
            <summary>
            Compares two array of floats.
            </summary>
            <param name="a1">First array of float values.</param>
            <param name="a2">Second array of float values.</param>
            <returns>Returns true if arrays equals.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ColorToString(System.Drawing.Color)">
            <summary>
            Converts color to string, use this method instead of Color.Name.
            </summary>
            <param name="color">Color structure to convert.</param>
            <returns>The string representing a color.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ColorFromString(System.String)">
            <summary>
            Converts string to color, use this method instead of Color.FromName(),
            because the Color.FromName() works incorrectly sometimes.
            </summary>
            <param name="s">String to convert.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ConvertUnits(System.Double,C1.C1Preview.UnitTypeEnum,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
            <summary>
            Converts the value from one measurement's units to other.
            </summary>
            <param name="from">Source measurement's units.</param>
            <param name="to">Destination measurement's units.</param>
            <param name="value">Value to convert.</param>
            <param name="dpi">DPI, used when from or to parameters equal UnitTypeEnum.Pixel.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.Utils.IsUrlString(System.String)">
            <summary>
            Returns true if passed string is an URL.
            </summary>
            <param name="s">String to test.</param>
            <returns>Returns true if string represents an URL.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.IsObjectIsMetafileList(System.Object)">
            <summary>
            Obsolete. Do not use.
            </summary>
            <param name="obj">Object to test.</param>
            <returns>Returns true if object is list of metafiles.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.ObjectIsMetafileList(System.Object,System.Boolean)">
            <summary>
            Tests whether the object is a collection of metafiles.
            </summary>
            <param name="obj">The object to test.</param>
            <param name="strict">True to test all items in the collection
            (may be slow in case of large documents), false to test just the first item.</param>
            <returns>Returns true if object is list of metafiles.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.UnitTypeEnumToGraphicsUnit(C1.C1Preview.UnitTypeEnum)">
            <summary>
            Converts value of UnitTypeEnum type to GraphicsUnit.
            If conversion cannot be made exception will be thrown.
            </summary>
            <param name="units">Source units</param>
            <returns>Returns value of GraphicsUnit type.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.GraphicsUnitToUnitTypeEnum(System.Drawing.GraphicsUnit)">
            <summary>
            Converts value of GraphicsUnit type to UnitTypeEnum.
            If conversion cannot be made exception will be thrown.
            </summary>
            <param name="units">Source units</param>
            <returns>Returns value of UnitTypeEnum type.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.Round(System.Single)">
            <summary>
            Returns the number nearest the specified value.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.Round(System.Double)">
            <summary>
            Returns the number nearest the specified value.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.SortList(System.Collections.ArrayList,System.Collections.IComparer)">
            <summary>
            Sorts the list, as against the "ArrayList.Sort" this function do not exchange the
            identical elements.
            </summary>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:C1.C1Preview.Utils.GetCSCode(System.Drawing.Rectangle@,System.Drawing.Point@)">
            <summary>
            Internal, used only from IsSegmentIntersectRect.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.IsPolygonIntersectsRect(System.Drawing.Rectangle@,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Checks is polygon intersects with rectangle or not.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <returns>Returns true if polygon intersects with rectangle.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.IsSegmentIntersectRect(System.Drawing.Rectangle@,System.Drawing.Point@,System.Drawing.Point@)">
            <summary>
            Checks is segment intersects with rectangle or not.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns>Returns true if segment intersects with rectangle.</returns>
        </member>
        <member name="M:C1.C1Preview.Utils.Bracket(System.String)">
            <summary>
            Original: C1.Win.C1Report.Util.Misc.Bracket
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.BracketEqual(System.String,System.String)">
            <summary>
            Original: C1.Win.C1Report.Util.Misc.BracketEqual
            </summary>
        </member>
        <member name="M:C1.C1Preview.Utils.CompareObjects(System.Object,System.Object)">
            <summary>
            Returns -1 if v1 less than v2, 0 if equal, 1 if biggest than v2
            </summary>
        </member>
        <member name="T:C1.C1Preview.Utils.FC">
            <summary>
            Implements the static methods for comparing the float and double numbers
            with specified precision.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ReferenceEnum">
            <summary>
            Describes the types of references between objects.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Parent">
            <summary>
            Reference to the parent object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Next">
            <summary>
            Reference to the next object on the same level.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Prev">
            <summary>
            Reference to the previous object on the same level.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Self">
            <summary>
            Reference to the current object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Name">
            <summary>
            Reference to the object by its name.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Page">
            <summary>
            Reference to the page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Column">
            <summary>
            Reference to the column on page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReferenceEnum.Id">
            <summary>
            Reference to the object by its Id.
            This type of refernce used only for backward compatibility.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DimensionEnum">
            <summary>
            Describes the possible dimensions of object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Default">
            <summary>
            The default dimension.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Left">
            <summary>
            The left side of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Top">
            <summary>
            The top side of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Right">
            <summary>
            The right side of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Bottom">
            <summary>
            The bottom side of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Width">
            <summary>
            The width of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DimensionEnum.Height">
            <summary>
            The height of an object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.UnitTypeEnum">
            <summary>
            Specifies the unit of measure for the given data.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Mm">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Pica">
            <summary>
            Specifies the pica unit (1/6 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Pixel">
            <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Twip">
            <summary>
            Specifies a twip (1/1440 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.InHs">
            <summary>
            Specifies a hundredths of an inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Display">
            <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Cm">
            <summary>
            Specifies centimetre's as the unit of measure.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Em">
            <summary>
            Measurement is relative to the height of the element's font. 
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.Ex">
            <summary>
            Measurement is relative to the height of the lowercase letter x of the element's font.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnitTypeEnum.LineSpacing">
            <summary>
            Measurement is relative to the spacing between two lines of element's font.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthAuto">
            <summary>
            Represents the "auto" size or coordinate, only one instance of this class can be created.
            Use property LengthBase.Auto to access to this instance.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthAbs">
            <summary>
            Represents the dimension like: "5mm", "10in", "20", and so on.
            </summary>
        </member>
        <member name="M:C1.C1Preview.LengthAbs.Compare(C1.C1Preview.LengthAbs,C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
            <summary>
            Compares the current LengthAbs object with another LengthAbs object.
            </summary>
            <param name="other">The other LengthAbs object to compare the current one with.</param>
            <returns>0 if lengths are equal,
            -1 if this length is less than the other,
            1 if this length is greater than the other,
            -2 if the length units cannot be compared.</returns>
        </member>
        <member name="P:C1.C1Preview.LengthAbs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthAbs.Units">
            <summary>
            Gets the unit of measure of value.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthAbs.Predefined.Empty">
            <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(0, UnitTypeEnum.Mm)) representing an empty dimension.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthAbs.Predefined.LineWidth">
            <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(1f, UnitTypeEnum.Point))
            representing an default width of line (border, grid etc).
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth">
            <summary>
            Gets instance of the LengthAbs class 
            (defined as new LengthAbs(2f, UnitTypeEnum.Point))
            representing an default width of bold line (border, grid etc).
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthRef">
            <summary>
            Represents the unit which references to dimension of another object like: 
            "MyObject.Right", "Parent.Width", "Prev.Width" or MyObject.MySubObject.Width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Elements">
            <summary>
            Array of references used in the LengthRef, for example dimension "parent.MyChild.width"
            will be represented by two UnitRefElem objects for "parent" and "MyChild".
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Dimension">
            <summary>
            Dimension of referenced object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthRef.UnitRefElem">
            <summary>
            Describes one object in reference.
            </summary>
        </member>
        <member name="F:C1.C1Preview.LengthRef.UnitRefElem.Source">
            <summary>
            Specifies the referenced object (page, column, other object).
            </summary>
        </member>
        <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceName">
            <summary>
            Specifies the name of object if Source = RefSource.Name
            </summary>
        </member>
        <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceNo">
            <summary>
            Specifies the number, used if Source = RefSource.Page or RefSource.Column
            </summary>
        </member>
        <member name="T:C1.C1Preview.LengthRef.Predefined">
            <summary>
            Holds some predefined LengthRef objects.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentLeft">
            <summary>
            Represents "Parent.Left" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentTop">
            <summary>
            Represents "Parent.Top" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentWidth">
            <summary>
            Represents "Parent.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentHeight">
            <summary>
            Represents "Parent.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.PrevRight">
            <summary>
            Represents "Prev.Right" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.PrevBottom">
            <summary>
            Represents "Prev.Bottom" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.PrevHeight">
            <summary>
            Represents "Prev.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.NextHeight">
            <summary>
            Represents "Next.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.Parent">
            <summary>
            Represents "Parent.Default" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.Self">
            <summary>
            Represents "Self.Default" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentRight">
            <summary>
            Represents "Parent.Right" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.ParentBottom">
            <summary>
            Represents "Parent.Bottom" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.SelfWidth">
            <summary>
            Represents "Self.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.SelfHeight">
            <summary>
            Represents "Self.Height" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.PageWidth">
            <summary>
            Represents the "Page.Width" reference.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LengthRef.Predefined.PageHeight">
            <summary>
            Represents the "Page.Height" reference.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Unit">
            <summary>
            Auxiliary class, provides access to LengthBase object as string,
            number or directly LengthBase object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.IsAuto">
            <summary>
            Gets the value indicating whether this Unit is specified as "auto".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.IsAbs">
            <summary>
            Gets the value indicating whether this Unit defines
            an absolute value such as "1mm", "1em" etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.IsParentWidth">
            <summary>
            Gets the value indicating whether this Unit is specified as "parent.width".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.IsParentHeight">
            <summary>
            Gets the value indicating whether this Unit is specified as "parent.height".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.IsParent">
            <summary>
            Gets the value indicating whether this Unit is specified as "parent".
            </summary>
        </member>
        <member name="P:C1.C1Preview.Unit.AsUnit">
            <summary>
            Gets the LengthBase object representing this unit.
            </summary>
        </member>
        <member name="T:C1.C1Preview.UnitPoint">
            <summary>
            Defines a point represented by two Unit structures.
            </summary>
        </member>
        <member name="M:C1.C1Preview.UnitPoint.Parse(System.String,C1.C1Preview.UnitPoint@,System.Boolean)">
            <summary>
            Converts a string to the UnitPoint structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">The UnitPoint structure.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to UnitPoint.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="P:C1.C1Preview.UnitPoint.X">
            <summary>
            Gets or sets the x-coordinate of this Point.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UnitPoint.Y">
            <summary>
            Gets or sets the y-coordinate of this Point.
            </summary>
        </member>
        <member name="P:C1.C1Preview.UnitPoint.Empty">
            <summary>
            Represents a null Point.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SplitBehaviorEnum">
            <summary>
            Defines the splitting behavior of a render object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitBehaviorEnum.Never">
            <summary>
            The object should not be split between pages
            (i.e. should always be kept together on a single page).
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded">
            <summary>
            The object can be split if it does not fit onto the current page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge">
            <summary>
            The object can be split only if it is too large to fit on an empty 
            page. In that case, the object is split immediately. Otherwise, a 
            new page is started and the object is placed on it without 
            splitting.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitNewPage">
            <summary>
            If the object does not fit on the current page (column),
            a new page (column) is started; if the object does not fit
            on that page (column), it is split as needed after that.
            </summary>
        </member>
        <member name="T:C1.C1Preview.BreakEnum">
            <summary>
            Defines the various breaks which can be forced before or after render object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BreakEnum.None">
            <summary>
            No break.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BreakEnum.Page">
            <summary>
            New page should be started.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BreakEnum.Column">
            <summary>
            New column should be started.
            </summary>
        </member>
        <member name="F:C1.C1Preview.BreakEnum.Line">
            <summary>
            New line on inline flow should be started.
            </summary>
        </member>
        <member name="T:C1.C1Preview.VisibilityEnum">
            <summary>
            Specifies the visibility of an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.VisibilityEnum.Visible">
            <summary>
            Object is visible.
            </summary>
        </member>
        <member name="F:C1.C1Preview.VisibilityEnum.Hidden">
            <summary>
            Object is not visible, but takes up space and affects the layout of other objects as if it were visible.
            </summary>
        </member>
        <member name="F:C1.C1Preview.VisibilityEnum.Collapse">
            <summary>
            Object is not visible, its size is zero and it does not affect the layout of other objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderObjectCollection">
            <summary>
            Represents the collection of RenderObject objects.
            </summary>
            <summary>
            Represents the collection of RenderObject objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderObjectCollection.FindByAnchorName(System.String,C1.C1Preview.C1Anchor@)">
            <summary>
            Searches the render object by name of anchor which it contains.
            </summary>
            <param name="anchorName">The name of anchor to search.</param>
            <param name="anchor">OUT: contains the C1Anchor object with searched name.</param>
            <returns>Returns the found render object or null if not found.</returns>
        </member>
        <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.String)">
            <summary>
            Returns the RenderObject object by its name.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.Int32)">
            <summary>
            Returns the RenderObject object by its index.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageNumberingChange">
            <summary>
            Describes the changing of the page numbering: to absolute number or increment from current value.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageNumberingChange.Parse(System.String,System.Boolean)">
            <summary>
            Converts a string to the PageNumberingChange object.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to PageNumberingChange.</param>
            <returns>The PageNumberingChange object or null if string is invalid and throwException is false.</returns>
        </member>
        <member name="P:C1.C1Preview.PageNumberingChange.Mode">
            <summary>
            Gets or sets value describing how the page number will be changed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageNumberingChange.Value">
            <summary>
            Gets or sets the value used to change current page number,
            using of value depends on Mode property: set for Set, added for Increment.
            </summary>
        </member>
        <member name="T:C1.C1Preview.StackingRulesEnum">
            <summary>
            Defines the stacking rules: block flow or inline flow, LeftToRight or TopToBottom.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom">
            <summary>
            Objects are placed one beneath the other within the container.
            When the bottom edge of the current page is reached, a new page is added.
            This is the default.
            </summary>
        </member>
        <member name="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight">
            <summary>
            Objects are placed one next to another, from left to right.
            When the right edge of the current page is reached, a new horizontal page is added
            (a horizontal page logically extends the preceding page to the right;
            C1PreviewPane respects this location by default, showing such pages in a row).
            </summary>
        </member>
        <member name="F:C1.C1Preview.StackingRulesEnum.InlineLeftToRight">
            <summary>
            Objects are placed inline, one next to another, from left to right.
            When the right edge of the current page is reached, the sequence wraps to the next line.
            A new page is added when the bottom of the current page is reached.
            </summary>
        </member>
        <member name="T:C1.C1Preview.MeasurementDeviceEnum">
            <summary>
            Defines the device (printer or screen) used to measure document elements.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MeasurementDeviceEnum.Printer">
            <summary>
            Use printer device to measure document elements.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MeasurementDeviceEnum.Screen">
            <summary>
            Use system screen device to measure document elements.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentCreationMode.Unknown">
            <summary>
            Document was not generated, so its creation mode is unknown.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentCreationMode.Generate">
            <summary>
            Document was created with using Generate() method.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentCreationMode.StartEndDoc">
            <summary>
            Document was created with using StartDoc() / EndDoc() methods.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageNumberingChangeModeEnum">
            <summary>
            Describes the type of changing of the page numbering.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Set">
            <summary>
            Set page number to absolute value.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Increment">
            <summary>
            Change the page number on specified value.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentBody">
            <summary>
            Represents the body of document, manages the generating of the document.
            </summary>
            <summary>
            Represents the body of document, manages the generating of the document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.InternalStartNewArea(C1.C1Preview.RenderFragment,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Internal, used only from the InternalFindOptimumPlace method.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.InternalFindOptimumPlace(C1.C1Preview.RenderFragment,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Internal, used only from the GetChildAutoPos method.
            </summary>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.StartNewAreaSplit(System.Boolean,C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,C1.C1Preview.Split)">
            <summary>
            Begins the new page area during object splitting.
            </summary>
            <param name="rf">RenderFragment object which is splitting.</param>
            <param name="curPageArea">Current page area.</param>
            <param name="vertSplit">True if object is being split by vertically.</param>
            <param name="split">Split object causes a split.</param>
            <returns>Returns the new PageAreaBase object.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.SplitFragment(C1.C1Preview.RenderFragment,C1.C1Preview.DocumentBody.SplitModeEnum,C1.C1Preview.PageAreaBase,System.Double,System.Double)">
            <summary>
            Splits the main fragment of object between pages.
            </summary>
            <param name="rf">Main fragment of object to split.</param>
            <param name="splitMode">Mode of split: Vert, Horz or VertHorz.</param>
            <param name="startPageArea">Initial page area.</param>
            <param name="startLeft">Initial left position on page area.</param>
            <param name="startTop">Initial top position on page area.</param>
            <returns>Returns true if object was successfully split and reresolving is not needed.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.StartNewArea(System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Begins a new page area, column or line on inline flow.
            Changes fields: _curDocPoint, _curInlineTopPoint, _curMaxBottomPoint
            </summary>
            <param name="inlineLineStarted">Has true on exit if new inline line is started on the current page area.</param>
            <param name="newAreaStarted">Has true on exit if new page area is started.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.DoPageActions(C1.C1Preview.PageActions,C1.C1Preview.PageAreaBase,C1.C1Preview.PageAreaBase@)">
            <summary>
            Executes the specified list of page actions.
            </summary>
            <param name="pageActions">Actions to execute.</param>
            <param name="curPage">Specifies the current page on which the action occurs, if this parameter is null the current page of main flow is used.</param>
            <param name="page">OUT: Contains the current page after executing of action.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.AfterFragmentProcessing(C1.C1Preview.RenderFragment)">
            <summary>
            Called after fully processing of the RenderFragment object.
            Changes fields:
            _curDocPoint, _curInlineStartPoint, _curMaxBottomPoint
            </summary>
            <param name="rf">RenderFragment object, which was processed.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.PutMainFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Places a fragment on page, fragment does not split.
            The sizes and location of object are taken from ResolvedInfo.
            </summary>
            <param name="fragment">RenderFragment to process it is must be a top-parent fragment.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.ProcessFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Processes the main fragment of top-parent object.
            </summary>
            <param name="rf">Main fragment of object.</param>
            <returns>Returns true if object was successfully resolved and reresolving is not needed.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.SplitMainFragmentVertHorz(C1.C1Preview.RenderFragment)">
            <summary>
            Splits fragment on pages vertically and horizontally.
            </summary>
            <param name="rf">RenderFragment to process this fragment must be top-parent.</param>
            <returns>Returns true if object was successfully split and reresolving is not needed.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.SplitMainFragmentHorz(C1.C1Preview.RenderFragment)">
            <summary>
            Splits fragment on pages horizontally.
            </summary>
            <param name="rf">RenderFragment to process.</param>
            <returns>Returns true if object was successfully split and reresolving is not needed.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.SplitMainFragmentVert(C1.C1Preview.RenderFragment)">
            <summary>
            Splits fragment on pages vertically.
            </summary>
            <param name="rf">RenderFragment to process.</param>
            <returns>Returns true if object was successfully split and reresolving is not needed.</returns>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.AcceptFragment(C1.C1Preview.RenderFragment)">
            <summary>
            Places the fragment on the pages, splits a fragment if needed.
            </summary>
            <param name="rf">RenderFragment object to process.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.GetChildAutoPos(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase@,System.Double@,System.Double@,System.Boolean@,System.Boolean@)">
            <summary>
            Calculates the auto position of child object.
            </summary>
            <param name="rf">The RenderFragment object which coordinates must be calculated.</param>
            <param name="pageArea">Contains the pageArea of object on exit.</param>
            <param name="x">X coordinate within pageArea.</param>
            <param name="y">Y coordinate within pageArea.</param>
            <param name="newAreaStarted">Contains true on exit if new page area is started during calculating.</param>
            <param name="curPageAreaWidthChanhed">Contains true on exit if width of new page area is changed.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.ReresolvePage(C1.C1Preview.Page,System.Boolean)">
            <summary>
            Reresolves specified page.
            </summary>
            <param name="page">Page to reresolve.</param>
            <param name="updateCurDocPoint">If true then _curDocPoint will be set to top-left corner of first column of page.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.NewPage(C1.C1Preview.PageDirectionEnum,C1.C1Preview.Page,C1.C1Preview.Page@)">
            <summary>
            Adds new page into document, by default function adds new page
            after current page of main flow, you can override it by specifiyn the afterPage parameter.
            </summary>
            <param name="direction">Specifies the direction in which page should be added - vertical or horizontal.</param>
            <param name="curPage">Specifies the area on current page, after which the page should be added, should be null for main flow in this case the new page will be added after current page.</param>
            <param name="page">OUT: contains the first column on added page, can be null if page can't be added to the document.</param>
        </member>
        <member name="M:C1.C1Preview.DocumentBody.NewColumn(C1.C1Preview.PageColumn,C1.C1Preview.PageColumn@)">
            <summary>
            Starts new column after specified column.
            </summary>
            <param name="curColumn">Current column.</param>
            <param name="column">The newly started column.</param>
        </member>
        <member name="P:C1.C1Preview.DocumentBody.Document">
            <summary>
            Returns the C1Preview object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DocumentBody.Stacking">
            <summary>
            Stacking rules.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentBody.InlineInfo">
            <summary>
            Stores  the temporary information used during rendering of inline text
            with methods: RenderInlineBegin(), RenderInline(), RenderInlineEnd().
            </summary>
        </member>
        <member name="T:C1.C1Preview.DictionaryItem">
            <summary>
            Base class for all dictionary items.
            </summary>
        </member>
        <member name="P:C1.C1Preview.DictionaryItem.Name">
            <summary>
            Unique name of item.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Dictionary">
            <summary>
            Represents the C1PrintDocument dictionary,
            can be used to holding the Images, Icons, etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Dictionary.Item(System.String)">
            <summary>
            Returns the DictionaryItem object by its name.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Dictionary.Item(System.Int32)">
            <summary>
            Returns the DictionaryItem object by its index.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DictionaryImage">
            <summary>
            Represents an image in dictionary.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DictionaryIcon">
            <summary>
            Represents an icon in dictionary.
            </summary>
        </member>
        <member name="T:C1.C1Preview.UnicodeRangeEnum">
            <summary>
            Defines the available unicode ranges.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.AlphabeticPresentationForms">
            <summary>
            Alphabetic Presentation Forms.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsA">
            <summary>
            Arabic Presentation Forms A.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsB">
            <summary>
            Arabic Presentation Forms B.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Armenian">
            <summary>
            Armenian.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Arrows">
            <summary>
            Arrows.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicArabic">
            <summary>
            Arabic.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicGeorgian">
            <summary>
            Georgian.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicGreek">
            <summary>
            Greek.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicHebrew">
            <summary>
            Hebrew.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BasicLatin">
            <summary>
            Basic Latin.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Bengali">
            <summary>
            Bengali.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BlockElements">
            <summary>
            Block Elements.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Bopomofo">
            <summary>
            Bopomofo, Chinese.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.BoxDrawing">
            <summary>
            Box Drawing.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Braille">
            <summary>
            Braille.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CanadianAboriginalSyllabics">
            <summary>
            Canadian Aboriginal Syllabics, Unified.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Cherokee">
            <summary>
            Cherokee.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.ChineseJapaneseAndKoreanSymbolsAndPunctuation">
            <summary>
            Chinese, Japanese, and Korean Symbols and Punctuation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibility">
            <summary>
            CJK Compatibility.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityForms">
            <summary>
            CJK Compatibility Forms.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityIdeographs">
            <summary>
            CJK Compatibility Ideographs.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKMiscellaneous">
            <summary>
            Miscellaneous CJK.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKRadicalsSupplement">
            <summary>
            CJK Radicals Supplement.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographExtensionA">
            <summary>
            CJK Unified Ideographs Extension A.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographs">
            <summary>
            CJK Unified Ideographs.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarks">
            <summary>
            Combining Diacritical Marks.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksForSymbols">
            <summary>
            Combining Diacritical Marks for Symbols.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningHalfMarks">
            <summary>
            Combining Half Marks.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.ControlPictures">
            <summary>
            Control Pictures.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.CurrencySymbols">
            <summary>
            Currency Symbols.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Cyrillic">
            <summary>
            Cyrillic.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Devanagari">
            <summary>
            Devanagari.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Dingbats">
            <summary>
            Dingbats.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedAlphanumerics">
            <summary>
            Enclosed Alphanumerics.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedCJKLettersAndMonths">
            <summary>
            Enclosed CJK Letters and Months.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Ethiopic">
            <summary>
            Ethiopic.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.ExtendedBopomofo">
            <summary>
            Chinese Bopomofo, Extended.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.GeneralPunctuation">
            <summary>
            General Punctuation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.GeometricShapes">
            <summary>
            Geometric Shapes.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekExtended">
            <summary>
            Greek, Extended.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Gujarati">
            <summary>
            Gujarati.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Gurmukhi">
            <summary>
            Gurmukhi.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.HalfwidthAndFullwidthForms">
            <summary>
            Halfwidth and Fullwidth Forms.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Hangul">
            <summary>
            Hangul, Korean.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulCompatibilityJamo">
            <summary>
            Hangul Compatibility Jamo, Korean.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamo">
            <summary>
            Hangul Jamo, Korean.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Hiragana">
            <summary>
            Hiragana, Japanese.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.IdeographicDescription">
            <summary>
            Ideographic Description Characters.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.IPAExtensions">
            <summary>
            IPA Extensions.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.KangxiRadicals">
            <summary>
            KangxiRadicals.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Kannada">
            <summary>
            Kannada.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Katakana">
            <summary>
            Katakana, Japanese.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Khmer">
            <summary>
            Khmer.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Lao">
            <summary>
            Lao.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Latin1Supplement">
            <summary>
            Latin-1 Supplement.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedA">
            <summary>
            Latin Extended-A.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedAdditional">
            <summary>
            Latin Extended Additional.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedB">
            <summary>
            Latin Extended-B.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.LetterLikeSymbols">
            <summary>
            Letterlike Symbols.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Malayalam">
            <summary>
            Malayalam.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.MathematicalOperators">
            <summary>
            Mathematical Operators.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbols">
            <summary>
            Miscellaneous Symbols.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousTechnical">
            <summary>
            Miscellaneous Technical.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Mongolian">
            <summary>
            Mongolian.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Myanmar">
            <summary>
            Myanmar.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.NumberForms">
            <summary>
            Number Forms.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Ogham">
            <summary>
            Ogham.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.OpticalCharacterRecognition">
            <summary>
            Optical Character Recognition (OCR).
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Oriya">
            <summary>
            Oriya.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.PrivateUseArea">
            <summary>
            Private Use Area.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Runic">
            <summary>
            Runic.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Sinhala">
            <summary>
            Sinhala.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.SmallFormVariants">
            <summary>
            Small Form Variants.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.SpacingModifierLetters">
            <summary>
            Spacing Modifier Letters.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Specials">
            <summary>
            Specials.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.SubscriptsAndSuperscripts">
            <summary>
            Superscripts and Subscripts.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Surrogates">
            <summary>
            Surrogates Area.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Syriac">
            <summary>
            Syriac.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Tamil">
            <summary>
            Tamil.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Telugu">
            <summary>
            Telugu.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Thaana">
            <summary>
            Thaana.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Thai">
            <summary>
            Thai.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Tibetan">
            <summary>
            Tibetan.
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRangeEnum.Yi">
            <summary>
            Yi.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EmbeddedFont">
            <summary>
            Represents the font embedded in the C1PrintDocument.
            </summary>
            <summary>
            Represents the font embedded in the C1PrintDocument.
            </summary>
        </member>
        <member name="F:C1.C1Preview.EmbeddedFont.c_DefFontSize">
            <summary>
            The default font size used to create the temporary font on
            the base of font's name.
            </summary>
        </member>
        <member name="M:C1.C1Preview.EmbeddedFont.GetFontFamily">
            <summary>
            Get the FontFamily object for this embedded object.
            </summary>
            <returns>Returns the created FontFamily object.</returns>
        </member>
        <member name="P:C1.C1Preview.EmbeddedFont.FontName">
            <summary>
            Name of embedded font.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EmbeddedFont.Initialized">
            <summary>
            Indicates that this object has produced the FontFamily object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EmbeddedFont.GdiPrivateFont">
            <summary>
            Describes the GDI API font (not GDI+) installed by the C1PrintDocument.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EmbeddedFont.GdiPrivateFontCollection">
            <summary>
            Collection of GdiPrivateFont objects, implements methods
            for install and uninstall fonts into GDI.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EmbeddedFontCollection">
            <summary>
            Collection of EmbeddedFont objects.
            </summary>
            <summary>
            Collection of EmbeddedFont objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.EmbeddedFontCollection.AutoEmbed(System.Drawing.Font,System.String)">
            <summary>
            Embeds symbols from the specified font that are used in the passed string.
            </summary>
            <param name="font">The font to embed.</param>
            <param name="text">The string of text to check/embed.</param>
            <returns>The index of the font in the collection.</returns>
        </member>
        <member name="M:C1.C1Preview.EmbeddedFontCollection.BuildFont(System.String,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
            <summary>
            Builds the Font object from string.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1FontSubSet">
            <summary>
            Summary description for FontSubSet.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.#ctor(System.IntPtr)">
            <summary>
            Create font subset for existing font.
            </summary>
            <param name="hfont">The Windows handle of the font.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.#ctor(System.Drawing.Font)">
            <summary>
            Create font subset for existing font.
            </summary>
            <param name="font">The drawing font.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.#ctor(System.String)">
            <summary>
            Create font subset for exipting file of the font.
            </summary>
            <param name="fileName">The file path.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddCodeRange(C1.C1Preview.C1FontSubSet.CodeRange)">
            <summary>
            Add the range of codes of characters.
            </summary>
            <param name="cr">The range of codes of characters.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddCodeRange(C1.C1Preview.C1FontSubSet.CodeRange[])">
            <summary>
            Add ranges of codes of characters.
            </summary>
            <param name="crs">The array of code ranges.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddGlyphs(System.String)">
            <summary>
            Add codes of characters.
            </summary>
            <param name="text">The text string.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddGlyphs(System.String,System.Boolean)">
            <summary>
            Add codes of characters as unicode range.
            </summary>
            <param name="text">The text string.</param>
            <param name="addUnicodeRanges"><b>true</b> if th add as unicode range, otherwise <b>false</b>.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddUnicodeRange(C1.C1Preview.UnicodeRange)">
            <summary>
            Add codes of characters for the Unicode range.
            </summary>
            <param name="range">The Unicode range</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.AddUnicodeRanges(C1.C1Preview.UnicodeRange[])">
            <summary>
            Add codes of characters for Unicode ranges.
            </summary>
            <param name="ranges">The array of Unicode ranges.</param>
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.GetGlyphWidth(System.Int32)">
            gets a glyph width in normalized 1000 units
        </member>
        <member name="M:C1.C1Preview.C1FontSubSet.GetMetrics(System.Int32)">
            gets the glyph index and metrics for a character
            returns an integer array with {glyph index, width}
        </member>
        <member name="P:C1.C1Preview.C1FontSubSet.OutputBuffer">
            get output font buffer for only used glyphs.
        </member>
        <member name="T:C1.C1Preview.C1FontSubSet.CodeRange">
            <summary>
            Character code range class.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1FontSubSet.BigEndianBinaryReader">
            <summary>
            TTF files are stored in big-endian format, we need special 
            readers and writers
            </summary>
        </member>
        <member name="T:C1.C1Preview.UnicodeRange">
            <summary>
            Summary description for UnicodeRange. 
            </summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRange.Number">
            <summary>Range number.</summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRange.First">
            <summary>Range first code.</summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRange.Last">
            <summary>Range last code.</summary>
        </member>
        <member name="F:C1.C1Preview.UnicodeRange.Name">
            <summary>Range name.</summary>
        </member>
        <member name="T:C1.C1Preview.Export.PdfExportProvider">
            <summary>
            The RTF export provider working over list of pages, each page
            is represented as metafile.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.PagesExportProvider">
            <summary>
            Base class for all export provides working over list of pages, each page
            is represented as metafile.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.PdfExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.PdfExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.PdfSecurity">
            <summary>
            Represents the security properties of PDF document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.UserPassword">
            <summary>
            Gets or sets the password required to open the pdf document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.OwnerPassword">
            <summary>
            Gets or sets the password required to change permissions for the pdf document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.AllowPrint">
            <summary>
            Gets or sets whether the user can print the pdf document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.AllowCopyContent">
            <summary>
            Gets or sets whether the user can copy contents from the pdf document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditContent">
            <summary>
            Gets or sets whether the user can edit the contents of the pdf document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditAnnotations">
            <summary>
            Gets or sets whether the user can edit annotations in the pdf document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.PdfExporter">
            <summary>
            The PDF exporter.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.PagesExporter">
            <summary>
            Base class for all exporters working over list of pages.
            Derived classes must override ProcessPage method.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfExporter.UseCompression">
            <summary>
            Gets or sets the value indicating whether the compression must be used when saving the document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.PdfExporter.Security">
            <summary>
            Gets the PdfSecurity object describing the security properties of the generated PDF document.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsField">
            <summary>
            Field
            Fields may contain text, expressions, pictures, or subreports.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.FieldComparer">
            <summary>
            FieldComparer
            Class used to sort fields by comparing their 
            Section, ZOrder, Top, and Opacity properties
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsFieldCollection">
            <summary>
            FieldCollection
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsLine">
            <summary>
            Line object of the metafile.
            </summary>
            <remarks>Line may has width, color and length.</remarks>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsLineCollection">
            <summary>
            LineCollection
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsMetaBook">
            <summary>
            Summary description for XlsFilter.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="pt1">The first point of the line.</param>
            <param name="pt2">The second point of the line.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw line from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x1">The x first coordinate.</param>
            <param name="y1">The y first coordinate.</param>
            <param name="x2">The x second coordinate.</param>
            <param name="y2">The y second coordinate.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawPolyline(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw lines from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the polyline.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw poligon from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill poligon from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the poligon.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draw Bezier curve from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillBeziers(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fill Bezier curve from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="points">The array of the points for the curve.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawRectangle(System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Draw round rectangle from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
            <summary>
            Fill round rectangle from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="corners">The cones size.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draw ellipse from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="x">The x (top-left corner) coordinate.</param>
            <param name="y">The y (top-left corner) coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fill ellipse from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw pie from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillPie(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill pie from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draw arc from this RTF document.
            </summary>
            <param name="pen">The drawing pen.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.FillArc(System.Drawing.Brush,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Fill arc from this RTF document.
            </summary>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="startAngle">The start angle in degree.</param>
            <param name="sweepAngle">The sweep angle in degree.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.MeasureString(System.String,System.Drawing.Font,System.Single,System.Drawing.StringFormat)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.MeasureString(System.String,System.Drawing.Font,System.Single)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <param name="width">The drawing width or -1 for default.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.MeasureString(System.String,System.Drawing.Font)">
            <summary>
            Measure string for the RTF document.
            </summary>
            <param name="text">The drawing string.</param>
            <param name="font">The drawing font.</param>
            <returns>The size, in pixels, of the string specified as drawn with the font parameter.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawString(System.String,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="rc">The drawing rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draw text string into this documnet in next position.
            </summary>
            <param name="text">The text string of the paragraph.</param>
            <param name="font">The drawing font.</param>
            <param name="brush">The drawing brush.</param>
            <param name="rc">The drawing rectangle.</param>
            <param name="sf">The drawing string format.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rc">The drawing rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draw image with content alignment.
            </summary>
            <param name="image">The drawing image.</param>
            <param name="rcImage">The drawing image rectangle.</param>
            <param name="rcClip">The drawing clip for image rectangle.</param>
            <returns>The XL field object.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawMetafile(System.Drawing.Imaging.Metafile)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.DrawMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
            <summary>
            Draw metafile image from this RTF document.
            </summary>
            <param name="image">The drawing metafile.</param>
            <param name="rc">The drawing rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.Export.Xls.XlsMetaBook.SetPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            Set current page settings from this RTF document.
            </summary>
            <param name="pageSize">The size of the current page.</param>
            <param name="margins">The print margins for the current page.</param>
        </member>
        <member name="P:C1.C1Preview.Export.Xls.XlsMetaBook.Hyperlink">
            <summary>
            Gets or sets current hyperlink for all adds objects for this book.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.Xls.XlsMetafileConverter">
            <summary>
            The metafile convertor to Excel content.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.XlsExportProvider">
            <summary>
            The Excel export provider.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.XlsExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.XlsxExportProvider">
            <summary>
            The Excel export provider to the Office12 format.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.XlsxExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.XlsxExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.XlsExporter">
            <summary>
            The Excel exporter.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.FontScaling">
            <summary>
            Gets or sets the amount (in points) by which to change font sizes
            (may be used to better fit texts into available space).
            </summary>
            <value>The amount (in points) by which to change font sizes.</value>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.PagePerSheet">
            <summary>
            Gets or sets the value indicating whether to export each page
            of the document into a separate sheet.
            </summary>
            <value><b>true</b> if one page per Excel sheet, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.BookContent">
            <summary>
            Gets or sets the value indicating Excel book content.
            </summary>
            <value>The Excel book content.</value>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.DetectDataType">
            <summary>
            Gets or sets the value indicating whether the export module should
            try to auto detect the type of data (numeric, date) in the cells.
            </summary>
            <value><b>true</b> if detect data type of the Excel cell, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.Tolerance">
            <summary>
            Gets or sets the tolerance (in points) when auto-detecting the
            boundaries of rows and columns in the document. The smaller this
            amount, the greater the number of narrow rows and columns created
            for precise positioning of data.
            </summary>
            <value>The tolerance value.</value>
        </member>
        <member name="P:C1.C1Preview.Export.XlsExporter.UnitType">
            <summary>
            Gets default unit type for export double values.
            </summary>
            <value>The default unit type.</value>
        </member>
        <member name="T:C1.C1Preview.Export.XlsExporter.ObjectField">
            <summary>
            Fields may contain text, expressions, pictures, or subreports.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Forms.WarningForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.WarningForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Forms.WarningForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1Anchor">
            <summary>
            Represents the anchor within document, this anchor can be associated with
            any RenderObject.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Anchor.Name">
            <summary>
            Gets the name of the anchor (must be unique within the document).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Anchor.Description">
            <summary>
            Gets the description of the anchor.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Anchor.UserData">
            <summary>
            Gets the custom user's data associated with the anchor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1AnchorText">
            <summary>
            Represents the anchor within text object:
            RenderText, RenderParagraph, RenderRichText.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1AnchorText.Position">
            <summary>
            Gets the position of anchor withint text, zero based.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1AnchorCollection">
            <summary>
            Collection of C1Anchor objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkStateEnum">
            <summary>
            Represents the state of hyperlink.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Normal">
            <summary>
            An unvisited hyperlink.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Visited">
            <summary>
            A hyperlink that has been visited.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Hover">
            <summary>
            A hyperlink under the mouse pointer.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Active">
            <summary>
            A hyperlink that has been clicked, but not yet visited.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1Hyperlink">
            <summary>
            Represents the hyperlink in document, can be associated with
            RenderObject or ParagraphObject.
            </summary>
            <summary>
            Represents the hyperlink in document, can be associated with
            RenderObject or ParagraphObject.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1Hyperlink.ToMetafileTag">
            <summary>
            Encodes the hyperlink to string, this string is used
            to write into metafile in EMF_COMMENT record.
            This record can be analysed by the exporters.
            The UserData field stored as string,
            the _userData.ToString() is used.
            All fields of the hyperlink will be delimeted with
            [c_Delimeter] character.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Hyperlink.StatusText">
            <summary>
            Text shown in the status line when the mouse is over the link
            (when the document is previewed by C1PrintPreview).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Hyperlink.LinkTarget">
            <summary>Determines where the hyperlink points to.</summary>
            <remarks>
            <para>Currently the target may be described by an object of one of the following classes:</para>
            <list type="bullet">
            <item><term>C1LinkTargetAnchor</term>
                <description>Anchor inside the current document.</description></item>
            <item><term>C1LinkTargetExternalAnchor</term>
                <description>Anchor inside a previously saved C1D document.</description></item>
            <item><term>C1LinkTargetFile</term>
                <description>External document, program or URL (the ShellExecute API is used to invoke the link).</description></item>
            <item><term>C1LinkTargetPage</term>
                <description>Another page inside the current document.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.C1Hyperlink.UserData">
            <summary>
            Arbitrary data associated with the hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Hyperlink.State">
            <summary>
            The hyperlink's status.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1Hyperlink.PdfURL">
            <summary>
            Gets the destenation URL of hyperlink in the Adobe PDF format.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkInfo">
            <summary>
            Auxiliary class, contains additional information about hyperlink: list of pages
            where hyperlink exists and area of hyperlink within each page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkInfo.Hyperlink">
            <summary>
            Gets the C1Hyperlink object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkInfo.Areas">
            <summary>
            Gets the AreaCollection object containing the hyperlink's areas
            on render fragments.
            Typically this collection contains one element, but if hyperlink
            splits between pages it contains one element for each page.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkInfo.Area">
            <summary>
            Describes the position of hyperlink within page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.Region">
            <summary>
            Gets the region of hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.PageIndex">
            <summary>
            Gets the index of page where hyperlink is.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection">
            <summary>
            Collection of Area objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1AnchorInfo">
            <summary>
            Auxiliary class, contains additional information about anchor within document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1AnchorInfo.Anchor">
            <summary>
            Gets the C1Anchor object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1AnchorInfo.PageIndex">
            <summary>
            Gets the index of page where anchor is.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1AnchorInfo.Point">
            <summary>
            Gets the position of anchor.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkInfoCollection">
            <summary>
            Collection of the C1HyperlinkInfo objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1AnchorInfoCollection">
            <summary>
            Collection of the C1AnchorInfo objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1LinkTargetUser">
            <summary>
            This class starts a new document when a hyperlink with this type of LinkTarget 
            is clicked. When such a hyperlink is activated (clicked), 
            the UserHyperlinkJump event is fired.
            This class does not have any public properties or methods of its own.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageJumpTypeEnum">
            <summary>
            Describes the supported modes of moving between pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.First">
            <summary>
            Move to the first page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.Previous">
            <summary>
            Move to the previous page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.Next">
            <summary>
            Move to the next page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.Last">
            <summary>
            Move to the last page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.Absolute">
            <summary>
            Move directly to the specified page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageJumpTypeEnum.Relative">
            <summary>
            Move to the page specified relative to the current page.
            </summary>
        </member>
        <member name="M:C1.C1Preview.HyperlinksHelper.ParseCommentRecord(System.IntPtr,System.Int32,System.Drawing.Imaging.EmfPlusRecordType,C1.C1Preview.HyperlinksHelper.CommentRecordTypeEnum@,System.String@,System.Drawing.Rectangle@)">
            <summary>
            Parses the passed metafile comment record (EmfPlusRecordType.Comment or EmfPlusRecordType.EmfGdiComment).
            Function returns true if no errors occur during parsing.
            </summary>
            <param name="data">Data of the metafile's record.</param>
            <param name="dataSize">Size of data.</param>
            <param name="recordType">Type of the metafile's record.</param>
            <param name="commentType">OUT: Type of record, the possible values are defined by the CommentRecordTypeEnum enumeration.</param>
            <param name="tag">Tag field of the record.</param>
            <param name="boundRectangle">Bounding rectangle of the record.</param>
            <returns>Returns true if no errors occur.</returns>
        </member>
        <member name="T:C1.C1Preview.MetafileHyperlinksHelper">
            <summary>
            Provides methods to exatract hyperlinks, anchors and outline entries from metafiles.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            StringTables
            this class contains a single static method InitTables that populates the
            tables used by the Localizer class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.OutlineNodeCollection.Item(System.Int32)">
            <summary>
            Returns the RenderObject object by its index.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1PrintManager">
            <summary>
            Provides printing services.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PrintManager._validatePage">
            <summary>
            checks whether the current page exists, if not tries to go
            to next existing page.
            </summary>
            <returns>Returns true if a page is found, false otherwise.</returns>
        </member>
        <member name="T:C1.C1Preview.C1PrintOptions">
            <summary>
            Describes the set of options controlling how a document's content
            is to be printed (or previewed).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSource">
            <summary>
            Gets or sets the value indicating whether the paper source is selected automatically.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintOptions.PageScaling">
            <summary>
            Gets or sets the value indicating the manner in which pages are scaled during printing.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintOptions.CenterPage">
            <summary>
            Gets or sets the value indicating whether the page should be centered on paper during printing.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PrintOptions.AutoRotate">
            <summary>
            Gets or sets the value indicating whether pages should be auto-rotated to better fit the paper during printing.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentInfoFields">
            <summary>
            Enumerates fields of DocumentInfo.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.None">
            <summary>
            No fields.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Title">
            <summary>
            The title of the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Author">
            <summary>
            The author of the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Operator">
            <summary>
            The person who last made changes to the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Manager">
            <summary>
            The manager of the author.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Company">
            <summary>
            The company of the author.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Subject">
            <summary>
            The subject of the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Comment">
            <summary>
            The document comments.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.CreationTime">
            <summary>
            The date and time when the document was created.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.RevisionTime">
            <summary>
            The date and time when the document was last modified.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Creator">
            <summary>
            The application that created the original document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Keywords">
            <summary>
            The keywords for the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.Producer">
            <summary>
            The application that created the document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DocumentInfoFields.All">
            <summary>
            All fields.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocumentInfo">
            <summary>
            Represents the common information about the C1Preview:
            author, subject, creation time, and so on.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.EmfExportProvider">
            <summary>
            Describes the export of document to the metafile files.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.EmfExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.EmfExporter">
            <summary>
            Exports the document to a collection of metafiles or to a stream.
            </summary>
            <remarks>
            <para>EmfExporter supports export to a stream in following format:</para>
            <list type="bullet">
            <item><term>int</term><description>The total page count.</description></item>
            <item><term>int</term><description>The length of the first page data (bytes).</description></item>
            <item><term>byte[]</term><description>The first page data.</description></item>
            <item><term>int</term><description>The length of the second page data (bytes).</description></item>
            <item><term>byte[]</term><description>The second page data.</description></item>
            <item><term>...</term><description>and so on...</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly">
            <summary>
            Gets or sets the value indicating whether EmfPlus metafiles
            should be converted to EmfOnly.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.ExportProviders">
            <summary>
            Represents the list of registered export providers.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ExportProviders.Register(C1.C1Preview.Export.ExportProvider)">
            <summary>
            Registers the export provider.
            </summary>
            <param name="exportProvider">ExportProvider object to register.</param>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.Int32)">
            <summary>
            Enumerates the export providers by index.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.String)">
            <summary>
            Enumerates the export providers by DefaultExtension.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ExportProviders.Count">
            <summary>
            Gets the count of registed export providers.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.ExportUtil">
            <summary>
            Provides static utility methods for export and printing.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.PageExists(System.Int32,System.Collections.IList,System.Object)">
            <summary>
            Tests whether the page with the specified number exists in the document.
            </summary>
            <param name="pageNo">The 1-based page number.</param>
            <param name="pages">The list of page images or null.</param>
            <param name="document">The document or null.</param>
            <returns>True if the page exists, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Int32,System.Collections.IList,System.Object)">
            <summary>
            Gets the page metafile for export or printing.
            </summary>
            <param name="pageNo">The page number.</param>
            <param name="pages">The pages collection (may be null).</param>
            <param name="document">The document (may be null).</param>
            <returns>The metafile.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.C1PrintDocument,System.Int32)">
            <summary>
            Gets the page metafile for export or printing.
            </summary>
            <param name="document">The C1PrintDocument object.</param>
            <param name="pageIdx">The 0-based page index.</param>
            <returns>The page metafile.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Drawing.Graphics,System.Int32,System.Collections.IList,System.Object)">
            <summary>
            Gets the page metafile for export or printing.
            </summary>
            <param name="refGraphics">The reference graphics for the metafile.</param>
            <param name="pageNo">The page number.</param>
            <param name="pages">The pages collection (may be null).</param>
            <param name="document">The document (may be null).</param>
            <returns>The metafile.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetPages(System.Object,System.Int32@)">
            <summary>
            Gets the list of page images representing the document, or null
            if the document is a C1Preview.
            </summary>
            <param name="document">The export document.</param>
            <param name="maxPageNumber">Out: the maximum page number.</param>
            <returns>The list of page metafiles or null.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetMinPageNumber(System.Object)">
            <summary>
            Returns the minimum page number for the specified document.
            </summary>
            <param name="document">The target document.</param>
            <returns>The minimum page number valid for this document.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object,System.Int32)">
            <summary>
            Returns the maximum valid page number for the specified document.
            </summary>
            <param name="document">The target document.</param>
            <param name="pageCount">The page count.</param>
            <returns>The maximum page number valid for this document.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object)">
            <summary>
            Returns the maximum valid page number for the specified document.
            </summary>
            <param name="document">The target document.</param>
            <returns>The maximum page number valid for this document.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.ExportUtil.PageIndicesToPageNumbers(System.Int32[],System.Object)">
            <summary>
            Converts the list of 0-based physical page indices to the list
            of 1-based logical page numbers.
            </summary>
            <param name="pageIndices"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1Preview.Export.ImageExportProvider">
            <summary>
            Base abstract class for all image export providers.
            Descendant classes must override GetImageFormat() method.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.ImageExporter">
            <summary>
            Exports the document to a collection of metafiles.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ImageExporter.ImageFormat">
            <summary>
            Gets or sets the ImageFormat object indicating the format of
            output image files. The ImageExporter supports formats: Bmp, Gif, Jpeg, Png, Tiff.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.ImageExporter.Resolution">
            <summary>
            Gets or sets the resolution of exported image.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.RtfExportProvider">
            <summary>
            The RTF export provider.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.RtfExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.RtfExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.DocxExportProvider">
            <summary>
            The Excel export provider to the Office12 format.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportObject(System.Object)">
            <summary>
            Tests whether the specified document can be exported to Open XML Word.
            </summary>
            <param name="obj">The document to test.</param>
            <returns>True if the document can be exported, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.Export.DocxExportProvider.NewExporter">
            <summary>
            Creates a new Exporter object.
            </summary>
            <returns>Returns the created object.</returns>
        </member>
        <member name="P:C1.C1Preview.Export.DocxExportProvider.FormatName">
            <summary>
            Description of format.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultExtension">
            <summary>
            Default extension for output file.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Export.RtfExporter">
            <summary>
            The RTF exporter.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Export.RtfExporter.UseDrawingCanvas">
            <summary>
            Gets or sets the value indicating whether to create drawing
            canvases in the resulting document.
            </summary>
            <value><b>true</b> if use drawing canvas, otherwise <b>false</b>.</value>
        </member>
        <member name="P:C1.C1Preview.Export.RtfExporter.UnitType">
            <summary>
            Gets default unit type for export double values.
            </summary>
            <value>The default unit type.</value>
        </member>
        <member name="T:C1.C1Preview.PageLayoutKindEnum">
            <summary>
            Defines the various kinds of page layouts within document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.None">
            <summary>
            The page layout does not linked with document.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.Default">
            <summary>
            Default page layout.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.FirstPage">
            <summary>
            Page layout of first page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.LastPage">
            <summary>
            Page layout of last page.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.EvenPages">
            <summary>
            Page layout of even pages.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageLayoutKindEnum.OddPages">
            <summary>
            Page layout of odd pages.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageLayout">
            <summary>
            Represents the page layout of C1PrintDocument.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout,System.Boolean,System.Boolean)">
            <summary>
            Copies properties from another PageLayout object.
            This method used internally within C1PrintDocument
            during report generation.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageLayout.MixWith(C1.C1Preview.PageLayout)">
            <summary>
            Mix this PageLayout object with specified PageLayout object.
            </summary>
            <param name="pageLayout">The PageLayout object that should be mixed with this object.</param>
        </member>
        <member name="M:C1.C1Preview.PageLayout.IsEmpty">
            <summary>
            Returns true if PageLayout has no redefined fields.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageLayout.Compare(C1.C1Preview.PageLayout)">
            <summary>
            Compares this PageLayout with other PageLayout object.
            </summary>
            <param name="other">PageLayout object to compare to.</param>
            <returns>Returns true if this PageLayout object equals other PageLayout object.</returns>
        </member>
        <member name="M:C1.C1Preview.PageLayout.GetOwnedObjectCount">
            <summary>
            Calculates the count of render objects used in this PageLayout object.
            </summary>
            <returns>Returns the count of render objects used in this PageLayout object.</returns>
        </member>
        <member name="M:C1.C1Preview.PageLayout.Clone">
            <summary>
            Creates a new PageLayout object that is a copy of the current instance. 
            All nested objects (render objects, page settings) are cloned.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout)">
            <summary>
            Copies properties from another PageLayout object.
            All nested objects (render objects, page settings) are cloned.
            </summary>
            <param name="source">The another PageLayout object.</param>
        </member>
        <member name="P:C1.C1Preview.PageLayout.Document">
            <summary>
            Gets the C1PrintDocument object to which this object is connected.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.Kind">
            <summary>
            Gets the kind of page layout in document.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.PageSettings">
            <summary>
            Gets or sets the page settings associated with this page layout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.PageHeader">
            <summary>
            Gets or sets the page header associated with this page layout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.PageFooter">
            <summary>
            Gets or sets the page footer associated with this page layout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.Watermark">
            <summary>
            Gets or sets the watermark associated with this page layout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.Overlay">
            <summary>
            Gets or sets the overlay associated with this page layout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.HasColumns">
            <summary>
            Gets the value indicating whether this page layout contains multiple columns.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageLayout.Columns">
            <summary>
            Gets the collection of columns defined for this page layout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1PageSettings">
            <summary>
            Describes the page's properties of document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings)">
            <summary>
            Compares this C1PageSettings with other C1PageSettings object.
            </summary>
            <param name="other">C1PageSettings object to compare to.</param>
            <returns>Returns true if this C1PageSettings object equals other C1PageSettings object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
            <param name="document">The C1PrintDocument object providing the default units
            (if some sizes in this object specified in default units) and DPI
            (if some sizes specified in UnitTypeEnum.Pixel).
            Can be null, but in that case the current object must not contain sizes
            using UnitTypeEnum.Default or UnitTypeEnum.Pixel units.</param>
            <param name="printerSettings">Printer settings for the target page settings.
            Can be null in which case the default printer is used.</param>
            <returns>The newly created PageSettings object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument)">
            <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
            <param name="document">The C1PrintDocument object providing the default units
            (if some sizes in this object specified in default units) and DPI
            (if some sizes specified in UnitTypeEnum.Pixel).
            Can be null, but in that case the current object must not contain sizes
            using UnitTypeEnum.Default or UnitTypeEnum.Pixel units.</param>
            <returns>The newly created PageSettings object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings">
            <summary>
            Creates and initializes a new instance of PageSettings class
            based on the properties of the current object.
            </summary>
            <returns>The newly created PageSettings object.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.GetCurrentLocaleDefaultPaperSize(System.Double@,System.Double@,System.Double@,C1.C1Preview.UnitTypeEnum@)">
            <summary>
            Retrieves the default paper size for the current locale.
            </summary>
            <returns>The locale-specific default paper size.</returns>
        </member>
        <member name="M:C1.C1Preview.C1PageSettings.CreateDefaultPageSettings">
            <summary>
            Creates the C1PageSettings object with default settings, on the
            basis of the current printer or system locale.
            </summary>
            <returns>The created C1PageSettings object.</returns>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.UsePrinterPaperSize">
            <summary>
            Gets or sets a value indicating whether to use the printer paper size
            when generating the document.
            This property does not affect the values of 
            <see cref="P:C1.C1Preview.C1PageSettings.Landscape"/>,
            <see cref="P:C1.C1Preview.C1PageSettings.Width"/>,
            <see cref="P:C1.C1Preview.C1PageSettings.Height"/> and
            <see cref="P:C1.C1Preview.C1PageSettings.PaperKind"/> properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.PageLayout">
            <summary>
            Gets the PageLayout object containing this object, can be null if
            this object is not linked with PageLayout.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.Landscape">
            <summary>
            Gets or sets a value indicating whether the page is printed in landscape or portrait orientation.
            Changing this property causes swap the height and width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.Width">
            <summary>
            Gets or sets the width of the paper.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.Height">
            <summary>
            Gets or sets the height of the paper.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.PaperKind">
            <summary>
            Gets the type of paper.
            Changing of this property causes change of Width and Height.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.Color">
            <summary>
            Gets or sets a value indicating whether the page should be printed in color.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.LeftMargin">
            <summary>
            Gets or sets the left margin width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.TopMargin">
            <summary>
            Gets or sets the top margin width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.RightMargin">
            <summary>
            Gets or sets the right margin width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1PageSettings.BottomMargin">
            <summary>
            Gets or sets the bottom margin width.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OutputRangeTypeEnum">
            <summary>
            Specifies the type of an OutputRange.
            </summary>
        </member>
        <member name="F:C1.C1Preview.OutputRangeTypeEnum.All">
            <summary>
            All pages of the document are in the range.
            </summary>
        </member>
        <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageList">
            <summary>
            Pages that are in the range are specified as a list.
            </summary>
        </member>
        <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageRange">
            <summary>
            One or more ranges of pages are specified.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OutputRange">
            <summary>
            Describes a part of the document (pages or objects) that is to be
            exported or printed.
            Note: all page numbers are 1-based sequential numbers.
            </summary>
        </member>
        <member name="F:C1.C1Preview.OutputRange.Dash">
            <summary>
            If included in the page indices list, specifies that all pages
            from preceeding to the next one are to be included in the output.
            </summary>
        </member>
        <member name="F:C1.C1Preview.OutputRange.NoPage">
            <summary>
            This value indicates an invalid page number.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OutputRange.#ctor">
            <summary>
            Creates a new instance of the output range that includes all pages in the document.
            Note that enumerating the resulting range must be broken by the client.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the output range that includes all pages in the document.
            </summary>
            <param name="maxPageNumber">The maximum page number (used to prevent infinite enumeration).</param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an instance of OutputRange that includes a single interval of
            pages. FromPage may be greater than ToPage, in that case the range is
            inverted.
            </summary>
            <param name="fromPage">The number of the first page to include (1-based).</param>
            <param name="toPage">The number of the last page to include (1-based).</param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32[])">
            <summary>
            Creates an instance of OutputRange that includes all pages with
            numbers specified in the list. The list may include Dash values to
            specify intervals.
            </summary>
            <param name="pageNumbers">The array of page numbers to include.</param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.#ctor(System.String)">
            <summary>
            Creates an instance of OutputRange that includes pages specified by the
            string parameter.
            The string may contain:
            - page numbers (1-based) separated by spaces or commas;
            - dashes ('-') to specify intervals (a dash at the end implies infinity).
            </summary>
            <param name="pages">The pages to be included.</param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.AssignFrom(C1.C1Preview.OutputRange)">
            <summary>
            Copies values from another instance of OutputRange.
            </summary>
            <param name="source">The OutputRange to copy values from.</param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.Clone">
            <summary>
            Clones the current OutputRange.
            </summary>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.ToString">
            <summary>
            Returns a string that represents the current OutputRange.
            </summary>
            <returns>A string that represents the range.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.GetFirstPage">
            <summary>
            Returns the first page in the range.
            </summary>
            <returns>The number of the first page.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32)">
            <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
            <param name="pageNumber">The current page number.</param>
            <returns>The next page number or -1 if there's none.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32,System.Int32@)">
            <summary>
            Returns the page number in the range following the specified one, or
            -1 if the specified number was the last one.
            </summary>
            <param name="pageNumber">The current page number.</param>
            <param name="cookie">A cookie used to avoid infinite loops in cases where the same page number appears in several ranges.
            Set this value to 0 before the first call to this method.</param>
            <returns>The next page number or -1 if there's none.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.Contains(System.Int32)">
            <summary>
            Tests whether the specified page is within the range.
            </summary>
            <param name="pageNumber">The page number to test.</param>
            <returns>True if the page is in the range, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange._normalizePageNumbers">
            <summary>
            Replaces all intervals w/out internals (such as "7-8", "4-3" etc.)
            with sequences (removes the dashes).
            </summary>
        </member>
        <member name="M:C1.C1Preview.OutputRange._findSequentialPages(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            For a given page number, finds the previous and the next page numbers
            in the range (not taking the Inverted flag into consideration).
            </summary>
            <param name="pageNo">The current page number.</param>
            <param name="cookie">In/Out: A cookie used to avoid infinite loops in cases where the same page is included in multiple ranges.</param>
            <param name="prev">Out: the previous page number, or NoPage if there's none.</param>
            <param name="next">Out: the next page number, or NoPage if there's none.</param>
            <returns>True if the current page itself is in the range, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange._findFirstPage">
            <summary>
            Finds the first page in sequence (not taking the Inverted flag into consideration).
            </summary>
            <returns>The number of the first page.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange._findLastPage">
            <summary>
            Finds the last page in sequence (not taking the Inverted flag into consideration).
            </summary>
            <returns>The number of the last page.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.ParseString(System.String)">
            <summary>
            Converts the string to array of numbers.
            </summary>
            <param name="s">String to convert.</param>
            <returns>Returns the array of page numbers or null if string is invalid.</returns>
        </member>
        <member name="M:C1.C1Preview.OutputRange.GetEnumerator">
            <summary>
            Creates and returns a new enumerator that allows to loop
            through all pages in the range.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="P:C1.C1Preview.OutputRange.Inverted">
            <summary>
            Gets or sets the value indicating whether the range should be inverted.
            If the range is inverted, the range's iterator goes from the end of the
            range backwards.
            </summary>
            <value>True if the range is inverted, false otherwise.</value>
        </member>
        <member name="P:C1.C1Preview.OutputRange.MaxPageNumber">
            <summary>
            Gets or sets the absolute upper limit for page numbers in the range.
            </summary>
            <value>The upper limit value.</value>
        </member>
        <member name="P:C1.C1Preview.OutputRange.Type">
            <summary>
            Type of range: all pages, range of pages etc.
            </summary>
        </member>
        <member name="P:C1.C1Preview.OutputRange.PageNumbers">
            <summary>
            Gets the list of page numbers.
            </summary>
        </member>
        <member name="P:C1.C1Preview.OutputRange.PageCount">
            <summary>
            Gets the total number of pages in the range.
            Note that if the MaxPageNumber has not been set, this
            property will get int.MaxValue.
            </summary>
            <value></value>
        </member>
        <member name="P:C1.C1Preview.OutputRange.FromPage">
            <summary>
            Gets the first page in the range.
            </summary>
        </member>
        <member name="P:C1.C1Preview.OutputRange.ToPage">
            <summary>
            Gets the last page in the range.
            </summary>
        </member>
        <member name="P:C1.C1Preview.OutputRange.All">
            <summary>
            Represents an all-inclusive range.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OutputRange.Enumerator">
            <summary>
            Allows to enumerate all pages in the range.
            Note: It is the client reesponsibility to take steps
            to avoid infinite loops if the OutputRange
            was created without specifying a valid MaxPageNumber.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OutputRange.Enumerator.#ctor(C1.C1Preview.OutputRange)">
            <summary>
            Creates a new instance of the OutputRange enumerator.
            </summary>
            <param name="range"></param>
        </member>
        <member name="M:C1.C1Preview.OutputRange.Enumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OutputRange.Enumerator.MoveNext">
            <summary>
            Moves to the next page number in the range.
            </summary>
            <returns>True if there are more pages in the range.</returns>
        </member>
        <member name="P:C1.C1Preview.OutputRange.Enumerator.Current">
            <summary>
            Gets the current page number.
            </summary>
            <value>The current page number.</value>
        </member>
        <member name="T:C1.C1Preview.PageScalingEnum">
            <summary>
            Specifies the way pages are scaled during printing.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageScalingEnum.None">
            <summary>
            Pages are not scaled.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageScalingEnum.FitToPaper">
            <summary>
            Pages are enlarged or made smaller if needed to fit paper.
            </summary>
        </member>
        <member name="F:C1.C1Preview.PageScalingEnum.ReduceToPaper">
            <summary>
            Pages are made smaller if needed to fit paper.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.LayoutPrintPage(System.Drawing.SizeF,System.Drawing.RectangleF,System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF,C1.C1Preview.C1PrintOptions,System.Drawing.PointF@,System.Double@,System.Boolean@)">
            <summary>
            Calculates the page zoom factor and the location of the page (top/left)
            inside the printer paper size, according to the specified page scaling
            mode. All sizes should be in the same units.
            </summary>
            <param name="paperSize">Printer paper size.</param>
            <param name="printableArea">Printable area (depends on the printer).</param>
            <param name="landscapeAngle">Landscape angle supported by the printer (90 or 270).</param>
            <param name="pageSize">Document page size.</param>
            <param name="pageContent">Page content rectangle (pageSize sans the margins).</param>
            <param name="printOptions">Print options to use.</param>
            <param name="pageLocation">OUT: Page location relative to the paper top left.</param>
            <param name="pageZoom">OUT: Page zoom factor.</param>
            <param name="rotate">OUT: whether the page should be rotated
            (the angle is opposite to landscapeAngle).</param>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.SamePaperSizes(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Tests two sizes for equality allowing a small margin for (rounding) errors.
            </summary>
            <param name="size1">The first size to compare.</param>
            <param name="size2">The second size to compare.</param>
            <returns>True if the two sizes are reasonably close, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(C1.C1Preview.ResolvedPage,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
            <summary>
            Layouts the resolved page of a C1PrintDocument.
            </summary>
            <param name="rpage">The page to layout.</param>
            <param name="units">Target units.</param>
            <param name="dpiX">Target X resolution.</param>
            <param name="dpiY">Target Y resolution.</param>
            <param name="pageSize">OUT: Page size.</param>
            <param name="content">OUT: Content rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(System.Drawing.Image,System.Drawing.Printing.PageSettings,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
            <summary>
            Layouts the page represented by an image.
            </summary>
            <param name="rpage">The image of the page to layout.</param>
            <param name="pageSettings">The page settings to use.</param>
            <param name="units">Target units.</param>
            <param name="dpiX">Target X resolution.</param>
            <param name="dpiY">Target Y resolution.</param>
            <param name="pageSize">OUT: Page size.</param>
            <param name="content">OUT: Content rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.ShouldRotate(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Tests whether the page should be rotated to better fit paper.
            </summary>
            <param name="paperSize">The paper size.</param>
            <param name="pageSize">The page size.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C1.C1Preview.PrintingUtil.RotatePaper(System.Int32,System.Drawing.SizeF@,System.Drawing.RectangleF@)" -->
        <member name="M:C1.C1Preview.PrintingUtil.PaperRotationAngle(System.Int32)">
            <summary>
            Returns the paper rotation angle.
            </summary>
            <param name="pageRotationAngle">The page rotation angle, in degrees.</param>
            <returns>The paper rotation angle, in degrees.</returns>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.AdjustPaperSize(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
            <summary>
            If paper kind of the passed page settings is Custom, scans the paper sizes
            available on the printer specified, and if a match is found sets the paper
            size from the printer to the one in page settings.
            </summary>
            <param name="pageSettings">The page settings to adjust.</param>
            <param name="printerSettings">The target printer settings.</param>
            <returns>True if adjustment was made, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.IntPtr,System.Double@,System.Double@)">
            <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
            <param name="hdc">Handle to device context</param>
            <param name="left">Left physical offset</param>
            <param name="top">Top physical offset</param>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.Drawing.Graphics,System.Double@,System.Double@)">
            <summary>
            Gets the physical offset of the printed page, in 100th of an inch.
            </summary>
            <param name="hdc">Handle to Graphics for the device context</param>
            <param name="left">Left physical offset</param>
            <param name="top">Top physical offset</param>
        </member>
        <member name="M:C1.C1Preview.PrintingUtil.LandscapeAngle(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Gets the printer landscape angle.
            If <para>printerSettings</para> is null or invalid, returns 270.
            </summary>
            <param name="printerSettings">The printer settings to get the landscape angle for.</param>
            <returns>The printer landscape angle.</returns>
        </member>
        <member name="T:C1.C1Preview.RenderGraphicsFragment">
            <summary>
            Represents a fragment of the RenderImage object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputFragment">
            <summary>
            Represents a fragment of the RenderInputBase object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderInputFragment.FormForWmPrint">
            <summary>
            Some controls process the WM_PRINT message incorrectly if their Parent property
            is null. Example of such class is a TextBox when its Multiline property is false.
            FormForWmPrint is used as a parent form for such classes, this form is invisible and
            when it is displayed it does not receive an input focus, see FormForWmPrint.Show() method for details.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderShapeFragment">
            <summary>
            Represents the fragment of RenderShape object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderLineFragment">
            <summary>
            Represents the fragment of the RenderLineBase object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderRectangleFragment">
            <summary>
            Represents the fragment of the RenderRectangle object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderRoundRectangleFragment">
            <summary>
            Represents the fragment of the RenderRectangle object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderTableFragment">
            <summary>
            Represents the fragment of RenderTable object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.BuildVectorGroupsList(System.Int32[],C1.C1Preview.TableVectorGroupCollection)">
            <summary>
            Build array of groups which are within this table's fragment.
            </summary>
            <returns>Returns the list of GroupInfo objects.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.IndexOfNumber(System.Int32[],System.Int32)">
            <summary>
            Searches the index of number in the array of numbers.
            </summary>
            <param name="numbers">Array of numbers (integers).</param>
            <param name="number">Number to search.</param>
            <returns>Returns index of the number or -1.</returns>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.BuildVectorInfoArray(C1.C1Preview.TableVectorCollection,System.Int32[])">
            <summary>
            Builds an array of VectorInfo structs on the base of numbers array.
            </summary>
            <param name="vectors">Collection of TableVector objects.</param>
            <param name="numbers">Array with ordinals of vectors.</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.CheckSplitPos(C1.C1Preview.TableSplitParams,System.Int32[],System.Double[],System.Double[],C1.C1Preview.TableVectorCollection,C1.C1Preview.TableVectorGroupCollection,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double,System.Int32,System.Int32,System.Collections.ArrayList,System.Double)">
            <summary>
            Auxiliary method, called from InternalFindSplitPosContent.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.ResolveWidestGridLines">
            <summary>
            Searches the widest vertical and horizontal grid lines.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.SetChildSize(C1.C1Preview.RenderFragment,System.Int32,System.Int32,System.Int32[],System.Double[],C1.C1Preview.RefDim)">
            <summary>
            Sets the specified dimension for all children of table
            size of dimension calculated very simple as the summary size of all vectors
            intersecting with this child.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.DeleteZeroVectors(System.Boolean,System.Int32[]@,System.Double[]@,C1.C1Preview.RenderTableFragment.VectorInfo[]@)">
            <summary>
            Deletes all vectors with zero or less than zero size.
            Returns true if such vectors were found and deleted.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.CorrectAutoVectors(System.Boolean,System.Int32[],System.Double[],C1.C1Preview.RenderTableFragment.VectorInfo[],System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double)">
            <summary>
            Called only from ResolveAutoCols, ResolveAutoRows
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderTableFragment.ResolveNotAutoVectors(C1.C1Preview.RefDim,System.Int32[]@,System.Double[]@,C1.C1Preview.RenderTableFragment.VectorInfo[]@,C1.C1Preview.TableResolvedInfo.StretchedVectorCollection,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Boolean,System.Double@)">
            <summary>
            Returns true if sizes of *INTERNAL VECTORS' AREA* WAS CHANGED OR COUNT OF VECTORS WAS CHANGED.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TitleResolvedInfo">
            <summary>
            Represents the resolved information about header/footer in table.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.Group">
            <summary>
            The TableVectorGroup object representing the title.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.Objects">
            <summary>
            RenderFragments in header/footer.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.Ordinals">
            <summary>
            Ordinals of vectors in header/footer.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.Sizes">
            <summary>
            Sizes of vectors in header/footer.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.IsAtEdge">
            <summary>
            Indicates whether the header/footer is at the edge of object (top / left / right / bottom).
            </summary>
        </member>
        <member name="F:C1.C1Preview.TitleResolvedInfo.Size">
            <summary>
            The size of title, if title is at edge of object then this side
            does not include the additional space for gridline.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableResolvedInfo">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesCols">
            <summary>
            If RenderTable.RepeateGridLinesHorz == true then
            this list contains columns for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesHorz == false then
            this list contains columns for which the grid lines ARE REPEATED.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesRows">
            <summary>
            If RenderTable.RepeateGridLinesVert == true then
            this list contains rows for which the grid lines ARE NOT REPEATED.
            If RenderTable.RepeateGridLinesVert == false then
            this list contains rows for which the grid lines ARE REPEATED.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableResolvedInfo.VertHeadersResolved">
            <summary>
            Gets or sets value indicating that the headers of table is resolved and
            VertPageHeade, VertPageFooter properties contains valid values.
            </summary>
        </member>
        <member name="P:C1.C1Preview.TableResolvedInfo.HorzHeadersResolved">
            <summary>
            Gets or sets value indicating that the headers of table is resolved and
            HorzPageHeader, HorzPageFooter properties contains valid values.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVector">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVector.#ctor(System.Int32,System.Double)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection.Find(System.Int32)">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSplitParams.SplitVectorIndex">
            <summary>
            Index of vector in the _colsOrdinals or _rowsOrdinals array.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSplitParams.SplitPosWithinVector">
            <summary>
            Split position within vector it is zero if split position
            is between vectors.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSplitParams.Header">
            <summary>
            Resolved info of repeated header.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TableSplitParams.Footer">
            <summary>
            Resolved info of repeated footer.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DocPoint">
            <summary>
            Represents a position within document body, this position is specified
            by PageColumn and point in this PageColumn.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RefreshModeEnum">
            <summary>
            Describes the data and expressions refresh mode during document generation.  
            </summary>
        </member>
        <member name="F:C1.C1Preview.RefreshModeEnum.NoRefresh">
            <summary>
            Neither expressions nor data are refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed and expressions are calculated).
            </summary>
        </member>
        <member name="F:C1.C1Preview.RefreshModeEnum.RefreshDataBinding">
            <summary>
            Expressions that do not reference data sources are recalculated,
            but data is not refreshed.
            Note that if the document has not yet been generated, this mode is ignored
            (i.e. data is refreshed).
            </summary>
        </member>
        <member name="F:C1.C1Preview.RefreshModeEnum.RefreshCalculatedValues">
            <summary>
            Data is refreshed, all expressions are recalculated. 
            </summary>
        </member>
        <member name="T:C1.C1Preview.GenerateErrorEnum">
            <summary>
            Represents types of errors that can occur during document generation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.None">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.CyclicReference">
            <summary>
            The document contains a cyclic reference.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.ResolvingDimension">
            <summary>
            A dimension of an object cannot be resolved.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.AutoWidthNotSupproted">
            <summary>
            Auto width is not supported for an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.AutoHeightNotSupproted">
            <summary>
            Auto height is not supported for an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.AutoSizeNotSupported">
            <summary>
            Auto size is not supported for an object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.LayoutChange">
            <summary>
            Layout cannot be changed at that time.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.DataBinding">
            <summary>
            Error in data binding.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.Scripting">
            <summary>
            Scripting error.
            </summary>
        </member>
        <member name="F:C1.C1Preview.GenerateErrorEnum.ImportC1Report">
            <summary>
            C1Report import error.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OffsetsD">
            <summary>
            Stores a set of four double numbers that represent the
            offsets from edges of rectangular area.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OffsetsD.Parse(System.String,C1.C1Preview.OffsetsD@,System.Boolean)">
            <summary>
            Converts a string to the RectangleD structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">The RectangleD structure.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to RectangleD.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="P:C1.C1Preview.OffsetsD.Empty">
            <summary>
            Represents an instance of the OffsetsF class with its members uninitialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.OffsetsI">
            <summary>
            Stores a set of four integer numbers that represent the
            offsets from edges of rectangular area.
            </summary>
        </member>
        <member name="M:C1.C1Preview.OffsetsI.Ceiling(C1.C1Preview.OffsetsD)">
            <summary>
            Converts the specified OffsetsD structure to a OffsetsI structure by 
            rounding the OffsetsD values to the next higher integer values. 
            </summary>
            <param name="value">The OffsetsD structure to be converted.</param>
            <returns></returns>
        </member>
        <member name="P:C1.C1Preview.OffsetsI.Empty">
            <summary>
            Represents an instance of the OffsetsF class with its members uninitialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PointD">
            <summary>
            Represents an ordered pair of double x- and y-coordinates that defines a point 
            in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PointD.ToString">
            <summary>
            Overridden. Converts this PointD to a human readable string. 
            </summary>
            <returns>A string that represents this PointD.</returns>
        </member>
        <member name="M:C1.C1Preview.PointD.Ceiling">
            <summary>
            Converts this PointD object to a Point object by rounding the 
            values of the PointD object to the next higher integer values. 
            </summary>
            <returns>The Point object this method converts to.</returns>
        </member>
        <member name="M:C1.C1Preview.PointD.Truncate">
            <summary>
            Converts this PointD object to a Point object by truncating
            the values of the Point object. 
            </summary>
            <returns>The Point object this method converts to.</returns>
        </member>
        <member name="M:C1.C1Preview.PointD.Parse(System.String,C1.C1Preview.PointD@,System.Boolean)">
            <summary>
            Converts a string to the PointD structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">The PointD structure.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to PointD.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="P:C1.C1Preview.PointD.X">
            <summary>
            Gets the x-coordinate of this PointD.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PointD.Y">
            <summary>
            Gets the y-coordinate of this PointD.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PointD.IsEmpty">
            <summary>
            Gets a value indicating whether this PointD is empty.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PointD.Empty">
            <summary>
            Represents a new instance of the PointD class with member data left uninitialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SizeD">
            <summary>
            Stores an ordered pair of double numbers, typically the width and height of a rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SizeD.ToString">
            <summary>
            Overridden. Creates a human-readable string that represents this SizeD. 
            </summary>
            <returns>A string that represents this SizeD.</returns>
        </member>
        <member name="M:C1.C1Preview.SizeD.Ceiling">
            <summary>
            Converts this SizeD object to a Point object by rounding the 
            values of the SizeD object to the next higher integer values. 
            </summary>
            <returns>The Size object this method converts to.</returns>
        </member>
        <member name="M:C1.C1Preview.SizeD.Truncate">
            <summary>
            Converts this SizeD object to a Size object by truncating
            the values of the Size object. 
            </summary>
            <returns>The Size object this method converts to.</returns>
        </member>
        <member name="P:C1.C1Preview.SizeD.Width">
            <summary>
            Gets or sets the horizontal component of this SizeD.
            </summary>
        </member>
        <member name="P:C1.C1Preview.SizeD.Height">
            <summary>
            Gets or sets the vertical component of this SizeD.
            </summary>
        </member>
        <member name="P:C1.C1Preview.SizeD.IsEmpty">
            <summary>
            Gets a value indicating whether this SizeD has zero width and height.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RectangleD">
            <summary>
            Stores a set of four double numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RectangleD.ToString">
            <summary>
            Overridden. Converts the Location and Size 
            of this RectangleD to a human-readable string.
            </summary>
            <returns>A string that contains the position, width, and height of this RectangleD structure, for example, "{X=20, Y=20, Width=100, Height=50}". </returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.PointD)">
            <summary>
            Determines if the specified point is contained within this RectangleD structure.
            </summary>
            <param name="pt">The PointD to test.</param>
            <returns>This method returns true if the point represented by the pt parameter is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.RectangleD)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this RectangleD structure.
            </summary>
            <param name="rect">The RectangleD to test.</param>
            <returns>This method returns true if the rectangular region represented by rect is entirely contained within the rectangular region represented by this RectangleD; otherwise false.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained
            within this RectangleD structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>This method returns true if the point defined by x and y is contained within this RectangleD structure; otherwise false.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
            <param name="left">The amount to inflate this RectangleD structure from left.</param>
            <param name="top">The amount to inflate this RectangleD structure from top.</param>
            <param name="right">The amount to inflate this RectangleD structure from right.</param>
            <param name="bottom">The amount to inflate this RectangleD structure from bottom.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.SizeD)">
            <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
            <param name="left">The amount to inflate this rectangle.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double)">
            <summary>
            Inflates this RectangleD by the specified amount.
            </summary>
            <param name="left">The amount to inflate this RectangleD structure horizontally.</param>
            <param name="top">The amount to inflate this RectangleD structure vertically.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD)">
            <summary>
            Replaces this RectangleD structure with the intersection of itself and the specified RectangleD structure.
            </summary>
            <param name="rect">The rectangle to intersect.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.IntersectsWith(C1.C1Preview.RectangleD)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns true if there is any intersection.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Offset(C1.C1Preview.PointD)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pt">The amount to offset the location.</param>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Parse(System.String,C1.C1Preview.RectangleD@,System.Boolean)">
            <summary>
            Converts a string to the RectangleD structure.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="result">The RectangleD structure.</param>
            <param name="throwException">Indicates the exception should be thrown if string can not be converted to RectangleD.</param>
            <returns>Returns true if no error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a RectangleD structure with upper-left corner and lower-right corner at the specified locations.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangular region.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangular region.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangular region.</param>
            <returns>The new RectangleD that this method creates.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.RectangleD,System.Double,System.Double)">
            <summary>
            Creates and returns an inflated copy of the specified RectangleD structure.
            The copy is inflated by the specified amount.
            The original rectangle remains unmodified.
            </summary>
            <param name="rect">The RectangleF to be copied. This rectangle is not modified.</param>
            <param name="x">The amount to inflate the copy of the rectangle horizontally.</param>
            <param name="y">The amount to inflate the copy of the rectangle vertically.</param>
            <returns>The inflated RectangleD.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
            <summary>
            Returns a RectangleD structure that represents the intersection of two rectangles.
            If there is no intersection, and empty RectangleD is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A rectangle to intersect.</param>
            <returns>A third RectangleD structure the size of which represents the overlapped area of the two specified rectangles.</returns>
        </member>
        <member name="M:C1.C1Preview.RectangleD.Union(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A rectangle to union.</param>
            <returns>A third RectangleD structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="P:C1.C1Preview.RectangleD.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Width">
            <summary>
            Gets or sets the width of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Height">
            <summary>
            Gets or sets the height of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Left">
            <summary>
            Gets the x-coordinate of the left edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Top">
            <summary>
            Gets the y-coordinate of the top edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Right">
            <summary>
            Gets the x-coordinate of the right edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this RectangleD structure.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Size">
            <summary>
            Gets or sets the size of this RectangleD.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.IsEmpty">
            <summary>
            Tests whether the Width or Height property of this RectangleD has a value of zero.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RectangleD.Empty">
            <summary>
            Represents an instance of the RectangleD class with its members uninitialized.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Page">
            <summary>
            Represents the generated page of document.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Page.FindHyperlink(C1.C1Preview.PointD)">
            <summary>
            Searches a hyperlink on page at specified position.
            </summary>
            <param name="ptPage">Point on page in resolved units.</param>
            <returns>The C1HyperlinkInfo object describing the searchd hyperlink or null if not found.</returns>
        </member>
        <member name="M:C1.C1Preview.Page.FindFragment(C1.C1Preview.PointD)">
            <summary>
            Searches a RenderFragment object on page at specified position.
            </summary>
            <param name="ptPage">Point on page in resolved units.</param>
            <returns>The found RenderFragment object or null if not found.</returns>
        </member>
        <member name="M:C1.C1Preview.Page.GetHyperlinks">
            <summary>
            Gets the list of all hyperlinks on page.
            </summary>
            <returns>The C1HyperlinkInfoCollection collection containing the page's hyperlinks.</returns>
        </member>
        <member name="M:C1.C1Preview.Page.GetInputFragments(System.Boolean)">
            <summary>
            Gets the list of RenderInputFragments objects on this page.
            </summary>
            <returns>Returns the array containing the list of RenderInputFragment objects.</returns>
        </member>
        <member name="P:C1.C1Preview.Page.PageNo">
            <summary>
            Gets or sets the number of page, the numbering starts from 1.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Page.Index">
            <summary>
            Gets the index of page in collection.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Page.IsEmpty">
            <summary>
            Gets the value indicating that the page is empty - 
            it has no fragments from document.Body.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageCollection">
            <summary>
            Represents the list of document's pages.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageCollection.Find(System.Int32,System.Int32)">
            <summary>
            Searches a page with the specified logical coordinates.
            </summary>
            <param name="pageX">Indicates the X logical coordinate of page.</param>
            <param name="pageY">Indicates the Y logical coordinate of page.</param>
            <returns>Returns the found Page object or null.</returns>
        </member>
        <member name="M:C1.C1Preview.PageCollection.Find(System.Int32)">
            <summary>
            Searches a page with the specified page number.
            </summary>
            <param name="pageX">Indicates the page number.</param>
            <returns>Returns the found Page object or null.</returns>
        </member>
        <member name="P:C1.C1Preview.PageCollection.Document">
            <summary>
            C1Preview object containing this collection of pages.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageColumnDef">
            <summary>
            Defines parameters of a single page column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumnDef.Width">
            <summary>
            Width of the column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumnDef.Spacing">
            <summary>
            Spacing between current column and next column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.PageColumnDefCollection">
            <summary>
            Represents the collection of page columns definitions which are
            items of type PageColumnDef.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PageColumnDefCollection.Add">
            <summary>
            Add column with default parameters, width is auto, spacing - 5mm.
            </summary>
            <returns>Returns the index of added column in collection.</returns>
        </member>
        <member name="T:C1.C1Preview.DataBindingModeEnum">
            <summary>
            Defines the data binding mode.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBindingModeEnum.None">
            <summary>
            The object is not data bound.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBindingModeEnum.List">
            <summary>
            The object is bound to a valid data source via its DataBinding property.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DataBindingModeEnum.Internal">
            <summary>
            Some internal parts of the object are data bound, for example
            a group of rows within a RenderTable can be data bound.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderFragmentCollection">
            <summary>
            Represents the collection of RenderFragment objects.
            All fragments in this collection sorted by ZOrder
            to perform drawing and search.
            </summary>
        </member>
        <member name="M:C1.C1Preview.RenderFragmentCollection.FindFragmentIndex(C1.C1Preview.RenderFragment)">
            <summary>
            Searches the position for newly added fragment.
            </summary>
            <param name="rf"></param>
            <returns></returns>
        </member>
        <member name="T:C1.C1Preview.RenderObjectList">
            <summary>
            Represents a simple list of RenderObject objects; this list
            is used to store the copies of the object produced by data binding.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ReresolvingModeEnum">
            <summary>
            Enumerates the situations when reresolving can occurs.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReresolvingModeEnum.SplitVert">
            <summary>
            Reresolving occurs on vertical split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ReresolvingModeEnum.SplitHorz">
            <summary>
            Reresolving occurs on horizontal split.
            </summary>
        </member>
        <member name="T:C1.C1Preview.DrawingFlagsEnum">
            <summary>
            Defines flags which can be used by the object to manage its painting.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.UseGdiDrawing">
            <summary>
            GDI will be used for drawing. In this case the object must override the method:
            <code>
            protected virtual void InternalDraw(GraphicsUtils.GdiDc dc, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code>
            If this flag is not specified, GDI+ will be used instead and the object must override the method:
            <code>
            protected virtual void InternalDraw(Graphics graphics, RectangleD boundsRect, RectangleD drawingBoundsRect);
            </code>
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.SetClipping">
            <summary>
            Clipping will be defined before painting.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.ContentIsEmpty">
            <summary>
            If specified then the object is not painted.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.OwnsChildDrawing">
            <summary>
            The standard painting of child objects is suppressed. The object must paint its children itself.
            </summary>
        </member>
        <member name="F:C1.C1Preview.DrawingFlagsEnum.BeginHyperlink">
            <summary>
            Special comment fields are added before and after fragment to the metafile,
            specifying that the content is a hyperlink.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SplitPos">
            <summary>
            Describes the split position.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitPos.Pos">
            <summary>
            Position in object relative to the top / left edge of object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitPos.SpaceForHardBreak">
            <summary>
            Space *after* Pos available for object if HardBreak is true.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitPos.HardBreak">
            <summary>
            Indicates that the break is a "hard", i.e. the object must split exactly on Pos.
            </summary>
        </member>
        <member name="T:C1.C1Preview.SplitContext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext._splitIfLargeObjects">
            <summary>
            Contains all newly added objects with SplitIfLarge option.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext._splitNewPageObjects">
            <summary>
            Contains all newly added objects with SplitNewPage option.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext._processedObjects">
            <summary>
            Contains all objects with SplitIfLarge option which were processed.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.ColumnStarted">
            <summary>
            Indicates that the column is started on split.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.IsPageAreaEmpty">
            <summary>
            New page area was started on split and maximum space for object currently available.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.SaveResolvedInfo">
            <summary>
            Contains saved resolved information for objects.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.CurSplit">
            <summary>
            Current Split object where splitting occurs.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.CurSplitIndex">
            <summary>
            Current index in the Splits collection.
            </summary>
        </member>
        <member name="F:C1.C1Preview.SplitContext.Splits">
            <summary>
            Collection of splits in the top-parent object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.GetState">
            <summary>
            Returns current state of object this state can be restored with using SetState() method.
            </summary>
            <returns>Returns the current state of object.</returns>
        </member>
        <member name="M:C1.C1Preview.SplitContext.SetState(C1.C1Preview.SplitContext.State)">
            <summary>
            Sets the state of object.
            </summary>
            <param name="state">State to set.</param>
        </member>
        <member name="M:C1.C1Preview.SplitContext.ContainsSplitIfLarge">
            <summary>
            Returns true if exists newly added objects with SplitIfLarge option.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.ContainsSplitNewPage">
            <summary>
            Returns true if exists newly added objects with SplitNewPage option.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.ResetSplitIfLarge">
            <summary>
            Marks all objects with SplitIfLarge option as processed.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.ResetSplitNewPage">
            <summary>
            Marks all objects with SplitNewPage option as processed.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitVert(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
            <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by vertical or not.
            Top defines the top bound for objects, it should be used instead of pageArea.Bounds.Bottom
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitHorz(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
            <summary>
            Go over all newly added fragments with SplitIfLarge option
            and check are they fit by horizontal or not.
            Left defines the left bound for objects, it should be used instead of pageArea.Bounds.Left
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.IsSplitIfLarge(C1.C1Preview.RenderObject)">
            <summary>
            Returns true if object was newly added and has SplitIfLarge option.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.IsSplitNewPage(C1.C1Preview.RenderObject)">
            <summary>
            Returns true if object was newly added and has SplitNewPage option.
            </summary>
        </member>
        <member name="M:C1.C1Preview.SplitContext.IsProcessed(C1.C1Preview.RenderObject)">
            <summary>
            Returns true if object has SplitIfLarge option and was marked as processed.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TextSplitParams">
            <summary>
            Defines the split parameters for textual objects - RenderText, RenderParagraph and RenderRichText.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RenderImageFragment">
            <summary>
            Represents a fragment of the RenderImage object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.RenderRichTextFragment.LastCharIndex">
            <summary>
            Index of first character *after* fragment.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableCheckBox.GetAutoSize(System.String,System.Drawing.Font,System.Drawing.ContentAlignment,System.Drawing.ContentAlignment)">
            <summary>
            Returns the optimal size of control on the base of specified visual properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableComboBox.ShowDropDownForm">
            <summary>
            Creates a dropdown form and displays it.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableComboBox.CloseDropDownForm">
            <summary>
            Closes and disposes a dropdown form.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableComboBox.UpdateValue">
            <summary>
            Updates _selectedIndex and _textBox.Text, these properties are filled on the basis of
            the _listBox.SelectedIndex property.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableComboBox.GetAutoSize(System.String,System.Drawing.Font)">
            <summary>
            Returns the optimal size of control on the base of specified visual properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ScalableComboBox.SelectedIndexText">
            <summary>
            Gets the text of selected item, if no item selected returns an empty string.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ScalableRadioButton.GetAutoSize(System.String,System.Drawing.Font,System.Drawing.ContentAlignment,System.Drawing.ContentAlignment)">
            <summary>
            Returns the optimal size of control on the base of specified visual properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ScalableRadioButton.AutoCheck">
            <summary>
            Hides the base AutoCheck property.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageAreaBase.Document">
            <summary>
            Gets the C1PrintDocument object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageAreaBase.Bounds">
            <summary>
            Gets the bounds of page area within page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageArea.ColumnCount">
            <summary>
            Gets the count of columns in this part of page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageArea.Item(System.Int32)">
            <summary>
            Enumerates columns by index.
            </summary>
            <param name="index">Index of column.</param>
            <returns>Returns the PageColumn object representing column with specified index.</returns>
        </member>
        <member name="P:C1.C1Preview.ChildPageArea.ResolvedPage">
            <summary>
            Gets the ResolvedPage object containg this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ChildPageArea.Parent">
            <summary>
            Gets the parent PageArea object containing this object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ResolvedPage">
            <summary>
            Describes the resolved layout of page.
            Page can be represented as a set of rectangle, each rectangle is a part of page
            (Header, Body or Footer), in turn a body of page consists of set of columns.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.Page">
            <summary>
            Gets the Page object containing this object.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.PageSettings">
            <summary>
            Gets the page settings.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.Header">
            <summary>
            Gets the PageAreaHeader object representing the resolved info about header of page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.Footer">
            <summary>
            Gets the PageAreaFooter object representing the resolved info about footer of page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.Body">
            <summary>
            Gets the PageAreaBody object representing the resolved info about body of page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.FullWidth">
            <summary>
            Gets the full width of the page, margins are not taken into account.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ResolvedPage.FullHeight">
            <summary>
            Gets the full height of the page, margins are not taken into account.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageAreaBody.ColumnCount">
            <summary>
            Gets the count of columns in this part of page.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageAreaBody.Item(System.Int32)">
            <summary>
            Enumerates columns by index.
            </summary>
            <param name="index">Index of column.</param>
            <returns>Returns the PageColumn object representing column with specified index.</returns>
        </member>
        <member name="T:C1.C1Preview.PageColumn">
            <summary>
            Represents the column resolved info.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumn.Index">
            <summary>
            Index of column in the page part.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumn.IsLast">
            <summary>
            Indicates whether the current column is a last column in its PageArea.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumn.IsFirst">
            <summary>
            Indicates whether the current column is a first column in its PageArea.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumn.Next">
            <summary>
            Gets the next column, which goes after this column.
            </summary>
        </member>
        <member name="P:C1.C1Preview.PageColumn.Prev">
            <summary>
            Gets the previous column, which goes prior this column.
            </summary>
        </member>
        <member name="T:C1.C1Preview.FlowAlignEnum">
            <summary>
            Defines modes of alignment on block flow.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FlowAlignEnum.Default">
            <summary>
            For child objects, the alignment specified on the parent is used.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FlowAlignEnum.Near">
            <summary>
            Objects are aligned left for top to bottom flow, bottom for left to right flow.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FlowAlignEnum.Center">
            <summary>
            Objects are centered.
            </summary>
        </member>
        <member name="F:C1.C1Preview.FlowAlignEnum.Far">
            <summary>
            Objects are aligned right for top to bottom flow, top for left to right flow.
            </summary>
        </member>
        <member name="T:C1.C1Preview.AlignHorzEnum">
            <summary>
            Defines modes of horizontal alignment of text.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignHorzEnum.Left">
            <summary>
            Align text to the left.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignHorzEnum.Center">
            <summary>
            Center text horizontally.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignHorzEnum.Right">
            <summary>
            Align text to the right.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignHorzEnum.Justify">
            <summary>
            Justify text horizontally.
            </summary>
        </member>
        <member name="T:C1.C1Preview.AlignVertEnum">
            <summary>
            Defines modes of vertical alignment of text.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignVertEnum.Top">
            <summary>
            Align text to the top.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignVertEnum.Center">
            <summary>
            Center text vertically.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignVertEnum.Bottom">
            <summary>
            Align text to the bottom.
            </summary>
        </member>
        <member name="F:C1.C1Preview.AlignVertEnum.Justify">
            <summary>
            Justify text vertically.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ImageAlignHorzEnum">
            <summary>
            Defines modes of horizontal alignment of image.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignHorzEnum.Left">
            <summary>
            Align image to the left.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignHorzEnum.Center">
            <summary>
            Center image horizontally.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignHorzEnum.Right">
            <summary>
            Align image to the right.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ImageAlignVertEnum">
            <summary>
            Defines modes of vertical alignment of image.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignVertEnum.Top">
            <summary>
            Align image to the top.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignVertEnum.Center">
            <summary>
            Center image vertically.
            </summary>
        </member>
        <member name="F:C1.C1Preview.ImageAlignVertEnum.Bottom">
            <summary>
            Align image to the bottom.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TextPositionEnum">
            <summary>
            Defines the text position (normal, subscript or superscript).
            </summary>
        </member>
        <member name="F:C1.C1Preview.TextPositionEnum.Normal">
            <summary>
            Text is positioned normally.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TextPositionEnum.Subscript">
            <summary>
            Text is positioned as subscript.
            </summary>
        </member>
        <member name="F:C1.C1Preview.TextPositionEnum.Superscript">
            <summary>
            Text is positioned as superscript.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ImageAlign">
            <summary>
            Describes the image alignment.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.AlignHorz">
            <summary>
            Horizontal alignment of an image.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.AlignVert">
            <summary>
            Vertical alignment of an image.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.StretchHorz">
            <summary>
            Gets or sets the value indicating whether an image is stretched 
            horizontally to fit layout rectangle or it has a natural width.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.StretchVert">
            <summary>
            Gets or sets the value indicating whether an image is stretched 
            vertically to fit layout rectangle or it has a natural height.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatio">
            <summary>
            Keeps aspect ratio. Useful when StretchHorz or StretchVert is true.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.TileHorz">
            <summary>
            The image is tiled horizontally. 
            If StretchHorz is true then this property is ignored.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.TileVert">
            <summary>
            The image is tiled vertically. 
            If StretchVert is true then this property is ignored.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.BestFit">
            <summary>
            This property is a composition (function) of the StretchHorz, StretchVert and
            KeepAspectRatio properties.
            </summary>
        </member>
        <member name="P:C1.C1Preview.ImageAlign.Default">
            <summary>
            Gets default image alignment.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Offsets">
            <summary>
            Describes Padding and Spacing.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Offsets.Left">
            <summary>
            Gets or sets left offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Offsets.Top">
            <summary>
            Gets or sets top offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Offsets.Right">
            <summary>
            Gets or sets right offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Offsets.Bottom">
            <summary>
            Gets or sets bottom offset, only absolute units can be used: "10mm", "1pt", and so on.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Offsets.All">
            <summary>
            Sets the all offsets.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LineDef">
            <summary>
            Defines the line's rendering attributes. This is immutable class.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.Color">
            <summary>
            Gets or sets color of line.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.Width">
            <summary>
            Gets or sets width of line.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.BackColor">
            <summary>
            Gets the back color of pen - color of spaces between dashes.
            This property does not used if Style is DashStyle.Solid.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.DashStyle">
            <summary>
            Gets the style used for dashed lines drawn with this LineDef.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.DashPattern">
            <summary>
            Gets an array of custom dashes and spaces.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.Empty">
            <summary>
            Represents the empty line with Color.Empty and Unit.Empty.
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.Default">
            <summary>
            Represents the default solid line with Color.Black and "0.5pt".
            </summary>
        </member>
        <member name="P:C1.C1Preview.LineDef.DefaultBold">
            <summary>
            Represents the default solid bold line with Color.Black and "2pt".
            </summary>
        </member>
        <member name="T:C1.C1Preview.Borders">
            <summary>
            Describes borders around rectangular area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Borders.Left">
            <summary>
            Gets or sets left border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Borders.Top">
            <summary>
            Gets or sets top border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Borders.Right">
            <summary>
            Gets or sets right border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Borders.Bottom">
            <summary>
            Gets or sets bottom border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Borders.All">
            <summary>
            Sets the border for all edges of an object.
            </summary>
        </member>
        <member name="T:C1.C1Preview.GridLines">
            <summary>
            Describes the lines within of table's area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Left">
            <summary>
            Gets or sets left border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Top">
            <summary>
            Gets or sets top border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Right">
            <summary>
            Gets or sets right border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Bottom">
            <summary>
            Gets or sets bottom border.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Vert">
            <summary>
            Gets or sets vertical lines within table's area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.Horz">
            <summary>
            Gets or sets horizontal lines within table's area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.GridLines.All">
            <summary>
            Sets the all lines.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkAttrs">
            <summary>
            The visual style of hyperlink.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1HyperlinkTextAttrs">
            <summary>
            Determines the attributes used to highlight a hyperlink inside a text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor">
            <summary>
            The background color. If the value is Color.Empty or Color.Transparent, 
            the hyperlinks background color is not changed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor">
            <summary>
            The foreground (text) color. If the value is Color.Empty or Color.Transparent, 
            the hyperlinks text color is not changed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline">
            <summary>
            If the value is true, the hyperlinks text is underlined.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.VisitedDefault">
            <summary>
            Gets the default attributes of visited hyperlinks.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.NormalDefault">
            <summary>
            Gets the default attributes of "normal" (not visited and not highlighted) hyperlinks.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.HoverDefault">
            <summary>
            Gets the default attributes of highlighted hyperlinks.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Style">
            <summary>
            Represents the style for a user.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Style.GetPropValue(System.Int32)">
            <summary>
            Gets value of "style" property.
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
        </member>
        <member name="M:C1.C1Preview.Style.GetPropValueNoDef(System.Int32)">
            <summary>
            Gets value of "style" property.
            If style has no this property and all its parents has no this property
            then null is returned (NOT DEFAULT VALUE).
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
        </member>
        <member name="M:C1.C1Preview.Style.GetPropValueNoDefTable(System.Int32)">
            <summary>
            This method used only in RenderTable objects and its subobjects TableCell,
            TableVector etc.
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
        </member>
        <member name="M:C1.C1Preview.Style.GetPropValue(System.Int32,System.Object)">
            <summary>
            Gets value of property of this object (Children, Parent etc).
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="defaultValue">This value will be returned if useParentStyle is false and style has no specified property.</param>
        </member>
        <member name="M:C1.C1Preview.Style.SetPropValueIfNotSame(System.Int32,System.Object)">
            <summary>
            Sets value of property if its value is not equals to current value.
            </summary>
            <param name="propKey">Key of property (c_propXXX constant).</param>
            <param name="value">Value of property.</param>
        </member>
        <member name="M:C1.C1Preview.Style.IsEmpty">
            <summary>
            Returns true if style has no properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)">
            <summary>
            Copies all non inherited properties from another Style object,
            also copies Parent, AmbientParent properties.
            </summary>
            <param name="style">Source Style object.</param>
        </member>
        <member name="P:C1.C1Preview.Style.Parent">
            <summary>
            Gets the parent style.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Parents">
            <summary>
            Sets both parents (Parent and AmbientParent) to the same value.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Children">
            <summary>
            Gets collection of child styles.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.HasChildren">
            <summary>
            Indicates that style has child styles.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.AmbientParent">
            <summary>
            Gets the ambient parent style.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.BackgroundImage">
            <summary>
            Gets or sets the background image.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.BackgroundImageName">
            <summary>
            Gets or sets the name of background image
            in the document's dictionary.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Brush">
            <summary>
            Gets or sets brush used to fill object.
            If for style both BackColor and Brush are specified then the BackColor will be used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextColor">
            <summary>
            Gets or sets the color of a text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextAngle">
            <summary>
            Gets or sets the angle of a text, in degree.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextAlignHorz">
            <summary>
            Gets or sets the horizontal alignment of text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextAlignVert">
            <summary>
            Gets or sets the vertical alignment of text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.LineSpacing">
            <summary>
            Gets or sets the line spacing of a text in %, 100 means default line spacing.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.WordWrap">
            <summary>
            Indicates whether a render object automatically wraps words to the 
            beginning of the next line when necessary. 
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextPosition">
            <summary>
            Gets or sets the style of text: SuperScript, SubScript, Normal.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.HyperlinkAttrs">
            <summary>
            Gets or sets attributes of "normal" (not visited and not highlighted) hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrs">
            <summary>
            Gets or sets attributes of visited hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrs">
            <summary>
            Gets or sets attributes of highlighted hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrs">
            <summary>
            Gets or sets attributes of active hyperlink.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.MeasureTrailingSpaces">
            <summary>
            By default the boundary rectangle formed during text rendering
            excludes the space at the end of each line. 
            Set this property to true to include that space in measurement.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Padding">
            <summary>
            Gets or sets padding widths.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Spacing">
            <summary>
            Gets or sets spacing widths.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Borders">
            <summary>
            Gets or sets the border around rendering.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.GridLines">
            <summary>
            Gets or sets the lines in table's area.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ImageAlign">
            <summary>
            Gets or sets the alignment of the picture.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.BackgroundImageAlign">
            <summary>
            Gets or sets the alignment of the background picture.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.BackColor">
            <summary>
            Gets or sets the background color.
            If for style both BackColor and Brush are specified then the BackColor will be used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.MinOrphanLines">
            <summary>
            Gets or sets the minimal count of orphan lines in text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ClientAreaOnly">
            <summary>
            Gets or sets the value indicating whether client area or whole area of control will be rendered.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ShapeFillBrush">
            <summary>
            Gets or sets brush used to fill internal area of shape objects (RenderRectangle, RenderEllipse, etc).
            If for style both ShapeFillColor and ShapeFillBrush are specified then the ShapeFillColor will be used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ShapeFillColor">
            <summary>
            Gets or sets the color used to fill internal area of shape objects (RenderRectangle, RenderEllipse, etc).
            If for style both ShapeFillColor and ShapeFillBrush are specified then the ShapeFillColor will be used.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.ShapeLine">
            <summary>
            Gets or sets the style of line used to draw the shape objects (RenderLine, RenderRectangle etc).
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FlowAlign">
            <summary>
            Gets or sets the align of object in its parent on block flow.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FlowAlignChildren">
            <summary>
            Gets or sets the align of object's children on block flow.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.TextIndent">
            <summary>
            Gets or sets a value that indicates how far to
            indent the first line of a paragraph of text.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.Font">
            <summary>
            Gets or sets font.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontName">
            <summary>
            Gets or sets the face name of this font.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontSize">
            <summary>
            Gets or sets the em-size of this font measured in the units specified by the Unit property.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontBold">
            <summary>
            Gets or sets a value that indicates whether this font is bold.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontItalic">
            <summary>
            Gets or sets a value that indicates whether this font is italic.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontUnderline">
            <summary>
            Gets or sets a value that indicates whether this font is underline.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Style.FontStrikeout">
            <summary>
            Gets or sets a value that indicates whether this font is strikeout.
            </summary>
        </member>
        <member name="T:C1.C1Preview.StyleCollection">
            <summary>
            Collection of Style objects.
            </summary>
        </member>
        <member name="M:C1.C1Preview.StyleCollection.Add">
            <summary>
            Creates new Style object and adds it to the collection.
            </summary>
            <returns>Created style object.</returns>
        </member>
        <member name="T:C1.C1Preview.TagCollection">
            <summary>
            Collection of the Tag objects.
            </summary>
        </member>
        <member name="T:C1.C1Preview.ResolvingStack">
            <summary>
            The auxiliary class representing the stack of dimensions currently resolving.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ResolvingStack.PushDim(C1.C1Preview.RenderFragment,C1.C1Preview.RefDim)">
            <summary>
            Pushes a dimension to stack.
            </summary>
            <param name="node">The resolved object.</param>
            <param name="dim">Dimension of object.</param>
        </member>
        <member name="M:C1.C1Preview.ResolvingStack.PopDim">
            <summary>
            Removes the top dimension from stack.
            </summary>
        </member>
        <member name="M:C1.C1Preview.ResolvingStack.HasDim(C1.C1Preview.RenderFragment,C1.C1Preview.RefDim)">
            <summary>
            Checks has a stack the specified dimension of object or not.
            </summary>
            <param name="node">Object.</param>
            <param name="dimension">Dimension of object.</param>
            <returns>Returns true if stack has a dimension.</returns>
        </member>
        <member name="T:C1.C1Preview.RefDim">
            <summary>
            Internal, describes the dimensions of object.
            <para>
            Left, Top, Right, Bottom - Absolute coordinates on page.
            </para>
            <para>
            RelLeft, RelTop, RelRight, RelBottom - Relative coordinates in parent.
            </para>
            <para>
            ChildLeft, ChildTop, ChildRight, ChildBottom - Relative coordinates for child objects,
            ChildLeft and ChildTop are always 0,
            ChildRight = Width - SpacingLeft - SpacingRight - PaddingLeft - PaddingRight - BordersLeft - BordersRight
            </para>
            <para>
            Width, Height - sizes of object.
            </para>
            <para>
            ChildWidth, ChildHeight - sizes for child objects, for example, ChildWidth is
            Width - (SpacingLeft + BorderLeft + PaddingLeft) - (SpacingRight + BorderRight + PaddingRight).
            </para>
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1MetafileInfo">
            <summary>
            Contains addititional information about metafile created by the C1Preview.
            This information are stored in the GdiComment record.
            Format of the record describes by the C1.C1Pdf.EMR_C1_METAFILE_INFO structure.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1MetafileInfoReader">
            <summary>
            Provides a method for reading the C1MetafileInfo from metafile.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.SetRtf(System.String)">
            <summary>
            Sets RTF text to the object.
            </summary>
            <param name="rtf"></param>
        </member>
        <member name="M:C1.C1Preview.C1RichText.GetRtf">
            <summary>
            Gets the object's content as RTF text.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.GetSelectedRtf">
            <summary>
            Gets the selected RTF text, text can be selected with using SetSelection
            method.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.GetText">
            <summary>
            Gets the object's content as simple text.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.Measure(System.Drawing.Graphics,C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Int32,System.Int32)">
            <summary>
            Measures the RTF text on specified Graphics.
            </summary>
            <param name="measureGraphics">Graphics object, which will be used for measuring. Can be null, in this case screen DC will be used.</param>
            <param name="boundsRect">Bounds of text.</param>
            <param name="unitType">Units of measurement of boundsRect.</param>
            <param name="startIndex">Index of first char of text's range.</param>
            <param name="length">Length of text range, if this parameter is 0 or less than zero then all text from startIndex will be calculated.</param>
            <returns>Returns the C1RichTextMeasureInfo which contains the measured info.</returns>
        </member>
        <member name="M:C1.C1Preview.C1RichText.Draw(System.Drawing.Graphics,System.Drawing.Graphics,C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Int32,System.Int32)">
            <summary>
            Draw the RTF text on specified Graphics.
            </summary>
            <param name="drawGraphics">Graphics object on which text will be drawn.</param>
            <param name="measureGraphics">Graphics object, which will be used for measuring of RTF text. Can be null, in this case screen DC will be used.</param>
            <param name="boundsRect">Bounds of text.</param>
            <param name="unitType">Units of measurement of boundsRect.</param>
            <param name="startIndex">Index of first char of text's range.</param>
            <param name="length">Length of text range, if this parameter is 0 or less than zero then all text from startIndex will be calculated.</param>
            <returns>Returns the C1RichTextMeasureInfo which contains the measured info.</returns>
        </member>
        <member name="M:C1.C1Preview.C1RichText.Draw(System.IntPtr,System.IntPtr,System.Drawing.Rectangle,C1.C1Preview.UnitTypeEnum,System.Int32,System.Int32)">
            <summary>
            Draw the RTF text on specified device context.
            </summary>
            <param name="drawDc">DC on which text will be drawn.</param>
            <param name="measureDc">DC which will be used for measuring of RTF text. Can be IntPtr.Zero, in this case screen DC will be used.</param>
            <param name="boundsRect">Bounds of text.</param>
            <param name="unitType">Units of measurement of boundsRect.</param>
            <param name="startIndex">Index of first char of text's range.</param>
            <param name="length">Length of text range, if this parameter is 0 or less than zero then all text from startIndex will be calculated.</param>
            <returns>Returns the C1RichTextMeasureInfo which contains the measured info.</returns>
        </member>
        <member name="M:C1.C1Preview.C1RichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the object's content from specified file.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
            <summary>
            Loads the object's content from stream.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.CopyFrom(C1.C1Preview.C1RichText)">
            <summary>
            Copies properties of another C1RichText object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.C1RichText.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets the selection.
            </summary>
            <param name="selectionStart">Index of the first selected char, zero-based.</param>
            <param name="selectionLength">Length of selected text, if it is -1 then all text from selectionStart will be selected.</param>
        </member>
        <member name="P:C1.C1Preview.C1RichText.Transparent">
            <summary>
            Gets or sets the value indicating whether the RTF is transparent when painting.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1RichText.TextLength">
            <summary>
            Gets the length of text, length of real text will be calculated, 
            the length of RTF tags will not taken into account.
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1RichText.DetectUrls">
            <summary>
            Gets or sets a value indicating whether or not the C1RichText will automatically 
            format a Uniform Resource Locator (URL).
            </summary>
        </member>
        <member name="P:C1.C1Preview.C1RichText.Handle">
            <summary>
            Handle of native API window which is used.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1RichText.MeasureInfo">
            <summary>
            Represents a result of measuring of RTF text.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1RichText.MeasureInfo.BoundsRect">
            <summary>
            Bounds of text, units of measurement depend on call method.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1RichText.MeasureInfo.FittedCharsCount">
            <summary>
            Count of characters which  fit into the BoundsRect rectangle.
            </summary>
        </member>
        <member name="F:C1.C1Preview.C1RichText.MeasureInfo.AllCharsFitted">
            <summary>
            True if all characters are fitted.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1RichText.RtfVersionEnum">
            <summary>
            Enumerates the supported versions of RTF.
            </summary>
        </member>
        <member name="T:C1.C1Preview.C1RichText.RtfVersionInfo">
            <summary>
            Contains the additional information about each
            RTF version: DLL name, class name of Rich window used in this DLL.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.c_TextAnglePrecision">
            <summary>
            Specifies the precision of rotation angle of text, for example if
            c_TextAnglePrecision equals to 0.01 then
            90.000 equals to 90.009
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Owner">
            <summary>
            IC1TextOwner object managing this C1Text object.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Flags">
            <summary>
            Used to storing boolean flags.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.FittedLineCount">
            <summary>
            Count of fitted lines.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.FittedCharCount">
            <summary>
            Count of fitted chars, each IC1TextObjectItem has length in one char.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.MaxLineWidthPx">
            <summary>
            Width of the widest line.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.MaxLineHeightPx">
            <summary>
            Height of the highest line.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.SummaryHeightPx">
            <summary>
            Summary height of all lines.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LinesAlignSizePx">
            <summary>
            Available space for lines aligning.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetHyperlinkAttrs(C1.C1Preview.Util.IC1TextItem)">
            <summary>
            Gets the current visual attributes of hyperlink
            on the basis of State, Highlight and Style properties.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetFont(C1.C1Preview.Util.C1Text.TextItem,System.Single,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Gets the FontCacheItem object.
            </summary>
            <param name="style">Style object determinating attributes of font.</param>
            <param name="useTextPosition">True if property Style.TextPosition should be taken into account if this parameter is false then TextPosition.Normal will be used.</param>
            <param name="forceUnderline">True if underlined font must be created.</param>
            <param name="destDcDpiX">Horizontal dpi of destination DC (where font will be used).</param>
            <param name="destDcDpiY">Vertical dpi of destination DC (where font will be used).</param>
            <returns>FontCacheItem object representing the GDI font handle.</returns>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.CalcCharsWidths(System.IntPtr,System.String,System.Int32[]@,System.Int32,C1.C1Preview.Util.C1Text.TextItem,System.Single,System.Boolean,System.Single,System.Single,System.Boolean@)">
            <summary>
            Calculate widths of characters in string.
            </summary>
            <param name="dc">Handle of device context used for calculating.</param>
            <param name="s">String to process, must be not null and not empty.</param>
            <param name="charMap">Array with chars' widths.</param>
            <param name="charMapPos">Starting position in charMapWidths array.</param>
            <param name="style">Style object, specifying the formatting attributes of string.</param>
            <param name="forceUnderline">True if underlined font must be used.</param>
            <param name="dcDpiX">Horizontal dpi of dc.</param>
            <param name="dcDpiY">Vertical dpi of dc.</param>
            <param name="fixedFont">Contains true on exit if style uses the fixed font.</param>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.BuildLinesWithoutWrap">
            <summary>
            Builds the list of lines with using \r or \n characters only.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.BuildCharMap">
            <summary>
            Builds charMap for measured text.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.PerformLineTabsLayout(C1.C1Preview.Util.C1Text.Line,System.Int32[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@,System.Collections.ArrayList@)">
            <summary>
            Performs the "tab layout" in line.
            </summary>
            <param name="charMap">The array of characters' widths of whole .</param>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.BuildLineCharMap(System.IntPtr,C1.C1Preview.Util.C1Text.Line,System.String,System.Single,System.Single,System.Boolean@,System.Int32@,System.Collections.ArrayList@)">
            <summary>
            Builds charMap for C1Text.Line object.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetLineRect(C1.C1Preview.Util.C1Text.Line)">
            <summary>
            Gets the rectangle of line. You can use this method directly only
            if NormalAngle is 0, otherwise you should use GetLineCorners method
            to get the corners of line.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.Measure(System.Drawing.Graphics,System.Drawing.Size,System.Boolean,System.Boolean,System.Int32,System.Int32,C1.C1Preview.Util.LinesDirectionEnum,System.Object)">
            <summary>
            Measures a text.
            </summary>
            <param name="measureGraphics">Graphics object providing DC which is used to calculate a text layout, if null then screen DC will be used.</param>
            <param name="measureSizePx">Area to render to. Units are measured in Pixels of measureGraphics.</param>
            <param name="autoWidth">True if width of object should be calculated on the basis of its content, in this case measureSize.Width is not used.</param>
            <param name="autoHeight">True if height of object should be calculated on the basis of its content, in this case measureSize.Height is not used.</param>
            <param name="from">Index of first char from calculation begins, all non text objects has length in 1 char.</param>
            <param name="length">Length in chars.</param>
            <param name="parseTextCallbackData">Custom user-defined data, which will be passed back to the IC1TextOwner.ParseItemText method. Typically used to replace tags in text with actual values.</param>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.Draw(System.IntPtr,System.Single,System.Single,C1.Util.Win.Win32.RECT,C1.Util.Win.Win32.RECT,System.Boolean)">
            <summary>
            Draws a text.
            </summary>
            <param name="dc">Handle to the device context.</param>
            <param name="dcDpiX">Horizontal resolution of device context.</param>
            <param name="dcDpiY">Vertical resolution of device context.</param>
            <param name="boundsPx">Contains the rectangle (in pixels) in which the text is to be formatted.</param>
            <param name="forceJustifyOfLastLine">Justify last line if text alignment is justify and last line is not eof paragraph. Typically this parameters is used to draw part of the splitted justified text.</param>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetCharRect(System.Drawing.Graphics,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Returns the rectangle of char.
            Function may return Rectangle.Empty if char has no place (char is a CR or LF at end of char for example),
            or if TextAngle does not equal to 0, 90, 180 or 270.
            </summary>
            <param name="measureGraphics">Graphics object on which measurement will be performed.</param>
            <param name="charIndex">Index of char, first char has zero index.</param>
            <param name="lineIndexOfChar">Contains the index of line containing the char on exit.</param>
            <param name="forceJustifyOfLastLine">If true then the chars in last line will be justified.</param>
            <returns>The Rectangle structure describing the area of specified char.</returns>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetCharsRects(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the array of rectangles of range of characters.
            If TextAngle is not 0, 90, 180 or 270 degrees then returns array with zero size.
            </summary>
            <param name="measureGraphics">Graphics object on which measurement will be performed.</param>
            <param name="startCharIndex">Index of first character.</param>
            <param name="length">Count of characters.</param>
            <param name="forceJustifyOfLastLine">If true then the chars in last line will be justified.</param>
            <returns>The array of Rectangle structures.</returns>
        </member>
        <member name="M:C1.C1Preview.Util.C1Text.GetCharRangeRects(System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an array of rectanges of char range, this function returns an array
            in which each line corresponds to one array's element, like:
                +------------------+
                | rect[0]          |
            +----------------------|
            | rect[1]              |
            | rect[2]              |
            +----------------------+
            | rect[3]       |
            +---------------+
            </summary>
            <param name="measureGraphics">Graphics object on which measurement will be performed.</param>
            <param name="startCharIndex">Index of first character.</param>
            <param name="length">Count of characters.</param>
            <param name="forceJustifyOfLastLine">If true then the chars in last line will be justified.</param>
            <returns>The array of Rectangle structures.</returns>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.SizePx">
            <summary>
            Size of line.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.AscentPx">
            <summary>
            Ascent of line (distance from base line to top).
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.RotatedHeightPx">
            <summary>
            Specifies the "rotated" height of line, this property equals to 
            Size.Height / cos(TextAngle) or Size.Height / sin.TextAngle.
            Depending on lines direction (by vertically or by horizontally).
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.CenterPx">
            <summary>
            Coordinates of center of line.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.From">
            <summary>
            Index of first char from which line begins.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.Length">
            <summary>
            Full length in chars, each non Text object has 1 char length.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.LengthNoCrLf">
            <summary>
            Length without CR and LF at end.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.Line.LengthNoSpaces">
            <summary>
            Length without spaces at end.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange._item">
            <summary>
            IC1TextItem producing this LineRange.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange.NormalHeightPx">
            <summary>
            Height of range, if this is a text range then this field
            has a height of *Normal* font (subscript / superscript are ignored).
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange.AscentPx">
            <summary>
            Ascent of range (distance from base line to top).
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange.TopInLinePx">
            <summary>
            Offset of range from top of line.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange.From">
            <summary>
            Index of first char relative to begin of line from which range begins.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineRange.Length">
            <summary>
            Length of range in chars, range can has zero length.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineTextRange.ScriptHeightPx">
            <summary>
            "Normal" height of range, this height is calculated without 
            using of superscript / subscript.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineTextRange.ScriptAscentPx">
            <summary>
            "Normal" ascent of range, this ascent is calculated without 
            using of superscript / subscript
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.LineTextRange.Flags">
            <summary>
            Contains boolean flags.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.TextItem._firstIndex">
            <summary>
            First index of text item in the C1Text.Text.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.C1Text.TextItem._length">
            <summary>
            Length of text of this item.
            </summary>
        </member>
        <member name="T:C1.C1Preview.LongOperationEventArgs">
            <summary>
            Describes arguments for the event fired periodically by a potentially
            long operation. Allows to provide feedback to the user and may also
            allow to cancel the operation.
            </summary>
        </member>
        <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor">
            <summary>
            Creates a new instance of LongOperationEventArgs with default
            properties (Complete=0, CanCancel=false).
            </summary>
        </member>
        <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete value and CanCancel=false.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
        </member>
        <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified complete and CanCancel values.
            </summary>
            <param name="complete">How much is complete (from 0 to 1).</param>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of LongOperationEventArgs with the
            specified CanCancel value and Complete=0.
            </summary>
            <param name="canCancel">Whether the operation can be cancelled.</param>
        </member>
        <member name="T:C1.C1Preview.Util.FontCacheItem">
            <summary>
            Caches a GDI font handle.
            This class caches properties of Font object: Name, Size, Unit, and so on.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.FontCacheItem._refCount">
            <summary>
            Count of references on this item.
            </summary>
        </member>
        <member name="F:C1.C1Preview.Util.FontCacheItem._threadId">
            <summary>
            Id of thread producing this font.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Util.FontCache">
            <summary>
            Represents a cache of GDI font handles.
            </summary>
        </member>
        <member name="M:C1.C1Preview.Util.FontCache.GetFont(System.Drawing.Font,System.Single,C1.C1Preview.TextPositionEnum,System.Boolean,System.Single,System.Single)">
            <summary>
            Searches a font handle in cache and creates it if it is not found.
            </summary>
            <param name="font">Gdi+ Font object.</param>
            <param name="fontAngle">Rotation angle of font.</param>
            <param name="fontTextPosition">Position of font: Normal, SuperScript, SubScript.</param>
            <param name="forceUnderline">True if font must be underlined.</param>
            <param name="dpiX">DpiX of graphics where font will be used.</param>
            <param name="dpiY">DpiY of graphics where font will be used.</param>
            <returns>Returns the FontCacheItem object representing the cached font handle.</returns>
        </member>
        <member name="T:C1.C1Preview.EventCollection">
            <summary>
            Represents a collection that fires events when changing.
            </summary>
        </member>
        <member name="E:C1.C1Preview.EventCollection.Changing">
            <summary>
            Occurs before changing of collection.
            </summary>
        </member>
        <member name="E:C1.C1Preview.EventCollection.Changed">
            <summary>
            Occurs after changing of collection.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EventCollectionChangeTypeEnum">
            <summary>
            Defines the types of collection's changing.
            </summary>
        </member>
        <member name="T:C1.C1Preview.EventCollectionChangeEventHandler">
            <summary>
            Represents the method that will handler an event occuring when
            collection changing.
            </summary>
            <param name="sender">The source of event.</param>
            <param name="e">The parameters of event.</param>
        </member>
        <member name="T:C1.C1Preview.EventCollectionChangeEventArgs">
            <summary>
            Contains the data for events which occurs the EventCollection changed.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.ChangeType">
            <summary>
            Gets the type of collection's changing.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.OldItem">
            <summary>
            Gets the old object at specified index.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.NewItem">
            <summary>
            Gets the new object at specified index.
            </summary>
        </member>
        <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.Index">
            <summary>
            Gets the index within collection where changing occurs.
            </summary>
        </member>
        <member name="T:C1.C1Preview.IMetafilePainter">
            <summary>
            This interface can be implemented by object which need to customize painting
            of metafiles in the GraphicsUtils.DrawImage method.
            </summary>
        </member>
        <member name="M:C1.C1Preview.IMetafilePainter.DrawMetafile(System.Drawing.Graphics,System.Drawing.Imaging.Metafile,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs actually drawing of image.
            </summary>
            <param name="graphics">The Graphics to draw on.</param>
            <param name="metafile">Metafile to draw.</param>
            <param name="x">x-coordinate of the upper-left corner of the drawn image.</param>
            <param name="y">y-coordinate of the upper-left corner of the drawn image.</param>
            <param name="width">Width of the drawn image.</param>
            <param name="height">Height of the drawn image.</param>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.IsPrinter">
            <summary>
            Indicates whether a metafile is created from printer DC.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.Creator">
            <summary>
            Gets the creator of the metafile (C1Preview or unknown).
            </summary>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.MetafileDpi">
            <summary>
            Gets the resolution of metafile.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi">
            <summary>
            Gets the dpi of reference graphics, which was used during metafile's creation.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.MetafileSizePoints">
            <summary>
            Gets the metafile's size, calculated on the basis of MetafileDpi.
            </summary>
        </member>
        <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsSizePoints">
            <summary>
            Gets the metafile's size, calculated on the basis of ReferenceGraphicsDpi.
            </summary>
        </member>
        <member name="M:C1.C1Preview.PrinterUtil.CreatePrinterIC(System.String)">
            <summary>
            Creates the information context for specified printer,
            this context can be used for measurement operations, NOT FOR DRAWING.
            </summary>
            <param name="printerName">Name of printer.</param>
            <returns>The handle of context or IntPtr.Zero if error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.PrinterUtil.GetPrinterDpi(System.String)">
            <summary>
            Gets the dpi of specified printer.
            </summary>
            <param name="printerName">Name of printer.</param>
            <returns>The PointF structure, PointF.X is horizontal dpi, PointF.Y is vertical dpi. Returns PointF.Empty if error occurs.</returns>
        </member>
        <member name="M:C1.C1Preview.PrinterUtil.IsPrinterValid(System.String)">
            <summary>
            Tests is the specified printer name.
            </summary>
            <param name="printerName">Name of printer.</param>
            <returns>Returns the true if printer name is valid.</returns>
        </member>
        <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)">
            <summary>
            Searches for the printer with specified minimal dpi, the horizontal and
            vertical dpi of printer must be same.
            </summary>
            <param name="minDpi">The minimal possible dpi. If this parameter is zero then the first printer with "square" dpi will be selected.</param>
            <param name="bestPrinterDpi">OUT: The dpi of the searched printer or 0 if printer is not found.</param>
            <returns>The name of searched printer or null if search fails.</returns>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1DBrush">
            <summary>
            Serializes the Brush class as XmlElement.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1DImageData">
            <summary>
            Class with the only purpose in life - serialize images.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Serialization.C1DIconData">
            <summary>
            Class with the only purpose in life - serialize icons.
            </summary>
        </member>
        <member name="T:C1.C1Preview.RichTextUtils">
            <summary>
            Contains set of methods for support text rendering, 
            used from RenderTextBase, RenderField classes.
            </summary>
        </member>
        <member name="T:C1.C1Preview.TextUtils">
            <summary>
            Contains set of methods for support text rendering, 
            used from RenderTextBase, RenderField classes.
            </summary>
        </member>
        <member name="T:C1.C1Preview.Warning">
            <summary>
            Describes the situation that caused the need for conflict resolving.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Warning.Code">
            <summary>
            Gets the error's category.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Warning.Description">
            <summary>
            Gets a detailed description of the error.
            </summary>
        </member>
        <member name="P:C1.C1Preview.Warning.Source">
            <summary>
            Gets the object which triggered the error.
            </summary>
        </member>
        <member name="T:C1.C1Preview.WarningCollection">
            <summary>
            Collection of Warning objects.
            </summary>
        </member>
    </members>
</doc>
